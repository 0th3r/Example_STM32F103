
I2CScan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ac4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08001bd0  08001bd0  00011bd0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001c4c  08001c4c  00011c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001c50  08001c50  00011c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08001c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c4  20000070  08001cc4  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000134  08001cc4  00020134  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000de43  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001cd7  00000000  00000000  0002dedc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004e34  00000000  00000000  0002fbb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000640  00000000  00000000  000349e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a50  00000000  00000000  00035028  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004609  00000000  00000000  00035a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002844  00000000  00000000  0003a081  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003c8c5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001574  00000000  00000000  0003c944  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001bb8 	.word	0x08001bb8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001bb8 	.word	0x08001bb8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f892 	bl	800029c <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000188:	f000 f854 	bl	8000234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000008 	.word	0x20000008
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f82d 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f000 ff94 	bl	80010e8 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000098 	.word	0x20000098
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	20000098 	.word	0x20000098

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001f8:	bf1e      	ittt	ne
 80001fa:	4b04      	ldrne	r3, [pc, #16]	; (800020c <HAL_Delay+0x20>)
 80001fc:	781b      	ldrbne	r3, [r3, #0]
 80001fe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000200:	f7ff ffee 	bl	80001e0 <HAL_GetTick>
 8000204:	1b40      	subs	r0, r0, r5
 8000206:	4284      	cmp	r4, r0
 8000208:	d8fa      	bhi.n	8000200 <HAL_Delay+0x14>
  {
  }
}
 800020a:	bd38      	pop	{r3, r4, r5, pc}
 800020c:	20000000 	.word	0x20000000

08000210 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000212:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000214:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800021e:	041b      	lsls	r3, r3, #16
 8000220:	0c1b      	lsrs	r3, r3, #16
 8000222:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800022a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800022c:	60d3      	str	r3, [r2, #12]
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000236:	b530      	push	{r4, r5, lr}
 8000238:	68dc      	ldr	r4, [r3, #12]
 800023a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800023e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000242:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000244:	2b04      	cmp	r3, #4
 8000246:	bf28      	it	cs
 8000248:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	bf98      	it	ls
 8000252:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	fa05 f303 	lsl.w	r3, r5, r3
 8000258:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025c:	bf88      	it	hi
 800025e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	4019      	ands	r1, r3
 8000262:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000264:	fa05 f404 	lsl.w	r4, r5, r4
 8000268:	3c01      	subs	r4, #1
 800026a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800026c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026e:	ea42 0201 	orr.w	r2, r2, r1
 8000272:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	bfaf      	iteee	ge
 8000278:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	4b06      	ldrlt	r3, [pc, #24]	; (8000298 <HAL_NVIC_SetPriority+0x64>)
 800027e:	f000 000f 	andlt.w	r0, r0, #15
 8000282:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	bfa5      	ittet	ge
 8000286:	b2d2      	uxtbge	r2, r2
 8000288:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000ed14 	.word	0xe000ed14

0800029c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800029c:	3801      	subs	r0, #1
 800029e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002a2:	d20a      	bcs.n	80002ba <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a8:	4a06      	ldr	r2, [pc, #24]	; (80002c4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002aa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002ba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000e010 	.word	0xe000e010
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002c8:	4b04      	ldr	r3, [pc, #16]	; (80002dc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002ca:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	bf0c      	ite	eq
 80002d0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002d4:	f022 0204 	bicne.w	r2, r2, #4
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	4770      	bx	lr
 80002dc:	e000e010 	.word	0xe000e010

080002e0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002e0:	4770      	bx	lr

080002e2 <HAL_SYSTICK_IRQHandler>:
{
 80002e2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002e4:	f7ff fffc 	bl	80002e0 <HAL_SYSTICK_Callback>
 80002e8:	bd08      	pop	{r3, pc}
	...

080002ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002f0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002f2:	4616      	mov	r6, r2
 80002f4:	4b65      	ldr	r3, [pc, #404]	; (800048c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002f6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800049c <HAL_GPIO_Init+0x1b0>
 80002fa:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80004a0 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002fe:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000302:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000304:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000308:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 800030c:	45a0      	cmp	r8, r4
 800030e:	d17f      	bne.n	8000410 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000310:	684d      	ldr	r5, [r1, #4]
 8000312:	2d12      	cmp	r5, #18
 8000314:	f000 80af 	beq.w	8000476 <HAL_GPIO_Init+0x18a>
 8000318:	f200 8088 	bhi.w	800042c <HAL_GPIO_Init+0x140>
 800031c:	2d02      	cmp	r5, #2
 800031e:	f000 80a7 	beq.w	8000470 <HAL_GPIO_Init+0x184>
 8000322:	d87c      	bhi.n	800041e <HAL_GPIO_Init+0x132>
 8000324:	2d00      	cmp	r5, #0
 8000326:	f000 808e 	beq.w	8000446 <HAL_GPIO_Init+0x15a>
 800032a:	2d01      	cmp	r5, #1
 800032c:	f000 809e 	beq.w	800046c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000330:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000334:	2cff      	cmp	r4, #255	; 0xff
 8000336:	bf93      	iteet	ls
 8000338:	4682      	movls	sl, r0
 800033a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800033e:	3d08      	subhi	r5, #8
 8000340:	f8d0 b000 	ldrls.w	fp, [r0]
 8000344:	bf92      	itee	ls
 8000346:	00b5      	lslls	r5, r6, #2
 8000348:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800034c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800034e:	fa09 f805 	lsl.w	r8, r9, r5
 8000352:	ea2b 0808 	bic.w	r8, fp, r8
 8000356:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800035a:	bf88      	it	hi
 800035c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000360:	ea48 0505 	orr.w	r5, r8, r5
 8000364:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000368:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800036c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000370:	d04e      	beq.n	8000410 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000372:	4d47      	ldr	r5, [pc, #284]	; (8000490 <HAL_GPIO_Init+0x1a4>)
 8000374:	4f46      	ldr	r7, [pc, #280]	; (8000490 <HAL_GPIO_Init+0x1a4>)
 8000376:	69ad      	ldr	r5, [r5, #24]
 8000378:	f026 0803 	bic.w	r8, r6, #3
 800037c:	f045 0501 	orr.w	r5, r5, #1
 8000380:	61bd      	str	r5, [r7, #24]
 8000382:	69bd      	ldr	r5, [r7, #24]
 8000384:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000388:	f005 0501 	and.w	r5, r5, #1
 800038c:	9501      	str	r5, [sp, #4]
 800038e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000392:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000396:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000398:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800039c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003a0:	fa09 f90b 	lsl.w	r9, r9, fp
 80003a4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003a8:	4d3a      	ldr	r5, [pc, #232]	; (8000494 <HAL_GPIO_Init+0x1a8>)
 80003aa:	42a8      	cmp	r0, r5
 80003ac:	d068      	beq.n	8000480 <HAL_GPIO_Init+0x194>
 80003ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b2:	42a8      	cmp	r0, r5
 80003b4:	d066      	beq.n	8000484 <HAL_GPIO_Init+0x198>
 80003b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ba:	42a8      	cmp	r0, r5
 80003bc:	d064      	beq.n	8000488 <HAL_GPIO_Init+0x19c>
 80003be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003c2:	42a8      	cmp	r0, r5
 80003c4:	bf0c      	ite	eq
 80003c6:	2503      	moveq	r5, #3
 80003c8:	2504      	movne	r5, #4
 80003ca:	fa05 f50b 	lsl.w	r5, r5, fp
 80003ce:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003d2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003d6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003d8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003dc:	bf14      	ite	ne
 80003de:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003e0:	43a5      	biceq	r5, r4
 80003e2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003e4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003e6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003ea:	bf14      	ite	ne
 80003ec:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003ee:	43a5      	biceq	r5, r4
 80003f0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003f2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003f4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003f8:	bf14      	ite	ne
 80003fa:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003fc:	43a5      	biceq	r5, r4
 80003fe:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000400:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000402:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000406:	bf14      	ite	ne
 8000408:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800040a:	ea25 0404 	biceq.w	r4, r5, r4
 800040e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000410:	3601      	adds	r6, #1
 8000412:	2e10      	cmp	r6, #16
 8000414:	f47f af73 	bne.w	80002fe <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000418:	b003      	add	sp, #12
 800041a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800041e:	2d03      	cmp	r5, #3
 8000420:	d022      	beq.n	8000468 <HAL_GPIO_Init+0x17c>
 8000422:	2d11      	cmp	r5, #17
 8000424:	d184      	bne.n	8000330 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000426:	68ca      	ldr	r2, [r1, #12]
 8000428:	3204      	adds	r2, #4
          break;
 800042a:	e781      	b.n	8000330 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800042c:	4f1a      	ldr	r7, [pc, #104]	; (8000498 <HAL_GPIO_Init+0x1ac>)
 800042e:	42bd      	cmp	r5, r7
 8000430:	d009      	beq.n	8000446 <HAL_GPIO_Init+0x15a>
 8000432:	d812      	bhi.n	800045a <HAL_GPIO_Init+0x16e>
 8000434:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80004a4 <HAL_GPIO_Init+0x1b8>
 8000438:	454d      	cmp	r5, r9
 800043a:	d004      	beq.n	8000446 <HAL_GPIO_Init+0x15a>
 800043c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000440:	454d      	cmp	r5, r9
 8000442:	f47f af75 	bne.w	8000330 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000446:	688a      	ldr	r2, [r1, #8]
 8000448:	b1c2      	cbz	r2, 800047c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800044a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800044c:	bf0c      	ite	eq
 800044e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000452:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000456:	2208      	movs	r2, #8
 8000458:	e76a      	b.n	8000330 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800045a:	4575      	cmp	r5, lr
 800045c:	d0f3      	beq.n	8000446 <HAL_GPIO_Init+0x15a>
 800045e:	4565      	cmp	r5, ip
 8000460:	d0f1      	beq.n	8000446 <HAL_GPIO_Init+0x15a>
 8000462:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80004a8 <HAL_GPIO_Init+0x1bc>
 8000466:	e7eb      	b.n	8000440 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000468:	2200      	movs	r2, #0
 800046a:	e761      	b.n	8000330 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800046c:	68ca      	ldr	r2, [r1, #12]
          break;
 800046e:	e75f      	b.n	8000330 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000470:	68ca      	ldr	r2, [r1, #12]
 8000472:	3208      	adds	r2, #8
          break;
 8000474:	e75c      	b.n	8000330 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000476:	68ca      	ldr	r2, [r1, #12]
 8000478:	320c      	adds	r2, #12
          break;
 800047a:	e759      	b.n	8000330 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800047c:	2204      	movs	r2, #4
 800047e:	e757      	b.n	8000330 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000480:	2500      	movs	r5, #0
 8000482:	e7a2      	b.n	80003ca <HAL_GPIO_Init+0xde>
 8000484:	2501      	movs	r5, #1
 8000486:	e7a0      	b.n	80003ca <HAL_GPIO_Init+0xde>
 8000488:	2502      	movs	r5, #2
 800048a:	e79e      	b.n	80003ca <HAL_GPIO_Init+0xde>
 800048c:	40010400 	.word	0x40010400
 8000490:	40021000 	.word	0x40021000
 8000494:	40010800 	.word	0x40010800
 8000498:	10210000 	.word	0x10210000
 800049c:	10310000 	.word	0x10310000
 80004a0:	10320000 	.word	0x10320000
 80004a4:	10110000 	.word	0x10110000
 80004a8:	10220000 	.word	0x10220000

080004ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80004ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80004b0:	4604      	mov	r4, r0
 80004b2:	4690      	mov	r8, r2
 80004b4:	461f      	mov	r7, r3
 80004b6:	9e08      	ldr	r6, [sp, #32]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80004b8:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80004bc:	b28d      	uxth	r5, r1
 80004be:	6823      	ldr	r3, [r4, #0]
 80004c0:	f1b9 0f01 	cmp.w	r9, #1
 80004c4:	bf0c      	ite	eq
 80004c6:	695b      	ldreq	r3, [r3, #20]
 80004c8:	699b      	ldrne	r3, [r3, #24]
 80004ca:	ea35 0303 	bics.w	r3, r5, r3
 80004ce:	bf0c      	ite	eq
 80004d0:	2301      	moveq	r3, #1
 80004d2:	2300      	movne	r3, #0
 80004d4:	4543      	cmp	r3, r8
 80004d6:	d002      	beq.n	80004de <I2C_WaitOnFlagUntilTimeout+0x32>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;
 80004d8:	2000      	movs	r0, #0
}
 80004da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80004de:	1c7b      	adds	r3, r7, #1
 80004e0:	d0ed      	beq.n	80004be <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80004e2:	b95f      	cbnz	r7, 80004fc <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80004e4:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80004e6:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80004e8:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80004ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80004ee:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80004f2:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80004f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80004f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80004fc:	f7ff fe70 	bl	80001e0 <HAL_GetTick>
 8000500:	1b80      	subs	r0, r0, r6
 8000502:	4287      	cmp	r7, r0
 8000504:	d2db      	bcs.n	80004be <I2C_WaitOnFlagUntilTimeout+0x12>
 8000506:	e7ed      	b.n	80004e4 <I2C_WaitOnFlagUntilTimeout+0x38>

08000508 <HAL_I2C_Init>:
{
 8000508:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 800050a:	4604      	mov	r4, r0
 800050c:	b908      	cbnz	r0, 8000512 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800050e:	2001      	movs	r0, #1
 8000510:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000512:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000516:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800051a:	b91b      	cbnz	r3, 8000524 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800051c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000520:	f000 fe32 	bl	8001188 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000524:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000526:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000528:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800052c:	6813      	ldr	r3, [r2, #0]
 800052e:	f023 0301 	bic.w	r3, r3, #1
 8000532:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000534:	f000 fb8a 	bl	8000c4c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000538:	6863      	ldr	r3, [r4, #4]
 800053a:	4a2f      	ldr	r2, [pc, #188]	; (80005f8 <HAL_I2C_Init+0xf0>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d830      	bhi.n	80005a2 <HAL_I2C_Init+0x9a>
 8000540:	4a2e      	ldr	r2, [pc, #184]	; (80005fc <HAL_I2C_Init+0xf4>)
 8000542:	4290      	cmp	r0, r2
 8000544:	d9e3      	bls.n	800050e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000546:	4a2e      	ldr	r2, [pc, #184]	; (8000600 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8000548:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800054a:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 800054e:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000550:	3201      	adds	r2, #1
 8000552:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000554:	4a28      	ldr	r2, [pc, #160]	; (80005f8 <HAL_I2C_Init+0xf0>)
 8000556:	3801      	subs	r0, #1
 8000558:	4293      	cmp	r3, r2
 800055a:	d832      	bhi.n	80005c2 <HAL_I2C_Init+0xba>
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000562:	1c43      	adds	r3, r0, #1
 8000564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000568:	2b04      	cmp	r3, #4
 800056a:	bf38      	it	cc
 800056c:	2304      	movcc	r3, #4
 800056e:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000570:	6a22      	ldr	r2, [r4, #32]
 8000572:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000574:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000576:	4313      	orrs	r3, r2
 8000578:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800057a:	68e2      	ldr	r2, [r4, #12]
 800057c:	6923      	ldr	r3, [r4, #16]
 800057e:	4313      	orrs	r3, r2
 8000580:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000582:	69a2      	ldr	r2, [r4, #24]
 8000584:	6963      	ldr	r3, [r4, #20]
 8000586:	4313      	orrs	r3, r2
 8000588:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800058a:	680b      	ldr	r3, [r1, #0]
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000592:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000594:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000596:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800059a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800059c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80005a0:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80005a2:	4a18      	ldr	r2, [pc, #96]	; (8000604 <HAL_I2C_Init+0xfc>)
 80005a4:	4290      	cmp	r0, r2
 80005a6:	d9b2      	bls.n	800050e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80005a8:	4d15      	ldr	r5, [pc, #84]	; (8000600 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80005aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80005ae:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 80005b2:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80005b4:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 80005b6:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80005b8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80005bc:	fbb2 f2f5 	udiv	r2, r2, r5
 80005c0:	e7c6      	b.n	8000550 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80005c2:	68a2      	ldr	r2, [r4, #8]
 80005c4:	b952      	cbnz	r2, 80005dc <HAL_I2C_Init+0xd4>
 80005c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80005ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80005ce:	1c43      	adds	r3, r0, #1
 80005d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005d4:	b16b      	cbz	r3, 80005f2 <HAL_I2C_Init+0xea>
 80005d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005da:	e7c8      	b.n	800056e <HAL_I2C_Init+0x66>
 80005dc:	2219      	movs	r2, #25
 80005de:	4353      	muls	r3, r2
 80005e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80005e4:	1c43      	adds	r3, r0, #1
 80005e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005ea:	b113      	cbz	r3, 80005f2 <HAL_I2C_Init+0xea>
 80005ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f0:	e7bd      	b.n	800056e <HAL_I2C_Init+0x66>
 80005f2:	2301      	movs	r3, #1
 80005f4:	e7bb      	b.n	800056e <HAL_I2C_Init+0x66>
 80005f6:	bf00      	nop
 80005f8:	000186a0 	.word	0x000186a0
 80005fc:	001e847f 	.word	0x001e847f
 8000600:	000f4240 	.word	0x000f4240
 8000604:	003d08ff 	.word	0x003d08ff

08000608 <HAL_I2C_IsDeviceReady>:
{
 8000608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060c:	4604      	mov	r4, r0
 800060e:	b085      	sub	sp, #20
 8000610:	4698      	mov	r8, r3
 8000612:	4689      	mov	r9, r1
 8000614:	4692      	mov	sl, r2
  tickstart = HAL_GetTick();
 8000616:	f7ff fde3 	bl	80001e0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800061a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800061e:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000620:	2b20      	cmp	r3, #32
 8000622:	d003      	beq.n	800062c <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8000624:	2002      	movs	r0, #2
}
 8000626:	b005      	add	sp, #20
 8000628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800062c:	9000      	str	r0, [sp, #0]
 800062e:	2319      	movs	r3, #25
 8000630:	2201      	movs	r2, #1
 8000632:	494b      	ldr	r1, [pc, #300]	; (8000760 <HAL_I2C_IsDeviceReady+0x158>)
 8000634:	4620      	mov	r0, r4
 8000636:	f7ff ff39 	bl	80004ac <I2C_WaitOnFlagUntilTimeout>
 800063a:	2800      	cmp	r0, #0
 800063c:	d1f2      	bne.n	8000624 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 800063e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000642:	2b01      	cmp	r3, #1
 8000644:	d0ee      	beq.n	8000624 <HAL_I2C_IsDeviceReady+0x1c>
 8000646:	2301      	movs	r3, #1
 8000648:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800064c:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800064e:	2500      	movs	r5, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000650:	681a      	ldr	r2, [r3, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000652:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8000760 <HAL_I2C_IsDeviceReady+0x158>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000656:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000658:	bf58      	it	pl
 800065a:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800065c:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8000660:	bf5c      	itt	pl
 8000662:	f042 0201 	orrpl.w	r2, r2, #1
 8000666:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800066e:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000670:	2324      	movs	r3, #36	; 0x24
 8000672:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000676:	4b3b      	ldr	r3, [pc, #236]	; (8000764 <HAL_I2C_IsDeviceReady+0x15c>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000678:	6425      	str	r5, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800067a:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800067c:	6822      	ldr	r2, [r4, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800067e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000682:	6813      	ldr	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000684:	4620      	mov	r0, r4
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800068a:	6013      	str	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800068c:	9600      	str	r6, [sp, #0]
 800068e:	4643      	mov	r3, r8
 8000690:	2200      	movs	r2, #0
 8000692:	f7ff ff0b 	bl	80004ac <I2C_WaitOnFlagUntilTimeout>
 8000696:	b108      	cbz	r0, 800069c <HAL_I2C_IsDeviceReady+0x94>
        return HAL_TIMEOUT;
 8000698:	2003      	movs	r0, #3
 800069a:	e7c4      	b.n	8000626 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800069c:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800069e:	27a0      	movs	r7, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80006a0:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 80006a4:	f7ff fd9c 	bl	80001e0 <HAL_GetTick>
 80006a8:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80006aa:	6823      	ldr	r3, [r4, #0]
 80006ac:	6959      	ldr	r1, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80006ae:	695a      	ldr	r2, [r3, #20]
      tmp3 = hi2c->State;
 80006b0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80006b4:	f3c1 0140 	ubfx	r1, r1, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80006b8:	f3c2 2280 	ubfx	r2, r2, #10, #1
      tmp3 = hi2c->State;
 80006bc:	b2db      	uxtb	r3, r3
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 80006be:	b911      	cbnz	r1, 80006c6 <HAL_I2C_IsDeviceReady+0xbe>
 80006c0:	b90a      	cbnz	r2, 80006c6 <HAL_I2C_IsDeviceReady+0xbe>
 80006c2:	2ba0      	cmp	r3, #160	; 0xa0
 80006c4:	d120      	bne.n	8000708 <HAL_I2C_IsDeviceReady+0x100>
      hi2c->State = HAL_I2C_STATE_READY;
 80006c6:	2720      	movs	r7, #32
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80006c8:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 80006ca:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80006ce:	695a      	ldr	r2, [r3, #20]
 80006d0:	f012 0f02 	tst.w	r2, #2
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006da:	601a      	str	r2, [r3, #0]
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80006dc:	d02a      	beq.n	8000734 <HAL_I2C_IsDeviceReady+0x12c>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80006de:	2200      	movs	r2, #0
 80006e0:	9203      	str	r2, [sp, #12]
 80006e2:	695a      	ldr	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80006e4:	491e      	ldr	r1, [pc, #120]	; (8000760 <HAL_I2C_IsDeviceReady+0x158>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80006e6:	9203      	str	r2, [sp, #12]
 80006e8:	699b      	ldr	r3, [r3, #24]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80006ea:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80006ec:	9303      	str	r3, [sp, #12]
 80006ee:	9b03      	ldr	r3, [sp, #12]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80006f0:	9600      	str	r6, [sp, #0]
 80006f2:	2319      	movs	r3, #25
 80006f4:	4620      	mov	r0, r4
 80006f6:	f7ff fed9 	bl	80004ac <I2C_WaitOnFlagUntilTimeout>
 80006fa:	2800      	cmp	r0, #0
 80006fc:	d1cc      	bne.n	8000698 <HAL_I2C_IsDeviceReady+0x90>
        hi2c->State = HAL_I2C_STATE_READY;
 80006fe:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000702:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8000706:	e78e      	b.n	8000626 <HAL_I2C_IsDeviceReady+0x1e>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000708:	f1b8 0f00 	cmp.w	r8, #0
 800070c:	d10c      	bne.n	8000728 <HAL_I2C_IsDeviceReady+0x120>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800070e:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000712:	6823      	ldr	r3, [r4, #0]
 8000714:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000716:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 8000718:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800071c:	f3c1 0140 	ubfx	r1, r1, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000720:	f3c2 2280 	ubfx	r2, r2, #10, #1
        tmp3 = hi2c->State;
 8000724:	b2db      	uxtb	r3, r3
 8000726:	e7ca      	b.n	80006be <HAL_I2C_IsDeviceReady+0xb6>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000728:	f7ff fd5a 	bl	80001e0 <HAL_GetTick>
 800072c:	1b80      	subs	r0, r0, r6
 800072e:	4580      	cmp	r8, r0
 8000730:	d3ed      	bcc.n	800070e <HAL_I2C_IsDeviceReady+0x106>
 8000732:	e7ee      	b.n	8000712 <HAL_I2C_IsDeviceReady+0x10a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000734:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000738:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800073a:	615a      	str	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800073c:	4620      	mov	r0, r4
 800073e:	9600      	str	r6, [sp, #0]
 8000740:	2319      	movs	r3, #25
 8000742:	2201      	movs	r2, #1
 8000744:	f7ff feb2 	bl	80004ac <I2C_WaitOnFlagUntilTimeout>
 8000748:	2800      	cmp	r0, #0
 800074a:	d1a5      	bne.n	8000698 <HAL_I2C_IsDeviceReady+0x90>
 800074c:	3501      	adds	r5, #1
    }while(I2C_Trials++ < Trials);
 800074e:	45aa      	cmp	sl, r5
 8000750:	d894      	bhi.n	800067c <HAL_I2C_IsDeviceReady+0x74>
    __HAL_UNLOCK(hi2c);
 8000752:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000756:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    return HAL_ERROR;
 800075a:	2001      	movs	r0, #1
 800075c:	e763      	b.n	8000626 <HAL_I2C_IsDeviceReady+0x1e>
 800075e:	bf00      	nop
 8000760:	00100002 	.word	0x00100002
 8000764:	ffff0000 	.word	0xffff0000

08000768 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000768:	6803      	ldr	r3, [r0, #0]
{
 800076a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800076e:	07db      	lsls	r3, r3, #31
{
 8000770:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000772:	d410      	bmi.n	8000796 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000774:	682b      	ldr	r3, [r5, #0]
 8000776:	079f      	lsls	r7, r3, #30
 8000778:	d45e      	bmi.n	8000838 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800077a:	682b      	ldr	r3, [r5, #0]
 800077c:	0719      	lsls	r1, r3, #28
 800077e:	f100 8095 	bmi.w	80008ac <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000782:	682b      	ldr	r3, [r5, #0]
 8000784:	075a      	lsls	r2, r3, #29
 8000786:	f100 80bf 	bmi.w	8000908 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800078a:	69ea      	ldr	r2, [r5, #28]
 800078c:	2a00      	cmp	r2, #0
 800078e:	f040 812d 	bne.w	80009ec <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000792:	2000      	movs	r0, #0
 8000794:	e014      	b.n	80007c0 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000796:	4c90      	ldr	r4, [pc, #576]	; (80009d8 <HAL_RCC_OscConfig+0x270>)
 8000798:	6863      	ldr	r3, [r4, #4]
 800079a:	f003 030c 	and.w	r3, r3, #12
 800079e:	2b04      	cmp	r3, #4
 80007a0:	d007      	beq.n	80007b2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007a2:	6863      	ldr	r3, [r4, #4]
 80007a4:	f003 030c 	and.w	r3, r3, #12
 80007a8:	2b08      	cmp	r3, #8
 80007aa:	d10c      	bne.n	80007c6 <HAL_RCC_OscConfig+0x5e>
 80007ac:	6863      	ldr	r3, [r4, #4]
 80007ae:	03de      	lsls	r6, r3, #15
 80007b0:	d509      	bpl.n	80007c6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007b2:	6823      	ldr	r3, [r4, #0]
 80007b4:	039c      	lsls	r4, r3, #14
 80007b6:	d5dd      	bpl.n	8000774 <HAL_RCC_OscConfig+0xc>
 80007b8:	686b      	ldr	r3, [r5, #4]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1da      	bne.n	8000774 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80007be:	2001      	movs	r0, #1
}
 80007c0:	b002      	add	sp, #8
 80007c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007c6:	686b      	ldr	r3, [r5, #4]
 80007c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007cc:	d110      	bne.n	80007f0 <HAL_RCC_OscConfig+0x88>
 80007ce:	6823      	ldr	r3, [r4, #0]
 80007d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007d4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80007d6:	f7ff fd03 	bl	80001e0 <HAL_GetTick>
 80007da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007dc:	6823      	ldr	r3, [r4, #0]
 80007de:	0398      	lsls	r0, r3, #14
 80007e0:	d4c8      	bmi.n	8000774 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007e2:	f7ff fcfd 	bl	80001e0 <HAL_GetTick>
 80007e6:	1b80      	subs	r0, r0, r6
 80007e8:	2864      	cmp	r0, #100	; 0x64
 80007ea:	d9f7      	bls.n	80007dc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80007ec:	2003      	movs	r0, #3
 80007ee:	e7e7      	b.n	80007c0 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007f0:	b99b      	cbnz	r3, 800081a <HAL_RCC_OscConfig+0xb2>
 80007f2:	6823      	ldr	r3, [r4, #0]
 80007f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007f8:	6023      	str	r3, [r4, #0]
 80007fa:	6823      	ldr	r3, [r4, #0]
 80007fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000800:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000802:	f7ff fced 	bl	80001e0 <HAL_GetTick>
 8000806:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	0399      	lsls	r1, r3, #14
 800080c:	d5b2      	bpl.n	8000774 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800080e:	f7ff fce7 	bl	80001e0 <HAL_GetTick>
 8000812:	1b80      	subs	r0, r0, r6
 8000814:	2864      	cmp	r0, #100	; 0x64
 8000816:	d9f7      	bls.n	8000808 <HAL_RCC_OscConfig+0xa0>
 8000818:	e7e8      	b.n	80007ec <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800081a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800081e:	6823      	ldr	r3, [r4, #0]
 8000820:	d103      	bne.n	800082a <HAL_RCC_OscConfig+0xc2>
 8000822:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000826:	6023      	str	r3, [r4, #0]
 8000828:	e7d1      	b.n	80007ce <HAL_RCC_OscConfig+0x66>
 800082a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800082e:	6023      	str	r3, [r4, #0]
 8000830:	6823      	ldr	r3, [r4, #0]
 8000832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000836:	e7cd      	b.n	80007d4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000838:	4c67      	ldr	r4, [pc, #412]	; (80009d8 <HAL_RCC_OscConfig+0x270>)
 800083a:	6863      	ldr	r3, [r4, #4]
 800083c:	f013 0f0c 	tst.w	r3, #12
 8000840:	d007      	beq.n	8000852 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000842:	6863      	ldr	r3, [r4, #4]
 8000844:	f003 030c 	and.w	r3, r3, #12
 8000848:	2b08      	cmp	r3, #8
 800084a:	d110      	bne.n	800086e <HAL_RCC_OscConfig+0x106>
 800084c:	6863      	ldr	r3, [r4, #4]
 800084e:	03da      	lsls	r2, r3, #15
 8000850:	d40d      	bmi.n	800086e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000852:	6823      	ldr	r3, [r4, #0]
 8000854:	079b      	lsls	r3, r3, #30
 8000856:	d502      	bpl.n	800085e <HAL_RCC_OscConfig+0xf6>
 8000858:	692b      	ldr	r3, [r5, #16]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d1af      	bne.n	80007be <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800085e:	6823      	ldr	r3, [r4, #0]
 8000860:	696a      	ldr	r2, [r5, #20]
 8000862:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000866:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800086a:	6023      	str	r3, [r4, #0]
 800086c:	e785      	b.n	800077a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800086e:	692a      	ldr	r2, [r5, #16]
 8000870:	4b5a      	ldr	r3, [pc, #360]	; (80009dc <HAL_RCC_OscConfig+0x274>)
 8000872:	b16a      	cbz	r2, 8000890 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000874:	2201      	movs	r2, #1
 8000876:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000878:	f7ff fcb2 	bl	80001e0 <HAL_GetTick>
 800087c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800087e:	6823      	ldr	r3, [r4, #0]
 8000880:	079f      	lsls	r7, r3, #30
 8000882:	d4ec      	bmi.n	800085e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000884:	f7ff fcac 	bl	80001e0 <HAL_GetTick>
 8000888:	1b80      	subs	r0, r0, r6
 800088a:	2802      	cmp	r0, #2
 800088c:	d9f7      	bls.n	800087e <HAL_RCC_OscConfig+0x116>
 800088e:	e7ad      	b.n	80007ec <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000890:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000892:	f7ff fca5 	bl	80001e0 <HAL_GetTick>
 8000896:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000898:	6823      	ldr	r3, [r4, #0]
 800089a:	0798      	lsls	r0, r3, #30
 800089c:	f57f af6d 	bpl.w	800077a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008a0:	f7ff fc9e 	bl	80001e0 <HAL_GetTick>
 80008a4:	1b80      	subs	r0, r0, r6
 80008a6:	2802      	cmp	r0, #2
 80008a8:	d9f6      	bls.n	8000898 <HAL_RCC_OscConfig+0x130>
 80008aa:	e79f      	b.n	80007ec <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008ac:	69aa      	ldr	r2, [r5, #24]
 80008ae:	4c4a      	ldr	r4, [pc, #296]	; (80009d8 <HAL_RCC_OscConfig+0x270>)
 80008b0:	4b4b      	ldr	r3, [pc, #300]	; (80009e0 <HAL_RCC_OscConfig+0x278>)
 80008b2:	b1da      	cbz	r2, 80008ec <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80008b4:	2201      	movs	r2, #1
 80008b6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80008b8:	f7ff fc92 	bl	80001e0 <HAL_GetTick>
 80008bc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008c0:	079b      	lsls	r3, r3, #30
 80008c2:	d50d      	bpl.n	80008e0 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80008c4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80008c8:	4b46      	ldr	r3, [pc, #280]	; (80009e4 <HAL_RCC_OscConfig+0x27c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80008d0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80008d2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80008d4:	9b01      	ldr	r3, [sp, #4]
 80008d6:	1e5a      	subs	r2, r3, #1
 80008d8:	9201      	str	r2, [sp, #4]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1f9      	bne.n	80008d2 <HAL_RCC_OscConfig+0x16a>
 80008de:	e750      	b.n	8000782 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008e0:	f7ff fc7e 	bl	80001e0 <HAL_GetTick>
 80008e4:	1b80      	subs	r0, r0, r6
 80008e6:	2802      	cmp	r0, #2
 80008e8:	d9e9      	bls.n	80008be <HAL_RCC_OscConfig+0x156>
 80008ea:	e77f      	b.n	80007ec <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80008ec:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80008ee:	f7ff fc77 	bl	80001e0 <HAL_GetTick>
 80008f2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008f6:	079f      	lsls	r7, r3, #30
 80008f8:	f57f af43 	bpl.w	8000782 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008fc:	f7ff fc70 	bl	80001e0 <HAL_GetTick>
 8000900:	1b80      	subs	r0, r0, r6
 8000902:	2802      	cmp	r0, #2
 8000904:	d9f6      	bls.n	80008f4 <HAL_RCC_OscConfig+0x18c>
 8000906:	e771      	b.n	80007ec <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000908:	4c33      	ldr	r4, [pc, #204]	; (80009d8 <HAL_RCC_OscConfig+0x270>)
 800090a:	69e3      	ldr	r3, [r4, #28]
 800090c:	00d8      	lsls	r0, r3, #3
 800090e:	d424      	bmi.n	800095a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000910:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	69e3      	ldr	r3, [r4, #28]
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000918:	61e3      	str	r3, [r4, #28]
 800091a:	69e3      	ldr	r3, [r4, #28]
 800091c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000924:	4e30      	ldr	r6, [pc, #192]	; (80009e8 <HAL_RCC_OscConfig+0x280>)
 8000926:	6833      	ldr	r3, [r6, #0]
 8000928:	05d9      	lsls	r1, r3, #23
 800092a:	d518      	bpl.n	800095e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800092c:	68eb      	ldr	r3, [r5, #12]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d126      	bne.n	8000980 <HAL_RCC_OscConfig+0x218>
 8000932:	6a23      	ldr	r3, [r4, #32]
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800093a:	f7ff fc51 	bl	80001e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800093e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000942:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000944:	6a23      	ldr	r3, [r4, #32]
 8000946:	079b      	lsls	r3, r3, #30
 8000948:	d53f      	bpl.n	80009ca <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800094a:	2f00      	cmp	r7, #0
 800094c:	f43f af1d 	beq.w	800078a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000950:	69e3      	ldr	r3, [r4, #28]
 8000952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000956:	61e3      	str	r3, [r4, #28]
 8000958:	e717      	b.n	800078a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800095a:	2700      	movs	r7, #0
 800095c:	e7e2      	b.n	8000924 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800095e:	6833      	ldr	r3, [r6, #0]
 8000960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000964:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000966:	f7ff fc3b 	bl	80001e0 <HAL_GetTick>
 800096a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800096c:	6833      	ldr	r3, [r6, #0]
 800096e:	05da      	lsls	r2, r3, #23
 8000970:	d4dc      	bmi.n	800092c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000972:	f7ff fc35 	bl	80001e0 <HAL_GetTick>
 8000976:	eba0 0008 	sub.w	r0, r0, r8
 800097a:	2864      	cmp	r0, #100	; 0x64
 800097c:	d9f6      	bls.n	800096c <HAL_RCC_OscConfig+0x204>
 800097e:	e735      	b.n	80007ec <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000980:	b9ab      	cbnz	r3, 80009ae <HAL_RCC_OscConfig+0x246>
 8000982:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000984:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000988:	f023 0301 	bic.w	r3, r3, #1
 800098c:	6223      	str	r3, [r4, #32]
 800098e:	6a23      	ldr	r3, [r4, #32]
 8000990:	f023 0304 	bic.w	r3, r3, #4
 8000994:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000996:	f7ff fc23 	bl	80001e0 <HAL_GetTick>
 800099a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800099c:	6a23      	ldr	r3, [r4, #32]
 800099e:	0798      	lsls	r0, r3, #30
 80009a0:	d5d3      	bpl.n	800094a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009a2:	f7ff fc1d 	bl	80001e0 <HAL_GetTick>
 80009a6:	1b80      	subs	r0, r0, r6
 80009a8:	4540      	cmp	r0, r8
 80009aa:	d9f7      	bls.n	800099c <HAL_RCC_OscConfig+0x234>
 80009ac:	e71e      	b.n	80007ec <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009ae:	2b05      	cmp	r3, #5
 80009b0:	6a23      	ldr	r3, [r4, #32]
 80009b2:	d103      	bne.n	80009bc <HAL_RCC_OscConfig+0x254>
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6223      	str	r3, [r4, #32]
 80009ba:	e7ba      	b.n	8000932 <HAL_RCC_OscConfig+0x1ca>
 80009bc:	f023 0301 	bic.w	r3, r3, #1
 80009c0:	6223      	str	r3, [r4, #32]
 80009c2:	6a23      	ldr	r3, [r4, #32]
 80009c4:	f023 0304 	bic.w	r3, r3, #4
 80009c8:	e7b6      	b.n	8000938 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009ca:	f7ff fc09 	bl	80001e0 <HAL_GetTick>
 80009ce:	eba0 0008 	sub.w	r0, r0, r8
 80009d2:	42b0      	cmp	r0, r6
 80009d4:	d9b6      	bls.n	8000944 <HAL_RCC_OscConfig+0x1dc>
 80009d6:	e709      	b.n	80007ec <HAL_RCC_OscConfig+0x84>
 80009d8:	40021000 	.word	0x40021000
 80009dc:	42420000 	.word	0x42420000
 80009e0:	42420480 	.word	0x42420480
 80009e4:	20000008 	.word	0x20000008
 80009e8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009ec:	4c22      	ldr	r4, [pc, #136]	; (8000a78 <HAL_RCC_OscConfig+0x310>)
 80009ee:	6863      	ldr	r3, [r4, #4]
 80009f0:	f003 030c 	and.w	r3, r3, #12
 80009f4:	2b08      	cmp	r3, #8
 80009f6:	f43f aee2 	beq.w	80007be <HAL_RCC_OscConfig+0x56>
 80009fa:	2300      	movs	r3, #0
 80009fc:	4e1f      	ldr	r6, [pc, #124]	; (8000a7c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009fe:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000a00:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a02:	d12b      	bne.n	8000a5c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000a04:	f7ff fbec 	bl	80001e0 <HAL_GetTick>
 8000a08:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a0a:	6823      	ldr	r3, [r4, #0]
 8000a0c:	0199      	lsls	r1, r3, #6
 8000a0e:	d41f      	bmi.n	8000a50 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000a10:	6a2b      	ldr	r3, [r5, #32]
 8000a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a16:	d105      	bne.n	8000a24 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a18:	6862      	ldr	r2, [r4, #4]
 8000a1a:	68a9      	ldr	r1, [r5, #8]
 8000a1c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000a20:	430a      	orrs	r2, r1
 8000a22:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a24:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000a26:	6862      	ldr	r2, [r4, #4]
 8000a28:	430b      	orrs	r3, r1
 8000a2a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a32:	2301      	movs	r3, #1
 8000a34:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000a36:	f7ff fbd3 	bl	80001e0 <HAL_GetTick>
 8000a3a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a3c:	6823      	ldr	r3, [r4, #0]
 8000a3e:	019a      	lsls	r2, r3, #6
 8000a40:	f53f aea7 	bmi.w	8000792 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a44:	f7ff fbcc 	bl	80001e0 <HAL_GetTick>
 8000a48:	1b40      	subs	r0, r0, r5
 8000a4a:	2802      	cmp	r0, #2
 8000a4c:	d9f6      	bls.n	8000a3c <HAL_RCC_OscConfig+0x2d4>
 8000a4e:	e6cd      	b.n	80007ec <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a50:	f7ff fbc6 	bl	80001e0 <HAL_GetTick>
 8000a54:	1bc0      	subs	r0, r0, r7
 8000a56:	2802      	cmp	r0, #2
 8000a58:	d9d7      	bls.n	8000a0a <HAL_RCC_OscConfig+0x2a2>
 8000a5a:	e6c7      	b.n	80007ec <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000a5c:	f7ff fbc0 	bl	80001e0 <HAL_GetTick>
 8000a60:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a62:	6823      	ldr	r3, [r4, #0]
 8000a64:	019b      	lsls	r3, r3, #6
 8000a66:	f57f ae94 	bpl.w	8000792 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a6a:	f7ff fbb9 	bl	80001e0 <HAL_GetTick>
 8000a6e:	1b40      	subs	r0, r0, r5
 8000a70:	2802      	cmp	r0, #2
 8000a72:	d9f6      	bls.n	8000a62 <HAL_RCC_OscConfig+0x2fa>
 8000a74:	e6ba      	b.n	80007ec <HAL_RCC_OscConfig+0x84>
 8000a76:	bf00      	nop
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	42420060 	.word	0x42420060

08000a80 <HAL_RCC_GetSysClockFreq>:
{
 8000a80:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000a84:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a86:	ac02      	add	r4, sp, #8
 8000a88:	f103 0510 	add.w	r5, r3, #16
 8000a8c:	4622      	mov	r2, r4
 8000a8e:	6818      	ldr	r0, [r3, #0]
 8000a90:	6859      	ldr	r1, [r3, #4]
 8000a92:	3308      	adds	r3, #8
 8000a94:	c203      	stmia	r2!, {r0, r1}
 8000a96:	42ab      	cmp	r3, r5
 8000a98:	4614      	mov	r4, r2
 8000a9a:	d1f7      	bne.n	8000a8c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	f88d 3004 	strb.w	r3, [sp, #4]
 8000aa2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000aa4:	4911      	ldr	r1, [pc, #68]	; (8000aec <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000aa6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000aaa:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000aac:	f003 020c 	and.w	r2, r3, #12
 8000ab0:	2a08      	cmp	r2, #8
 8000ab2:	d117      	bne.n	8000ae4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ab4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000ab8:	a806      	add	r0, sp, #24
 8000aba:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000abc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000abe:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ac2:	d50c      	bpl.n	8000ade <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ac4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ac6:	480a      	ldr	r0, [pc, #40]	; (8000af0 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ac8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000acc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ace:	aa06      	add	r2, sp, #24
 8000ad0:	4413      	add	r3, r2
 8000ad2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ad6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000ada:	b007      	add	sp, #28
 8000adc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <HAL_RCC_GetSysClockFreq+0x74>)
 8000ae0:	4350      	muls	r0, r2
 8000ae2:	e7fa      	b.n	8000ada <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000ae6:	e7f8      	b.n	8000ada <HAL_RCC_GetSysClockFreq+0x5a>
 8000ae8:	08001bd0 	.word	0x08001bd0
 8000aec:	40021000 	.word	0x40021000
 8000af0:	007a1200 	.word	0x007a1200
 8000af4:	003d0900 	.word	0x003d0900

08000af8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000af8:	4a4d      	ldr	r2, [pc, #308]	; (8000c30 <HAL_RCC_ClockConfig+0x138>)
{
 8000afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000afe:	6813      	ldr	r3, [r2, #0]
{
 8000b00:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	428b      	cmp	r3, r1
{
 8000b08:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b0a:	d328      	bcc.n	8000b5e <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b0c:	682a      	ldr	r2, [r5, #0]
 8000b0e:	0791      	lsls	r1, r2, #30
 8000b10:	d432      	bmi.n	8000b78 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b12:	07d2      	lsls	r2, r2, #31
 8000b14:	d438      	bmi.n	8000b88 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b16:	4a46      	ldr	r2, [pc, #280]	; (8000c30 <HAL_RCC_ClockConfig+0x138>)
 8000b18:	6813      	ldr	r3, [r2, #0]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	429e      	cmp	r6, r3
 8000b20:	d373      	bcc.n	8000c0a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b22:	682a      	ldr	r2, [r5, #0]
 8000b24:	4c43      	ldr	r4, [pc, #268]	; (8000c34 <HAL_RCC_ClockConfig+0x13c>)
 8000b26:	f012 0f04 	tst.w	r2, #4
 8000b2a:	d179      	bne.n	8000c20 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b2c:	0713      	lsls	r3, r2, #28
 8000b2e:	d506      	bpl.n	8000b3e <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000b30:	6863      	ldr	r3, [r4, #4]
 8000b32:	692a      	ldr	r2, [r5, #16]
 8000b34:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b38:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b3c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b3e:	f7ff ff9f 	bl	8000a80 <HAL_RCC_GetSysClockFreq>
 8000b42:	6863      	ldr	r3, [r4, #4]
 8000b44:	4a3c      	ldr	r2, [pc, #240]	; (8000c38 <HAL_RCC_ClockConfig+0x140>)
 8000b46:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b4a:	5cd3      	ldrb	r3, [r2, r3]
 8000b4c:	40d8      	lsrs	r0, r3
 8000b4e:	4b3b      	ldr	r3, [pc, #236]	; (8000c3c <HAL_RCC_ClockConfig+0x144>)
 8000b50:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f7ff fb02 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 8000b58:	2000      	movs	r0, #0
}
 8000b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b5e:	6813      	ldr	r3, [r2, #0]
 8000b60:	f023 0307 	bic.w	r3, r3, #7
 8000b64:	430b      	orrs	r3, r1
 8000b66:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b68:	6813      	ldr	r3, [r2, #0]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	d0cc      	beq.n	8000b0c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000b72:	2001      	movs	r0, #1
 8000b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b78:	492e      	ldr	r1, [pc, #184]	; (8000c34 <HAL_RCC_ClockConfig+0x13c>)
 8000b7a:	68a8      	ldr	r0, [r5, #8]
 8000b7c:	684b      	ldr	r3, [r1, #4]
 8000b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b82:	4303      	orrs	r3, r0
 8000b84:	604b      	str	r3, [r1, #4]
 8000b86:	e7c4      	b.n	8000b12 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b88:	686a      	ldr	r2, [r5, #4]
 8000b8a:	4c2a      	ldr	r4, [pc, #168]	; (8000c34 <HAL_RCC_ClockConfig+0x13c>)
 8000b8c:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b8e:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b90:	d11c      	bne.n	8000bcc <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b92:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b96:	d0ec      	beq.n	8000b72 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b98:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b9a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b9e:	f023 0303 	bic.w	r3, r3, #3
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000ba6:	f7ff fb1b 	bl	80001e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000baa:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000bac:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d114      	bne.n	8000bdc <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bb2:	6863      	ldr	r3, [r4, #4]
 8000bb4:	f003 030c 	and.w	r3, r3, #12
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	d0ac      	beq.n	8000b16 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bbc:	f7ff fb10 	bl	80001e0 <HAL_GetTick>
 8000bc0:	1bc0      	subs	r0, r0, r7
 8000bc2:	4540      	cmp	r0, r8
 8000bc4:	d9f5      	bls.n	8000bb2 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8000bc6:	2003      	movs	r0, #3
 8000bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bcc:	2a02      	cmp	r2, #2
 8000bce:	d102      	bne.n	8000bd6 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bd0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000bd4:	e7df      	b.n	8000b96 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bd6:	f013 0f02 	tst.w	r3, #2
 8000bda:	e7dc      	b.n	8000b96 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d10f      	bne.n	8000c00 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000be0:	6863      	ldr	r3, [r4, #4]
 8000be2:	f003 030c 	and.w	r3, r3, #12
 8000be6:	2b08      	cmp	r3, #8
 8000be8:	d095      	beq.n	8000b16 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bea:	f7ff faf9 	bl	80001e0 <HAL_GetTick>
 8000bee:	1bc0      	subs	r0, r0, r7
 8000bf0:	4540      	cmp	r0, r8
 8000bf2:	d9f5      	bls.n	8000be0 <HAL_RCC_ClockConfig+0xe8>
 8000bf4:	e7e7      	b.n	8000bc6 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bf6:	f7ff faf3 	bl	80001e0 <HAL_GetTick>
 8000bfa:	1bc0      	subs	r0, r0, r7
 8000bfc:	4540      	cmp	r0, r8
 8000bfe:	d8e2      	bhi.n	8000bc6 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c00:	6863      	ldr	r3, [r4, #4]
 8000c02:	f013 0f0c 	tst.w	r3, #12
 8000c06:	d1f6      	bne.n	8000bf6 <HAL_RCC_ClockConfig+0xfe>
 8000c08:	e785      	b.n	8000b16 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c0a:	6813      	ldr	r3, [r2, #0]
 8000c0c:	f023 0307 	bic.w	r3, r3, #7
 8000c10:	4333      	orrs	r3, r6
 8000c12:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c14:	6813      	ldr	r3, [r2, #0]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	429e      	cmp	r6, r3
 8000c1c:	d1a9      	bne.n	8000b72 <HAL_RCC_ClockConfig+0x7a>
 8000c1e:	e780      	b.n	8000b22 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c20:	6863      	ldr	r3, [r4, #4]
 8000c22:	68e9      	ldr	r1, [r5, #12]
 8000c24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c28:	430b      	orrs	r3, r1
 8000c2a:	6063      	str	r3, [r4, #4]
 8000c2c:	e77e      	b.n	8000b2c <HAL_RCC_ClockConfig+0x34>
 8000c2e:	bf00      	nop
 8000c30:	40022000 	.word	0x40022000
 8000c34:	40021000 	.word	0x40021000
 8000c38:	08001bfe 	.word	0x08001bfe
 8000c3c:	20000008 	.word	0x20000008

08000c40 <HAL_RCC_GetHCLKFreq>:
}
 8000c40:	4b01      	ldr	r3, [pc, #4]	; (8000c48 <HAL_RCC_GetHCLKFreq+0x8>)
 8000c42:	6818      	ldr	r0, [r3, #0]
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000008 	.word	0x20000008

08000c4c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000c56:	5cd3      	ldrb	r3, [r2, r3]
 8000c58:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000c5a:	6810      	ldr	r0, [r2, #0]
}    
 8000c5c:	40d8      	lsrs	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	40021000 	.word	0x40021000
 8000c64:	08001c0e 	.word	0x08001c0e
 8000c68:	20000008 	.word	0x20000008

08000c6c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000c76:	5cd3      	ldrb	r3, [r2, r3]
 8000c78:	4a03      	ldr	r2, [pc, #12]	; (8000c88 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000c7a:	6810      	ldr	r0, [r2, #0]
} 
 8000c7c:	40d8      	lsrs	r0, r3
 8000c7e:	4770      	bx	lr
 8000c80:	40021000 	.word	0x40021000
 8000c84:	08001c0e 	.word	0x08001c0e
 8000c88:	20000008 	.word	0x20000008

08000c8c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000c90:	6805      	ldr	r5, [r0, #0]
 8000c92:	68c2      	ldr	r2, [r0, #12]
 8000c94:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000c96:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000c98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ca0:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000ca2:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ca4:	430b      	orrs	r3, r1
 8000ca6:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000ca8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000cac:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000cb0:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000cb6:	696b      	ldr	r3, [r5, #20]
 8000cb8:	6982      	ldr	r2, [r0, #24]
 8000cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000cc2:	4b40      	ldr	r3, [pc, #256]	; (8000dc4 <UART_SetConfig+0x138>)
{
 8000cc4:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000cc6:	429d      	cmp	r5, r3
 8000cc8:	f04f 0419 	mov.w	r4, #25
 8000ccc:	d146      	bne.n	8000d5c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000cce:	f7ff ffcd 	bl	8000c6c <HAL_RCC_GetPCLK2Freq>
 8000cd2:	fb04 f300 	mul.w	r3, r4, r0
 8000cd6:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000cda:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000cde:	00b6      	lsls	r6, r6, #2
 8000ce0:	fbb3 f3f6 	udiv	r3, r3, r6
 8000ce4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ce8:	011e      	lsls	r6, r3, #4
 8000cea:	f7ff ffbf 	bl	8000c6c <HAL_RCC_GetPCLK2Freq>
 8000cee:	4360      	muls	r0, r4
 8000cf0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	fbb0 f7f3 	udiv	r7, r0, r3
 8000cfa:	f7ff ffb7 	bl	8000c6c <HAL_RCC_GetPCLK2Freq>
 8000cfe:	4360      	muls	r0, r4
 8000d00:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d0a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d0e:	fb08 7313 	mls	r3, r8, r3, r7
 8000d12:	011b      	lsls	r3, r3, #4
 8000d14:	3332      	adds	r3, #50	; 0x32
 8000d16:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d1a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000d1e:	f7ff ffa5 	bl	8000c6c <HAL_RCC_GetPCLK2Freq>
 8000d22:	4360      	muls	r0, r4
 8000d24:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000d28:	0092      	lsls	r2, r2, #2
 8000d2a:	fbb0 faf2 	udiv	sl, r0, r2
 8000d2e:	f7ff ff9d 	bl	8000c6c <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000d32:	4360      	muls	r0, r4
 8000d34:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d3e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d42:	fb08 a313 	mls	r3, r8, r3, sl
 8000d46:	011b      	lsls	r3, r3, #4
 8000d48:	3332      	adds	r3, #50	; 0x32
 8000d4a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	433b      	orrs	r3, r7
 8000d54:	4433      	add	r3, r6
 8000d56:	60ab      	str	r3, [r5, #8]
 8000d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5c:	f7ff ff76 	bl	8000c4c <HAL_RCC_GetPCLK1Freq>
 8000d60:	fb04 f300 	mul.w	r3, r4, r0
 8000d64:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000d68:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000d6c:	00b6      	lsls	r6, r6, #2
 8000d6e:	fbb3 f3f6 	udiv	r3, r3, r6
 8000d72:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d76:	011e      	lsls	r6, r3, #4
 8000d78:	f7ff ff68 	bl	8000c4c <HAL_RCC_GetPCLK1Freq>
 8000d7c:	4360      	muls	r0, r4
 8000d7e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	fbb0 f7f3 	udiv	r7, r0, r3
 8000d88:	f7ff ff60 	bl	8000c4c <HAL_RCC_GetPCLK1Freq>
 8000d8c:	4360      	muls	r0, r4
 8000d8e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d98:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d9c:	fb08 7313 	mls	r3, r8, r3, r7
 8000da0:	011b      	lsls	r3, r3, #4
 8000da2:	3332      	adds	r3, #50	; 0x32
 8000da4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000da8:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000dac:	f7ff ff4e 	bl	8000c4c <HAL_RCC_GetPCLK1Freq>
 8000db0:	4360      	muls	r0, r4
 8000db2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000db6:	0092      	lsls	r2, r2, #2
 8000db8:	fbb0 faf2 	udiv	sl, r0, r2
 8000dbc:	f7ff ff46 	bl	8000c4c <HAL_RCC_GetPCLK1Freq>
 8000dc0:	e7b7      	b.n	8000d32 <UART_SetConfig+0xa6>
 8000dc2:	bf00      	nop
 8000dc4:	40013800 	.word	0x40013800

08000dc8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dca:	4604      	mov	r4, r0
 8000dcc:	460e      	mov	r6, r1
 8000dce:	4617      	mov	r7, r2
 8000dd0:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000dd2:	6821      	ldr	r1, [r4, #0]
 8000dd4:	680b      	ldr	r3, [r1, #0]
 8000dd6:	ea36 0303 	bics.w	r3, r6, r3
 8000dda:	d101      	bne.n	8000de0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000ddc:	2000      	movs	r0, #0
}
 8000dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000de0:	1c6b      	adds	r3, r5, #1
 8000de2:	d0f7      	beq.n	8000dd4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000de4:	b995      	cbnz	r5, 8000e0c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000de6:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000de8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000df0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000df2:	695a      	ldr	r2, [r3, #20]
 8000df4:	f022 0201 	bic.w	r2, r2, #1
 8000df8:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000dfa:	2320      	movs	r3, #32
 8000dfc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000e00:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000e04:	2300      	movs	r3, #0
 8000e06:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000e0c:	f7ff f9e8 	bl	80001e0 <HAL_GetTick>
 8000e10:	1bc0      	subs	r0, r0, r7
 8000e12:	4285      	cmp	r5, r0
 8000e14:	d2dd      	bcs.n	8000dd2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000e16:	e7e6      	b.n	8000de6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000e18 <HAL_UART_Init>:
{
 8000e18:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	b340      	cbz	r0, 8000e70 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000e1e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000e22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e26:	b91b      	cbnz	r3, 8000e30 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000e28:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000e2c:	f000 f9ce 	bl	80011cc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000e30:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000e32:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000e34:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000e38:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000e3a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000e3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e40:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000e42:	f7ff ff23 	bl	8000c8c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e46:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e48:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e4a:	691a      	ldr	r2, [r3, #16]
 8000e4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000e52:	695a      	ldr	r2, [r3, #20]
 8000e54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000e58:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e60:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000e62:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e64:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000e66:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000e6a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000e6e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e70:	2001      	movs	r0, #1
}
 8000e72:	bd10      	pop	{r4, pc}

08000e74 <HAL_UART_Transmit>:
{
 8000e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e78:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000e7a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000e7e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8000e80:	2b20      	cmp	r3, #32
{
 8000e82:	460d      	mov	r5, r1
 8000e84:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000e86:	d14e      	bne.n	8000f26 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8000e88:	2900      	cmp	r1, #0
 8000e8a:	d049      	beq.n	8000f20 <HAL_UART_Transmit+0xac>
 8000e8c:	2a00      	cmp	r2, #0
 8000e8e:	d047      	beq.n	8000f20 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000e90:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d046      	beq.n	8000f26 <HAL_UART_Transmit+0xb2>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000ea2:	2321      	movs	r3, #33	; 0x21
 8000ea4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000ea8:	f7ff f99a 	bl	80001e0 <HAL_GetTick>
 8000eac:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000eae:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000eb2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000eb6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	b96b      	cbnz	r3, 8000ed8 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	4632      	mov	r2, r6
 8000ec0:	2140      	movs	r1, #64	; 0x40
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f7ff ff80 	bl	8000dc8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000ec8:	b9a8      	cbnz	r0, 8000ef6 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000eca:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000ecc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000ed0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000ed8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000eda:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000edc:	3b01      	subs	r3, #1
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ee2:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ee4:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000eea:	4620      	mov	r0, r4
 8000eec:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000eee:	d10e      	bne.n	8000f0e <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ef0:	f7ff ff6a 	bl	8000dc8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000ef4:	b110      	cbz	r0, 8000efc <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000efc:	882b      	ldrh	r3, [r5, #0]
 8000efe:	6822      	ldr	r2, [r4, #0]
 8000f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f04:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000f06:	6923      	ldr	r3, [r4, #16]
 8000f08:	b943      	cbnz	r3, 8000f1c <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8000f0a:	3502      	adds	r5, #2
 8000f0c:	e7d3      	b.n	8000eb6 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f0e:	f7ff ff5b 	bl	8000dc8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000f12:	2800      	cmp	r0, #0
 8000f14:	d1ef      	bne.n	8000ef6 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	782a      	ldrb	r2, [r5, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	3501      	adds	r5, #1
 8000f1e:	e7ca      	b.n	8000eb6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000f20:	2001      	movs	r0, #1
 8000f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000f26:	2002      	movs	r0, #2
}
 8000f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000f2c <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8000f30:	b510      	push	{r4, lr}
 8000f32:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f34:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f36:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f38:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f3c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f3e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f42:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f44:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f46:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f48:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4a:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f4c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4e:	f7ff fc0b 	bl	8000768 <HAL_RCC_OscConfig>
 8000f52:	b100      	cbz	r0, 8000f56 <SystemClock_Config+0x2a>
 8000f54:	e7fe      	b.n	8000f54 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f56:	230f      	movs	r3, #15
 8000f58:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f60:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f62:	4621      	mov	r1, r4
 8000f64:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f66:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f68:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f6a:	f7ff fdc5 	bl	8000af8 <HAL_RCC_ClockConfig>
 8000f6e:	4604      	mov	r4, r0
 8000f70:	b100      	cbz	r0, 8000f74 <SystemClock_Config+0x48>
 8000f72:	e7fe      	b.n	8000f72 <SystemClock_Config+0x46>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000f74:	f7ff fe64 	bl	8000c40 <HAL_RCC_GetHCLKFreq>
 8000f78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f80:	f7ff f98c 	bl	800029c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000f84:	2004      	movs	r0, #4
 8000f86:	f7ff f99f 	bl	80002c8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f8a:	4622      	mov	r2, r4
 8000f8c:	4621      	mov	r1, r4
 8000f8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f92:	f7ff f94f 	bl	8000234 <HAL_NVIC_SetPriority>
}
 8000f96:	b010      	add	sp, #64	; 0x40
 8000f98:	bd10      	pop	{r4, pc}
	...

08000f9c <main>:
{
 8000f9c:	b580      	push	{r7, lr}
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8000f9e:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
{
 8000fa2:	b09a      	sub	sp, #104	; 0x68
  HAL_Init();
 8000fa4:	f7ff f8fe 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8000fa8:	f7ff ffc0 	bl	8000f2c <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fac:	4b44      	ldr	r3, [pc, #272]	; (80010c0 <main+0x124>)
  huart1.Instance = USART1;
 8000fae:	4d45      	ldr	r5, [pc, #276]	; (80010c4 <main+0x128>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb0:	699a      	ldr	r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fb2:	4628      	mov	r0, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb4:	f042 0220 	orr.w	r2, r2, #32
 8000fb8:	619a      	str	r2, [r3, #24]
 8000fba:	699a      	ldr	r2, [r3, #24]
 8000fbc:	f002 0220 	and.w	r2, r2, #32
 8000fc0:	9201      	str	r2, [sp, #4]
 8000fc2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	699a      	ldr	r2, [r3, #24]
 8000fc6:	f042 0204 	orr.w	r2, r2, #4
 8000fca:	619a      	str	r2, [r3, #24]
 8000fcc:	699a      	ldr	r2, [r3, #24]
 8000fce:	f002 0204 	and.w	r2, r2, #4
 8000fd2:	9202      	str	r2, [sp, #8]
 8000fd4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	699a      	ldr	r2, [r3, #24]
 8000fd8:	f042 0208 	orr.w	r2, r2, #8
 8000fdc:	619a      	str	r2, [r3, #24]
 8000fde:	699b      	ldr	r3, [r3, #24]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fe0:	220c      	movs	r2, #12
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	9303      	str	r3, [sp, #12]
 8000fe8:	9b03      	ldr	r3, [sp, #12]
  huart1.Init.BaudRate = 115200;
 8000fea:	4b37      	ldr	r3, [pc, #220]	; (80010c8 <main+0x12c>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fec:	616a      	str	r2, [r5, #20]
  huart1.Init.BaudRate = 115200;
 8000fee:	e885 0018 	stmia.w	r5, {r3, r4}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60ab      	str	r3, [r5, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ff6:	60eb      	str	r3, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ff8:	612b      	str	r3, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	61ab      	str	r3, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	61eb      	str	r3, [r5, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ffe:	f7ff ff0b 	bl	8000e18 <HAL_UART_Init>
 8001002:	b100      	cbz	r0, 8001006 <main+0x6a>
 8001004:	e7fe      	b.n	8001004 <main+0x68>
  hi2c1.Instance = I2C1;
 8001006:	4c31      	ldr	r4, [pc, #196]	; (80010cc <main+0x130>)
  hi2c1.Init.ClockSpeed = 100000;
 8001008:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <main+0x134>)
 800100a:	4a32      	ldr	r2, [pc, #200]	; (80010d4 <main+0x138>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800100c:	60a0      	str	r0, [r4, #8]
  hi2c1.Init.ClockSpeed = 100000;
 800100e:	e884 000c 	stmia.w	r4, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001012:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8001016:	60e0      	str	r0, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001018:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800101a:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800101c:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800101e:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001020:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001022:	6123      	str	r3, [r4, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001024:	f7ff fa70 	bl	8000508 <HAL_I2C_Init>
 8001028:	b100      	cbz	r0, 800102c <main+0x90>
 800102a:	e7fe      	b.n	800102a <main+0x8e>
	  HAL_Delay(1000);
 800102c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001030:	f7ff f8dc 	bl	80001ec <HAL_Delay>
      char info[] = "Scanning I2C bus...\n";
 8001034:	aa04      	add	r2, sp, #16
 8001036:	4617      	mov	r7, r2
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <main+0x13c>)
 800103a:	f103 0e10 	add.w	lr, r3, #16
 800103e:	4616      	mov	r6, r2
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	6859      	ldr	r1, [r3, #4]
 8001044:	3308      	adds	r3, #8
 8001046:	c603      	stmia	r6!, {r0, r1}
 8001048:	4573      	cmp	r3, lr
 800104a:	4632      	mov	r2, r6
 800104c:	d1f7      	bne.n	800103e <main+0xa2>
 800104e:	6818      	ldr	r0, [r3, #0]
 8001050:	791b      	ldrb	r3, [r3, #4]
 8001052:	6030      	str	r0, [r6, #0]
 8001054:	7133      	strb	r3, [r6, #4]
      HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8001056:	4638      	mov	r0, r7
 8001058:	f7ff f878 	bl	800014c <strlen>
 800105c:	4639      	mov	r1, r7
 800105e:	b282      	uxth	r2, r0
 8001060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001064:	4628      	mov	r0, r5
 8001066:	f7ff ff05 	bl	8000e74 <HAL_UART_Transmit>
 800106a:	2600      	movs	r6, #0
          else HAL_UART_Transmit(&huart1, (uint8_t*)".", 1, HAL_MAX_DELAY);
 800106c:	4f1b      	ldr	r7, [pc, #108]	; (80010dc <main+0x140>)
          if(HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10) == HAL_OK)
 800106e:	0071      	lsls	r1, r6, #1
 8001070:	b289      	uxth	r1, r1
 8001072:	230a      	movs	r3, #10
 8001074:	2201      	movs	r2, #1
 8001076:	4620      	mov	r0, r4
 8001078:	f7ff fac6 	bl	8000608 <HAL_I2C_IsDeviceReady>
 800107c:	b9d0      	cbnz	r0, 80010b4 <main+0x118>
              snprintf(msg, sizeof(msg), "0x%02X", i);
 800107e:	4633      	mov	r3, r6
 8001080:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <main+0x144>)
 8001082:	2140      	movs	r1, #64	; 0x40
 8001084:	a80a      	add	r0, sp, #40	; 0x28
 8001086:	f000 f94d 	bl	8001324 <sniprintf>
              HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800108a:	a80a      	add	r0, sp, #40	; 0x28
 800108c:	f7ff f85e 	bl	800014c <strlen>
 8001090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001094:	b282      	uxth	r2, r0
 8001096:	a90a      	add	r1, sp, #40	; 0x28
          else HAL_UART_Transmit(&huart1, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8001098:	4628      	mov	r0, r5
 800109a:	3601      	adds	r6, #1
 800109c:	f7ff feea 	bl	8000e74 <HAL_UART_Transmit>
      for(uint16_t i = 0; i < 128; i++)
 80010a0:	2e80      	cmp	r6, #128	; 0x80
 80010a2:	d1e4      	bne.n	800106e <main+0xd2>
      HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, HAL_MAX_DELAY);
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010a8:	2201      	movs	r2, #1
 80010aa:	490e      	ldr	r1, [pc, #56]	; (80010e4 <main+0x148>)
 80010ac:	4628      	mov	r0, r5
 80010ae:	f7ff fee1 	bl	8000e74 <HAL_UART_Transmit>
 80010b2:	e7bb      	b.n	800102c <main+0x90>
          else HAL_UART_Transmit(&huart1, (uint8_t*)".", 1, HAL_MAX_DELAY);
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010b8:	2201      	movs	r2, #1
 80010ba:	4639      	mov	r1, r7
 80010bc:	e7ec      	b.n	8001098 <main+0xfc>
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000
 80010c4:	200000f0 	.word	0x200000f0
 80010c8:	40013800 	.word	0x40013800
 80010cc:	2000009c 	.word	0x2000009c
 80010d0:	000186a0 	.word	0x000186a0
 80010d4:	40005400 	.word	0x40005400
 80010d8:	08001be9 	.word	0x08001be9
 80010dc:	08001be7 	.word	0x08001be7
 80010e0:	08001be0 	.word	0x08001be0
 80010e4:	08001bfc 	.word	0x08001bfc

080010e8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010e8:	4b25      	ldr	r3, [pc, #148]	; (8001180 <HAL_MspInit+0x98>)
{
 80010ea:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ec:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ee:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80010f0:	f042 0201 	orr.w	r2, r2, #1
 80010f4:	619a      	str	r2, [r3, #24]
 80010f6:	699a      	ldr	r2, [r3, #24]
 80010f8:	f002 0201 	and.w	r2, r2, #1
 80010fc:	9200      	str	r2, [sp, #0]
 80010fe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001100:	69da      	ldr	r2, [r3, #28]
 8001102:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001106:	61da      	str	r2, [r3, #28]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001112:	f7ff f87d 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	f06f 000b 	mvn.w	r0, #11
 800111c:	4611      	mov	r1, r2
 800111e:	f7ff f889 	bl	8000234 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	f06f 000a 	mvn.w	r0, #10
 8001128:	4611      	mov	r1, r2
 800112a:	f7ff f883 	bl	8000234 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	f06f 0009 	mvn.w	r0, #9
 8001134:	4611      	mov	r1, r2
 8001136:	f7ff f87d 	bl	8000234 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	f06f 0004 	mvn.w	r0, #4
 8001140:	4611      	mov	r1, r2
 8001142:	f7ff f877 	bl	8000234 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	f06f 0003 	mvn.w	r0, #3
 800114c:	4611      	mov	r1, r2
 800114e:	f7ff f871 	bl	8000234 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	f06f 0001 	mvn.w	r0, #1
 8001158:	4611      	mov	r1, r2
 800115a:	f7ff f86b 	bl	8000234 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001164:	4611      	mov	r1, r2
 8001166:	f7ff f865 	bl	8000234 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800116a:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_MspInit+0x9c>)
 800116c:	6853      	ldr	r3, [r2, #4]
 800116e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001172:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001176:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001178:	b003      	add	sp, #12
 800117a:	f85d fb04 	ldr.w	pc, [sp], #4
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	40010000 	.word	0x40010000

08001188 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001188:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800118a:	6802      	ldr	r2, [r0, #0]
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_I2C_MspInit+0x38>)
 800118e:	429a      	cmp	r2, r3
 8001190:	d113      	bne.n	80011ba <HAL_I2C_MspInit+0x32>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001192:	23c0      	movs	r3, #192	; 0xc0
 8001194:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001196:	2312      	movs	r3, #18
 8001198:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800119a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	a902      	add	r1, sp, #8
 800119e:	4809      	ldr	r0, [pc, #36]	; (80011c4 <HAL_I2C_MspInit+0x3c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a2:	f7ff f8a3 	bl	80002ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <HAL_I2C_MspInit+0x40>)
 80011a8:	69da      	ldr	r2, [r3, #28]
 80011aa:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80011ae:	61da      	str	r2, [r3, #28]
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011ba:	b007      	add	sp, #28
 80011bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80011c0:	40005400 	.word	0x40005400
 80011c4:	40010c00 	.word	0x40010c00
 80011c8:	40021000 	.word	0x40021000

080011cc <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80011ce:	6802      	ldr	r2, [r0, #0]
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_UART_MspInit+0x50>)
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d11f      	bne.n	8001216 <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011d6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80011da:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80011de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011e2:	619a      	str	r2, [r3, #24]
 80011e4:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	480e      	ldr	r0, [pc, #56]	; (8001220 <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80011e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f7ff f875 	bl	80002ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001206:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001208:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	a902      	add	r1, sp, #8
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f7ff f86b 	bl	80002ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001216:	b007      	add	sp, #28
 8001218:	f85d fb04 	ldr.w	pc, [sp], #4
 800121c:	40013800 	.word	0x40013800
 8001220:	40010800 	.word	0x40010800

08001224 <NMI_Handler>:
 8001224:	4770      	bx	lr

08001226 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler>

08001228 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001228:	e7fe      	b.n	8001228 <MemManage_Handler>

0800122a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800122a:	e7fe      	b.n	800122a <BusFault_Handler>

0800122c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler>

0800122e <SVC_Handler>:
 800122e:	4770      	bx	lr

08001230 <DebugMon_Handler>:
 8001230:	4770      	bx	lr

08001232 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001232:	4770      	bx	lr

08001234 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001234:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001236:	f7fe ffc7 	bl	80001c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800123e:	f7ff b850 	b.w	80002e2 <HAL_SYSTICK_IRQHandler>
	...

08001244 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <SystemInit+0x40>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	f042 0201 	orr.w	r2, r2, #1
 800124c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800124e:	6859      	ldr	r1, [r3, #4]
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <SystemInit+0x44>)
 8001252:	400a      	ands	r2, r1
 8001254:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800125c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001260:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001268:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001270:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001272:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001276:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001278:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <SystemInit+0x48>)
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	f8ff0000 	.word	0xf8ff0000
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001290:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001292:	e003      	b.n	800129c <LoopCopyDataInit>

08001294 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001296:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001298:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800129a:	3104      	adds	r1, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800129c:	480a      	ldr	r0, [pc, #40]	; (80012c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012a4:	d3f6      	bcc.n	8001294 <CopyDataInit>
  ldr r2, =_sbss
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012a8:	e002      	b.n	80012b0 <LoopFillZerobss>

080012aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012ac:	f842 3b04 	str.w	r3, [r2], #4

080012b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012b4:	d3f9      	bcc.n	80012aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012b6:	f7ff ffc5 	bl	8001244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ba:	f000 f80f 	bl	80012dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012be:	f7ff fe6d 	bl	8000f9c <main>
  bx lr
 80012c2:	4770      	bx	lr
  ldr r3, =_sidata
 80012c4:	08001c54 	.word	0x08001c54
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012cc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80012d0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80012d4:	20000134 	.word	0x20000134

080012d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC1_2_IRQHandler>
	...

080012dc <__libc_init_array>:
 80012dc:	b570      	push	{r4, r5, r6, lr}
 80012de:	2500      	movs	r5, #0
 80012e0:	4e0c      	ldr	r6, [pc, #48]	; (8001314 <__libc_init_array+0x38>)
 80012e2:	4c0d      	ldr	r4, [pc, #52]	; (8001318 <__libc_init_array+0x3c>)
 80012e4:	1ba4      	subs	r4, r4, r6
 80012e6:	10a4      	asrs	r4, r4, #2
 80012e8:	42a5      	cmp	r5, r4
 80012ea:	d109      	bne.n	8001300 <__libc_init_array+0x24>
 80012ec:	f000 fc64 	bl	8001bb8 <_init>
 80012f0:	2500      	movs	r5, #0
 80012f2:	4e0a      	ldr	r6, [pc, #40]	; (800131c <__libc_init_array+0x40>)
 80012f4:	4c0a      	ldr	r4, [pc, #40]	; (8001320 <__libc_init_array+0x44>)
 80012f6:	1ba4      	subs	r4, r4, r6
 80012f8:	10a4      	asrs	r4, r4, #2
 80012fa:	42a5      	cmp	r5, r4
 80012fc:	d105      	bne.n	800130a <__libc_init_array+0x2e>
 80012fe:	bd70      	pop	{r4, r5, r6, pc}
 8001300:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001304:	4798      	blx	r3
 8001306:	3501      	adds	r5, #1
 8001308:	e7ee      	b.n	80012e8 <__libc_init_array+0xc>
 800130a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800130e:	4798      	blx	r3
 8001310:	3501      	adds	r5, #1
 8001312:	e7f2      	b.n	80012fa <__libc_init_array+0x1e>
 8001314:	08001c4c 	.word	0x08001c4c
 8001318:	08001c4c 	.word	0x08001c4c
 800131c:	08001c4c 	.word	0x08001c4c
 8001320:	08001c50 	.word	0x08001c50

08001324 <sniprintf>:
 8001324:	b40c      	push	{r2, r3}
 8001326:	b530      	push	{r4, r5, lr}
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <sniprintf+0x64>)
 800132a:	1e0c      	subs	r4, r1, #0
 800132c:	b09d      	sub	sp, #116	; 0x74
 800132e:	681d      	ldr	r5, [r3, #0]
 8001330:	da08      	bge.n	8001344 <sniprintf+0x20>
 8001332:	238b      	movs	r3, #139	; 0x8b
 8001334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001338:	602b      	str	r3, [r5, #0]
 800133a:	b01d      	add	sp, #116	; 0x74
 800133c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001340:	b002      	add	sp, #8
 8001342:	4770      	bx	lr
 8001344:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001348:	f8ad 3014 	strh.w	r3, [sp, #20]
 800134c:	bf0c      	ite	eq
 800134e:	4623      	moveq	r3, r4
 8001350:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8001354:	9304      	str	r3, [sp, #16]
 8001356:	9307      	str	r3, [sp, #28]
 8001358:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800135c:	9002      	str	r0, [sp, #8]
 800135e:	9006      	str	r0, [sp, #24]
 8001360:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001364:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001366:	ab21      	add	r3, sp, #132	; 0x84
 8001368:	a902      	add	r1, sp, #8
 800136a:	4628      	mov	r0, r5
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	f000 f869 	bl	8001444 <_svfiprintf_r>
 8001372:	1c43      	adds	r3, r0, #1
 8001374:	bfbc      	itt	lt
 8001376:	238b      	movlt	r3, #139	; 0x8b
 8001378:	602b      	strlt	r3, [r5, #0]
 800137a:	2c00      	cmp	r4, #0
 800137c:	d0dd      	beq.n	800133a <sniprintf+0x16>
 800137e:	2200      	movs	r2, #0
 8001380:	9b02      	ldr	r3, [sp, #8]
 8001382:	701a      	strb	r2, [r3, #0]
 8001384:	e7d9      	b.n	800133a <sniprintf+0x16>
 8001386:	bf00      	nop
 8001388:	2000000c 	.word	0x2000000c

0800138c <__ssputs_r>:
 800138c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001390:	688e      	ldr	r6, [r1, #8]
 8001392:	4682      	mov	sl, r0
 8001394:	429e      	cmp	r6, r3
 8001396:	460c      	mov	r4, r1
 8001398:	4691      	mov	r9, r2
 800139a:	4698      	mov	r8, r3
 800139c:	d835      	bhi.n	800140a <__ssputs_r+0x7e>
 800139e:	898a      	ldrh	r2, [r1, #12]
 80013a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80013a4:	d031      	beq.n	800140a <__ssputs_r+0x7e>
 80013a6:	2302      	movs	r3, #2
 80013a8:	6825      	ldr	r5, [r4, #0]
 80013aa:	6909      	ldr	r1, [r1, #16]
 80013ac:	1a6f      	subs	r7, r5, r1
 80013ae:	6965      	ldr	r5, [r4, #20]
 80013b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80013b4:	fb95 f5f3 	sdiv	r5, r5, r3
 80013b8:	f108 0301 	add.w	r3, r8, #1
 80013bc:	443b      	add	r3, r7
 80013be:	429d      	cmp	r5, r3
 80013c0:	bf38      	it	cc
 80013c2:	461d      	movcc	r5, r3
 80013c4:	0553      	lsls	r3, r2, #21
 80013c6:	d531      	bpl.n	800142c <__ssputs_r+0xa0>
 80013c8:	4629      	mov	r1, r5
 80013ca:	f000 fb47 	bl	8001a5c <_malloc_r>
 80013ce:	4606      	mov	r6, r0
 80013d0:	b950      	cbnz	r0, 80013e8 <__ssputs_r+0x5c>
 80013d2:	230c      	movs	r3, #12
 80013d4:	f8ca 3000 	str.w	r3, [sl]
 80013d8:	89a3      	ldrh	r3, [r4, #12]
 80013da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e2:	81a3      	strh	r3, [r4, #12]
 80013e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013e8:	463a      	mov	r2, r7
 80013ea:	6921      	ldr	r1, [r4, #16]
 80013ec:	f000 fac4 	bl	8001978 <memcpy>
 80013f0:	89a3      	ldrh	r3, [r4, #12]
 80013f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80013f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013fa:	81a3      	strh	r3, [r4, #12]
 80013fc:	6126      	str	r6, [r4, #16]
 80013fe:	443e      	add	r6, r7
 8001400:	6026      	str	r6, [r4, #0]
 8001402:	4646      	mov	r6, r8
 8001404:	6165      	str	r5, [r4, #20]
 8001406:	1bed      	subs	r5, r5, r7
 8001408:	60a5      	str	r5, [r4, #8]
 800140a:	4546      	cmp	r6, r8
 800140c:	bf28      	it	cs
 800140e:	4646      	movcs	r6, r8
 8001410:	4649      	mov	r1, r9
 8001412:	4632      	mov	r2, r6
 8001414:	6820      	ldr	r0, [r4, #0]
 8001416:	f000 faba 	bl	800198e <memmove>
 800141a:	68a3      	ldr	r3, [r4, #8]
 800141c:	2000      	movs	r0, #0
 800141e:	1b9b      	subs	r3, r3, r6
 8001420:	60a3      	str	r3, [r4, #8]
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	441e      	add	r6, r3
 8001426:	6026      	str	r6, [r4, #0]
 8001428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800142c:	462a      	mov	r2, r5
 800142e:	f000 fb73 	bl	8001b18 <_realloc_r>
 8001432:	4606      	mov	r6, r0
 8001434:	2800      	cmp	r0, #0
 8001436:	d1e1      	bne.n	80013fc <__ssputs_r+0x70>
 8001438:	6921      	ldr	r1, [r4, #16]
 800143a:	4650      	mov	r0, sl
 800143c:	f000 fac2 	bl	80019c4 <_free_r>
 8001440:	e7c7      	b.n	80013d2 <__ssputs_r+0x46>
	...

08001444 <_svfiprintf_r>:
 8001444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001448:	b09d      	sub	sp, #116	; 0x74
 800144a:	9303      	str	r3, [sp, #12]
 800144c:	898b      	ldrh	r3, [r1, #12]
 800144e:	4680      	mov	r8, r0
 8001450:	061c      	lsls	r4, r3, #24
 8001452:	460d      	mov	r5, r1
 8001454:	4616      	mov	r6, r2
 8001456:	d50f      	bpl.n	8001478 <_svfiprintf_r+0x34>
 8001458:	690b      	ldr	r3, [r1, #16]
 800145a:	b96b      	cbnz	r3, 8001478 <_svfiprintf_r+0x34>
 800145c:	2140      	movs	r1, #64	; 0x40
 800145e:	f000 fafd 	bl	8001a5c <_malloc_r>
 8001462:	6028      	str	r0, [r5, #0]
 8001464:	6128      	str	r0, [r5, #16]
 8001466:	b928      	cbnz	r0, 8001474 <_svfiprintf_r+0x30>
 8001468:	230c      	movs	r3, #12
 800146a:	f8c8 3000 	str.w	r3, [r8]
 800146e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001472:	e0c4      	b.n	80015fe <_svfiprintf_r+0x1ba>
 8001474:	2340      	movs	r3, #64	; 0x40
 8001476:	616b      	str	r3, [r5, #20]
 8001478:	2300      	movs	r3, #0
 800147a:	9309      	str	r3, [sp, #36]	; 0x24
 800147c:	2320      	movs	r3, #32
 800147e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001482:	2330      	movs	r3, #48	; 0x30
 8001484:	f04f 0b01 	mov.w	fp, #1
 8001488:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800148c:	4637      	mov	r7, r6
 800148e:	463c      	mov	r4, r7
 8001490:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001494:	2b00      	cmp	r3, #0
 8001496:	d13c      	bne.n	8001512 <_svfiprintf_r+0xce>
 8001498:	ebb7 0a06 	subs.w	sl, r7, r6
 800149c:	d00b      	beq.n	80014b6 <_svfiprintf_r+0x72>
 800149e:	4653      	mov	r3, sl
 80014a0:	4632      	mov	r2, r6
 80014a2:	4629      	mov	r1, r5
 80014a4:	4640      	mov	r0, r8
 80014a6:	f7ff ff71 	bl	800138c <__ssputs_r>
 80014aa:	3001      	adds	r0, #1
 80014ac:	f000 80a2 	beq.w	80015f4 <_svfiprintf_r+0x1b0>
 80014b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014b2:	4453      	add	r3, sl
 80014b4:	9309      	str	r3, [sp, #36]	; 0x24
 80014b6:	783b      	ldrb	r3, [r7, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 809b 	beq.w	80015f4 <_svfiprintf_r+0x1b0>
 80014be:	2300      	movs	r3, #0
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014c4:	9304      	str	r3, [sp, #16]
 80014c6:	9307      	str	r3, [sp, #28]
 80014c8:	9205      	str	r2, [sp, #20]
 80014ca:	9306      	str	r3, [sp, #24]
 80014cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80014d0:	931a      	str	r3, [sp, #104]	; 0x68
 80014d2:	2205      	movs	r2, #5
 80014d4:	7821      	ldrb	r1, [r4, #0]
 80014d6:	4850      	ldr	r0, [pc, #320]	; (8001618 <_svfiprintf_r+0x1d4>)
 80014d8:	f000 fa40 	bl	800195c <memchr>
 80014dc:	1c67      	adds	r7, r4, #1
 80014de:	9b04      	ldr	r3, [sp, #16]
 80014e0:	b9d8      	cbnz	r0, 800151a <_svfiprintf_r+0xd6>
 80014e2:	06d9      	lsls	r1, r3, #27
 80014e4:	bf44      	itt	mi
 80014e6:	2220      	movmi	r2, #32
 80014e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80014ec:	071a      	lsls	r2, r3, #28
 80014ee:	bf44      	itt	mi
 80014f0:	222b      	movmi	r2, #43	; 0x2b
 80014f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80014f6:	7822      	ldrb	r2, [r4, #0]
 80014f8:	2a2a      	cmp	r2, #42	; 0x2a
 80014fa:	d016      	beq.n	800152a <_svfiprintf_r+0xe6>
 80014fc:	2100      	movs	r1, #0
 80014fe:	200a      	movs	r0, #10
 8001500:	9a07      	ldr	r2, [sp, #28]
 8001502:	4627      	mov	r7, r4
 8001504:	783b      	ldrb	r3, [r7, #0]
 8001506:	3401      	adds	r4, #1
 8001508:	3b30      	subs	r3, #48	; 0x30
 800150a:	2b09      	cmp	r3, #9
 800150c:	d950      	bls.n	80015b0 <_svfiprintf_r+0x16c>
 800150e:	b1c9      	cbz	r1, 8001544 <_svfiprintf_r+0x100>
 8001510:	e011      	b.n	8001536 <_svfiprintf_r+0xf2>
 8001512:	2b25      	cmp	r3, #37	; 0x25
 8001514:	d0c0      	beq.n	8001498 <_svfiprintf_r+0x54>
 8001516:	4627      	mov	r7, r4
 8001518:	e7b9      	b.n	800148e <_svfiprintf_r+0x4a>
 800151a:	4a3f      	ldr	r2, [pc, #252]	; (8001618 <_svfiprintf_r+0x1d4>)
 800151c:	463c      	mov	r4, r7
 800151e:	1a80      	subs	r0, r0, r2
 8001520:	fa0b f000 	lsl.w	r0, fp, r0
 8001524:	4318      	orrs	r0, r3
 8001526:	9004      	str	r0, [sp, #16]
 8001528:	e7d3      	b.n	80014d2 <_svfiprintf_r+0x8e>
 800152a:	9a03      	ldr	r2, [sp, #12]
 800152c:	1d11      	adds	r1, r2, #4
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	9103      	str	r1, [sp, #12]
 8001532:	2a00      	cmp	r2, #0
 8001534:	db01      	blt.n	800153a <_svfiprintf_r+0xf6>
 8001536:	9207      	str	r2, [sp, #28]
 8001538:	e004      	b.n	8001544 <_svfiprintf_r+0x100>
 800153a:	4252      	negs	r2, r2
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	9207      	str	r2, [sp, #28]
 8001542:	9304      	str	r3, [sp, #16]
 8001544:	783b      	ldrb	r3, [r7, #0]
 8001546:	2b2e      	cmp	r3, #46	; 0x2e
 8001548:	d10d      	bne.n	8001566 <_svfiprintf_r+0x122>
 800154a:	787b      	ldrb	r3, [r7, #1]
 800154c:	1c79      	adds	r1, r7, #1
 800154e:	2b2a      	cmp	r3, #42	; 0x2a
 8001550:	d132      	bne.n	80015b8 <_svfiprintf_r+0x174>
 8001552:	9b03      	ldr	r3, [sp, #12]
 8001554:	3702      	adds	r7, #2
 8001556:	1d1a      	adds	r2, r3, #4
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	9203      	str	r2, [sp, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	bfb8      	it	lt
 8001560:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001564:	9305      	str	r3, [sp, #20]
 8001566:	4c2d      	ldr	r4, [pc, #180]	; (800161c <_svfiprintf_r+0x1d8>)
 8001568:	2203      	movs	r2, #3
 800156a:	7839      	ldrb	r1, [r7, #0]
 800156c:	4620      	mov	r0, r4
 800156e:	f000 f9f5 	bl	800195c <memchr>
 8001572:	b138      	cbz	r0, 8001584 <_svfiprintf_r+0x140>
 8001574:	2340      	movs	r3, #64	; 0x40
 8001576:	1b00      	subs	r0, r0, r4
 8001578:	fa03 f000 	lsl.w	r0, r3, r0
 800157c:	9b04      	ldr	r3, [sp, #16]
 800157e:	3701      	adds	r7, #1
 8001580:	4303      	orrs	r3, r0
 8001582:	9304      	str	r3, [sp, #16]
 8001584:	7839      	ldrb	r1, [r7, #0]
 8001586:	2206      	movs	r2, #6
 8001588:	4825      	ldr	r0, [pc, #148]	; (8001620 <_svfiprintf_r+0x1dc>)
 800158a:	1c7e      	adds	r6, r7, #1
 800158c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001590:	f000 f9e4 	bl	800195c <memchr>
 8001594:	2800      	cmp	r0, #0
 8001596:	d035      	beq.n	8001604 <_svfiprintf_r+0x1c0>
 8001598:	4b22      	ldr	r3, [pc, #136]	; (8001624 <_svfiprintf_r+0x1e0>)
 800159a:	b9fb      	cbnz	r3, 80015dc <_svfiprintf_r+0x198>
 800159c:	9b03      	ldr	r3, [sp, #12]
 800159e:	3307      	adds	r3, #7
 80015a0:	f023 0307 	bic.w	r3, r3, #7
 80015a4:	3308      	adds	r3, #8
 80015a6:	9303      	str	r3, [sp, #12]
 80015a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80015aa:	444b      	add	r3, r9
 80015ac:	9309      	str	r3, [sp, #36]	; 0x24
 80015ae:	e76d      	b.n	800148c <_svfiprintf_r+0x48>
 80015b0:	fb00 3202 	mla	r2, r0, r2, r3
 80015b4:	2101      	movs	r1, #1
 80015b6:	e7a4      	b.n	8001502 <_svfiprintf_r+0xbe>
 80015b8:	2300      	movs	r3, #0
 80015ba:	240a      	movs	r4, #10
 80015bc:	4618      	mov	r0, r3
 80015be:	9305      	str	r3, [sp, #20]
 80015c0:	460f      	mov	r7, r1
 80015c2:	783a      	ldrb	r2, [r7, #0]
 80015c4:	3101      	adds	r1, #1
 80015c6:	3a30      	subs	r2, #48	; 0x30
 80015c8:	2a09      	cmp	r2, #9
 80015ca:	d903      	bls.n	80015d4 <_svfiprintf_r+0x190>
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0ca      	beq.n	8001566 <_svfiprintf_r+0x122>
 80015d0:	9005      	str	r0, [sp, #20]
 80015d2:	e7c8      	b.n	8001566 <_svfiprintf_r+0x122>
 80015d4:	fb04 2000 	mla	r0, r4, r0, r2
 80015d8:	2301      	movs	r3, #1
 80015da:	e7f1      	b.n	80015c0 <_svfiprintf_r+0x17c>
 80015dc:	ab03      	add	r3, sp, #12
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	462a      	mov	r2, r5
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <_svfiprintf_r+0x1e4>)
 80015e4:	a904      	add	r1, sp, #16
 80015e6:	4640      	mov	r0, r8
 80015e8:	f3af 8000 	nop.w
 80015ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80015f0:	4681      	mov	r9, r0
 80015f2:	d1d9      	bne.n	80015a8 <_svfiprintf_r+0x164>
 80015f4:	89ab      	ldrh	r3, [r5, #12]
 80015f6:	065b      	lsls	r3, r3, #25
 80015f8:	f53f af39 	bmi.w	800146e <_svfiprintf_r+0x2a>
 80015fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80015fe:	b01d      	add	sp, #116	; 0x74
 8001600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001604:	ab03      	add	r3, sp, #12
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	462a      	mov	r2, r5
 800160a:	4b07      	ldr	r3, [pc, #28]	; (8001628 <_svfiprintf_r+0x1e4>)
 800160c:	a904      	add	r1, sp, #16
 800160e:	4640      	mov	r0, r8
 8001610:	f000 f884 	bl	800171c <_printf_i>
 8001614:	e7ea      	b.n	80015ec <_svfiprintf_r+0x1a8>
 8001616:	bf00      	nop
 8001618:	08001c16 	.word	0x08001c16
 800161c:	08001c1c 	.word	0x08001c1c
 8001620:	08001c20 	.word	0x08001c20
 8001624:	00000000 	.word	0x00000000
 8001628:	0800138d 	.word	0x0800138d

0800162c <_printf_common>:
 800162c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001630:	4691      	mov	r9, r2
 8001632:	461f      	mov	r7, r3
 8001634:	688a      	ldr	r2, [r1, #8]
 8001636:	690b      	ldr	r3, [r1, #16]
 8001638:	4606      	mov	r6, r0
 800163a:	4293      	cmp	r3, r2
 800163c:	bfb8      	it	lt
 800163e:	4613      	movlt	r3, r2
 8001640:	f8c9 3000 	str.w	r3, [r9]
 8001644:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001648:	460c      	mov	r4, r1
 800164a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800164e:	b112      	cbz	r2, 8001656 <_printf_common+0x2a>
 8001650:	3301      	adds	r3, #1
 8001652:	f8c9 3000 	str.w	r3, [r9]
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	0699      	lsls	r1, r3, #26
 800165a:	bf42      	ittt	mi
 800165c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001660:	3302      	addmi	r3, #2
 8001662:	f8c9 3000 	strmi.w	r3, [r9]
 8001666:	6825      	ldr	r5, [r4, #0]
 8001668:	f015 0506 	ands.w	r5, r5, #6
 800166c:	d107      	bne.n	800167e <_printf_common+0x52>
 800166e:	f104 0a19 	add.w	sl, r4, #25
 8001672:	68e3      	ldr	r3, [r4, #12]
 8001674:	f8d9 2000 	ldr.w	r2, [r9]
 8001678:	1a9b      	subs	r3, r3, r2
 800167a:	429d      	cmp	r5, r3
 800167c:	db2a      	blt.n	80016d4 <_printf_common+0xa8>
 800167e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001682:	6822      	ldr	r2, [r4, #0]
 8001684:	3300      	adds	r3, #0
 8001686:	bf18      	it	ne
 8001688:	2301      	movne	r3, #1
 800168a:	0692      	lsls	r2, r2, #26
 800168c:	d42f      	bmi.n	80016ee <_printf_common+0xc2>
 800168e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001692:	4639      	mov	r1, r7
 8001694:	4630      	mov	r0, r6
 8001696:	47c0      	blx	r8
 8001698:	3001      	adds	r0, #1
 800169a:	d022      	beq.n	80016e2 <_printf_common+0xb6>
 800169c:	6823      	ldr	r3, [r4, #0]
 800169e:	68e5      	ldr	r5, [r4, #12]
 80016a0:	f003 0306 	and.w	r3, r3, #6
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	bf18      	it	ne
 80016a8:	2500      	movne	r5, #0
 80016aa:	f8d9 2000 	ldr.w	r2, [r9]
 80016ae:	f04f 0900 	mov.w	r9, #0
 80016b2:	bf08      	it	eq
 80016b4:	1aad      	subeq	r5, r5, r2
 80016b6:	68a3      	ldr	r3, [r4, #8]
 80016b8:	6922      	ldr	r2, [r4, #16]
 80016ba:	bf08      	it	eq
 80016bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80016c0:	4293      	cmp	r3, r2
 80016c2:	bfc4      	itt	gt
 80016c4:	1a9b      	subgt	r3, r3, r2
 80016c6:	18ed      	addgt	r5, r5, r3
 80016c8:	341a      	adds	r4, #26
 80016ca:	454d      	cmp	r5, r9
 80016cc:	d11b      	bne.n	8001706 <_printf_common+0xda>
 80016ce:	2000      	movs	r0, #0
 80016d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016d4:	2301      	movs	r3, #1
 80016d6:	4652      	mov	r2, sl
 80016d8:	4639      	mov	r1, r7
 80016da:	4630      	mov	r0, r6
 80016dc:	47c0      	blx	r8
 80016de:	3001      	adds	r0, #1
 80016e0:	d103      	bne.n	80016ea <_printf_common+0xbe>
 80016e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016ea:	3501      	adds	r5, #1
 80016ec:	e7c1      	b.n	8001672 <_printf_common+0x46>
 80016ee:	2030      	movs	r0, #48	; 0x30
 80016f0:	18e1      	adds	r1, r4, r3
 80016f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80016fc:	4422      	add	r2, r4
 80016fe:	3302      	adds	r3, #2
 8001700:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001704:	e7c3      	b.n	800168e <_printf_common+0x62>
 8001706:	2301      	movs	r3, #1
 8001708:	4622      	mov	r2, r4
 800170a:	4639      	mov	r1, r7
 800170c:	4630      	mov	r0, r6
 800170e:	47c0      	blx	r8
 8001710:	3001      	adds	r0, #1
 8001712:	d0e6      	beq.n	80016e2 <_printf_common+0xb6>
 8001714:	f109 0901 	add.w	r9, r9, #1
 8001718:	e7d7      	b.n	80016ca <_printf_common+0x9e>
	...

0800171c <_printf_i>:
 800171c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001720:	4617      	mov	r7, r2
 8001722:	7e0a      	ldrb	r2, [r1, #24]
 8001724:	b085      	sub	sp, #20
 8001726:	2a6e      	cmp	r2, #110	; 0x6e
 8001728:	4698      	mov	r8, r3
 800172a:	4606      	mov	r6, r0
 800172c:	460c      	mov	r4, r1
 800172e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001730:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001734:	f000 80bc 	beq.w	80018b0 <_printf_i+0x194>
 8001738:	d81a      	bhi.n	8001770 <_printf_i+0x54>
 800173a:	2a63      	cmp	r2, #99	; 0x63
 800173c:	d02e      	beq.n	800179c <_printf_i+0x80>
 800173e:	d80a      	bhi.n	8001756 <_printf_i+0x3a>
 8001740:	2a00      	cmp	r2, #0
 8001742:	f000 80c8 	beq.w	80018d6 <_printf_i+0x1ba>
 8001746:	2a58      	cmp	r2, #88	; 0x58
 8001748:	f000 808a 	beq.w	8001860 <_printf_i+0x144>
 800174c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001750:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001754:	e02a      	b.n	80017ac <_printf_i+0x90>
 8001756:	2a64      	cmp	r2, #100	; 0x64
 8001758:	d001      	beq.n	800175e <_printf_i+0x42>
 800175a:	2a69      	cmp	r2, #105	; 0x69
 800175c:	d1f6      	bne.n	800174c <_printf_i+0x30>
 800175e:	6821      	ldr	r1, [r4, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001766:	d023      	beq.n	80017b0 <_printf_i+0x94>
 8001768:	1d11      	adds	r1, r2, #4
 800176a:	6019      	str	r1, [r3, #0]
 800176c:	6813      	ldr	r3, [r2, #0]
 800176e:	e027      	b.n	80017c0 <_printf_i+0xa4>
 8001770:	2a73      	cmp	r2, #115	; 0x73
 8001772:	f000 80b4 	beq.w	80018de <_printf_i+0x1c2>
 8001776:	d808      	bhi.n	800178a <_printf_i+0x6e>
 8001778:	2a6f      	cmp	r2, #111	; 0x6f
 800177a:	d02a      	beq.n	80017d2 <_printf_i+0xb6>
 800177c:	2a70      	cmp	r2, #112	; 0x70
 800177e:	d1e5      	bne.n	800174c <_printf_i+0x30>
 8001780:	680a      	ldr	r2, [r1, #0]
 8001782:	f042 0220 	orr.w	r2, r2, #32
 8001786:	600a      	str	r2, [r1, #0]
 8001788:	e003      	b.n	8001792 <_printf_i+0x76>
 800178a:	2a75      	cmp	r2, #117	; 0x75
 800178c:	d021      	beq.n	80017d2 <_printf_i+0xb6>
 800178e:	2a78      	cmp	r2, #120	; 0x78
 8001790:	d1dc      	bne.n	800174c <_printf_i+0x30>
 8001792:	2278      	movs	r2, #120	; 0x78
 8001794:	496f      	ldr	r1, [pc, #444]	; (8001954 <_printf_i+0x238>)
 8001796:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800179a:	e064      	b.n	8001866 <_printf_i+0x14a>
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80017a2:	1d11      	adds	r1, r2, #4
 80017a4:	6019      	str	r1, [r3, #0]
 80017a6:	6813      	ldr	r3, [r2, #0]
 80017a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0a3      	b.n	80018f8 <_printf_i+0x1dc>
 80017b0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80017b4:	f102 0104 	add.w	r1, r2, #4
 80017b8:	6019      	str	r1, [r3, #0]
 80017ba:	d0d7      	beq.n	800176c <_printf_i+0x50>
 80017bc:	f9b2 3000 	ldrsh.w	r3, [r2]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	da03      	bge.n	80017cc <_printf_i+0xb0>
 80017c4:	222d      	movs	r2, #45	; 0x2d
 80017c6:	425b      	negs	r3, r3
 80017c8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80017cc:	4962      	ldr	r1, [pc, #392]	; (8001958 <_printf_i+0x23c>)
 80017ce:	220a      	movs	r2, #10
 80017d0:	e017      	b.n	8001802 <_printf_i+0xe6>
 80017d2:	6820      	ldr	r0, [r4, #0]
 80017d4:	6819      	ldr	r1, [r3, #0]
 80017d6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80017da:	d003      	beq.n	80017e4 <_printf_i+0xc8>
 80017dc:	1d08      	adds	r0, r1, #4
 80017de:	6018      	str	r0, [r3, #0]
 80017e0:	680b      	ldr	r3, [r1, #0]
 80017e2:	e006      	b.n	80017f2 <_printf_i+0xd6>
 80017e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80017e8:	f101 0004 	add.w	r0, r1, #4
 80017ec:	6018      	str	r0, [r3, #0]
 80017ee:	d0f7      	beq.n	80017e0 <_printf_i+0xc4>
 80017f0:	880b      	ldrh	r3, [r1, #0]
 80017f2:	2a6f      	cmp	r2, #111	; 0x6f
 80017f4:	bf14      	ite	ne
 80017f6:	220a      	movne	r2, #10
 80017f8:	2208      	moveq	r2, #8
 80017fa:	4957      	ldr	r1, [pc, #348]	; (8001958 <_printf_i+0x23c>)
 80017fc:	2000      	movs	r0, #0
 80017fe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001802:	6865      	ldr	r5, [r4, #4]
 8001804:	2d00      	cmp	r5, #0
 8001806:	60a5      	str	r5, [r4, #8]
 8001808:	f2c0 809c 	blt.w	8001944 <_printf_i+0x228>
 800180c:	6820      	ldr	r0, [r4, #0]
 800180e:	f020 0004 	bic.w	r0, r0, #4
 8001812:	6020      	str	r0, [r4, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d13f      	bne.n	8001898 <_printf_i+0x17c>
 8001818:	2d00      	cmp	r5, #0
 800181a:	f040 8095 	bne.w	8001948 <_printf_i+0x22c>
 800181e:	4675      	mov	r5, lr
 8001820:	2a08      	cmp	r2, #8
 8001822:	d10b      	bne.n	800183c <_printf_i+0x120>
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	07da      	lsls	r2, r3, #31
 8001828:	d508      	bpl.n	800183c <_printf_i+0x120>
 800182a:	6923      	ldr	r3, [r4, #16]
 800182c:	6862      	ldr	r2, [r4, #4]
 800182e:	429a      	cmp	r2, r3
 8001830:	bfde      	ittt	le
 8001832:	2330      	movle	r3, #48	; 0x30
 8001834:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001838:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800183c:	ebae 0305 	sub.w	r3, lr, r5
 8001840:	6123      	str	r3, [r4, #16]
 8001842:	f8cd 8000 	str.w	r8, [sp]
 8001846:	463b      	mov	r3, r7
 8001848:	aa03      	add	r2, sp, #12
 800184a:	4621      	mov	r1, r4
 800184c:	4630      	mov	r0, r6
 800184e:	f7ff feed 	bl	800162c <_printf_common>
 8001852:	3001      	adds	r0, #1
 8001854:	d155      	bne.n	8001902 <_printf_i+0x1e6>
 8001856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800185a:	b005      	add	sp, #20
 800185c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001860:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001864:	493c      	ldr	r1, [pc, #240]	; (8001958 <_printf_i+0x23c>)
 8001866:	6822      	ldr	r2, [r4, #0]
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800186e:	f100 0504 	add.w	r5, r0, #4
 8001872:	601d      	str	r5, [r3, #0]
 8001874:	d001      	beq.n	800187a <_printf_i+0x15e>
 8001876:	6803      	ldr	r3, [r0, #0]
 8001878:	e002      	b.n	8001880 <_printf_i+0x164>
 800187a:	0655      	lsls	r5, r2, #25
 800187c:	d5fb      	bpl.n	8001876 <_printf_i+0x15a>
 800187e:	8803      	ldrh	r3, [r0, #0]
 8001880:	07d0      	lsls	r0, r2, #31
 8001882:	bf44      	itt	mi
 8001884:	f042 0220 	orrmi.w	r2, r2, #32
 8001888:	6022      	strmi	r2, [r4, #0]
 800188a:	b91b      	cbnz	r3, 8001894 <_printf_i+0x178>
 800188c:	6822      	ldr	r2, [r4, #0]
 800188e:	f022 0220 	bic.w	r2, r2, #32
 8001892:	6022      	str	r2, [r4, #0]
 8001894:	2210      	movs	r2, #16
 8001896:	e7b1      	b.n	80017fc <_printf_i+0xe0>
 8001898:	4675      	mov	r5, lr
 800189a:	fbb3 f0f2 	udiv	r0, r3, r2
 800189e:	fb02 3310 	mls	r3, r2, r0, r3
 80018a2:	5ccb      	ldrb	r3, [r1, r3]
 80018a4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80018a8:	4603      	mov	r3, r0
 80018aa:	2800      	cmp	r0, #0
 80018ac:	d1f5      	bne.n	800189a <_printf_i+0x17e>
 80018ae:	e7b7      	b.n	8001820 <_printf_i+0x104>
 80018b0:	6808      	ldr	r0, [r1, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80018b8:	6949      	ldr	r1, [r1, #20]
 80018ba:	d004      	beq.n	80018c6 <_printf_i+0x1aa>
 80018bc:	1d10      	adds	r0, r2, #4
 80018be:	6018      	str	r0, [r3, #0]
 80018c0:	6813      	ldr	r3, [r2, #0]
 80018c2:	6019      	str	r1, [r3, #0]
 80018c4:	e007      	b.n	80018d6 <_printf_i+0x1ba>
 80018c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80018ca:	f102 0004 	add.w	r0, r2, #4
 80018ce:	6018      	str	r0, [r3, #0]
 80018d0:	6813      	ldr	r3, [r2, #0]
 80018d2:	d0f6      	beq.n	80018c2 <_printf_i+0x1a6>
 80018d4:	8019      	strh	r1, [r3, #0]
 80018d6:	2300      	movs	r3, #0
 80018d8:	4675      	mov	r5, lr
 80018da:	6123      	str	r3, [r4, #16]
 80018dc:	e7b1      	b.n	8001842 <_printf_i+0x126>
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	1d11      	adds	r1, r2, #4
 80018e2:	6019      	str	r1, [r3, #0]
 80018e4:	6815      	ldr	r5, [r2, #0]
 80018e6:	2100      	movs	r1, #0
 80018e8:	6862      	ldr	r2, [r4, #4]
 80018ea:	4628      	mov	r0, r5
 80018ec:	f000 f836 	bl	800195c <memchr>
 80018f0:	b108      	cbz	r0, 80018f6 <_printf_i+0x1da>
 80018f2:	1b40      	subs	r0, r0, r5
 80018f4:	6060      	str	r0, [r4, #4]
 80018f6:	6863      	ldr	r3, [r4, #4]
 80018f8:	6123      	str	r3, [r4, #16]
 80018fa:	2300      	movs	r3, #0
 80018fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001900:	e79f      	b.n	8001842 <_printf_i+0x126>
 8001902:	6923      	ldr	r3, [r4, #16]
 8001904:	462a      	mov	r2, r5
 8001906:	4639      	mov	r1, r7
 8001908:	4630      	mov	r0, r6
 800190a:	47c0      	blx	r8
 800190c:	3001      	adds	r0, #1
 800190e:	d0a2      	beq.n	8001856 <_printf_i+0x13a>
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	079b      	lsls	r3, r3, #30
 8001914:	d507      	bpl.n	8001926 <_printf_i+0x20a>
 8001916:	2500      	movs	r5, #0
 8001918:	f104 0919 	add.w	r9, r4, #25
 800191c:	68e3      	ldr	r3, [r4, #12]
 800191e:	9a03      	ldr	r2, [sp, #12]
 8001920:	1a9b      	subs	r3, r3, r2
 8001922:	429d      	cmp	r5, r3
 8001924:	db05      	blt.n	8001932 <_printf_i+0x216>
 8001926:	68e0      	ldr	r0, [r4, #12]
 8001928:	9b03      	ldr	r3, [sp, #12]
 800192a:	4298      	cmp	r0, r3
 800192c:	bfb8      	it	lt
 800192e:	4618      	movlt	r0, r3
 8001930:	e793      	b.n	800185a <_printf_i+0x13e>
 8001932:	2301      	movs	r3, #1
 8001934:	464a      	mov	r2, r9
 8001936:	4639      	mov	r1, r7
 8001938:	4630      	mov	r0, r6
 800193a:	47c0      	blx	r8
 800193c:	3001      	adds	r0, #1
 800193e:	d08a      	beq.n	8001856 <_printf_i+0x13a>
 8001940:	3501      	adds	r5, #1
 8001942:	e7eb      	b.n	800191c <_printf_i+0x200>
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1a7      	bne.n	8001898 <_printf_i+0x17c>
 8001948:	780b      	ldrb	r3, [r1, #0]
 800194a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800194e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001952:	e765      	b.n	8001820 <_printf_i+0x104>
 8001954:	08001c38 	.word	0x08001c38
 8001958:	08001c27 	.word	0x08001c27

0800195c <memchr>:
 800195c:	b510      	push	{r4, lr}
 800195e:	b2c9      	uxtb	r1, r1
 8001960:	4402      	add	r2, r0
 8001962:	4290      	cmp	r0, r2
 8001964:	4603      	mov	r3, r0
 8001966:	d101      	bne.n	800196c <memchr+0x10>
 8001968:	2000      	movs	r0, #0
 800196a:	bd10      	pop	{r4, pc}
 800196c:	781c      	ldrb	r4, [r3, #0]
 800196e:	3001      	adds	r0, #1
 8001970:	428c      	cmp	r4, r1
 8001972:	d1f6      	bne.n	8001962 <memchr+0x6>
 8001974:	4618      	mov	r0, r3
 8001976:	bd10      	pop	{r4, pc}

08001978 <memcpy>:
 8001978:	b510      	push	{r4, lr}
 800197a:	1e43      	subs	r3, r0, #1
 800197c:	440a      	add	r2, r1
 800197e:	4291      	cmp	r1, r2
 8001980:	d100      	bne.n	8001984 <memcpy+0xc>
 8001982:	bd10      	pop	{r4, pc}
 8001984:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001988:	f803 4f01 	strb.w	r4, [r3, #1]!
 800198c:	e7f7      	b.n	800197e <memcpy+0x6>

0800198e <memmove>:
 800198e:	4288      	cmp	r0, r1
 8001990:	b510      	push	{r4, lr}
 8001992:	eb01 0302 	add.w	r3, r1, r2
 8001996:	d803      	bhi.n	80019a0 <memmove+0x12>
 8001998:	1e42      	subs	r2, r0, #1
 800199a:	4299      	cmp	r1, r3
 800199c:	d10c      	bne.n	80019b8 <memmove+0x2a>
 800199e:	bd10      	pop	{r4, pc}
 80019a0:	4298      	cmp	r0, r3
 80019a2:	d2f9      	bcs.n	8001998 <memmove+0xa>
 80019a4:	1881      	adds	r1, r0, r2
 80019a6:	1ad2      	subs	r2, r2, r3
 80019a8:	42d3      	cmn	r3, r2
 80019aa:	d100      	bne.n	80019ae <memmove+0x20>
 80019ac:	bd10      	pop	{r4, pc}
 80019ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80019b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80019b6:	e7f7      	b.n	80019a8 <memmove+0x1a>
 80019b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80019bc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80019c0:	e7eb      	b.n	800199a <memmove+0xc>
	...

080019c4 <_free_r>:
 80019c4:	b538      	push	{r3, r4, r5, lr}
 80019c6:	4605      	mov	r5, r0
 80019c8:	2900      	cmp	r1, #0
 80019ca:	d043      	beq.n	8001a54 <_free_r+0x90>
 80019cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019d0:	1f0c      	subs	r4, r1, #4
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	bfb8      	it	lt
 80019d6:	18e4      	addlt	r4, r4, r3
 80019d8:	f000 f8d4 	bl	8001b84 <__malloc_lock>
 80019dc:	4a1e      	ldr	r2, [pc, #120]	; (8001a58 <_free_r+0x94>)
 80019de:	6813      	ldr	r3, [r2, #0]
 80019e0:	4610      	mov	r0, r2
 80019e2:	b933      	cbnz	r3, 80019f2 <_free_r+0x2e>
 80019e4:	6063      	str	r3, [r4, #4]
 80019e6:	6014      	str	r4, [r2, #0]
 80019e8:	4628      	mov	r0, r5
 80019ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019ee:	f000 b8ca 	b.w	8001b86 <__malloc_unlock>
 80019f2:	42a3      	cmp	r3, r4
 80019f4:	d90b      	bls.n	8001a0e <_free_r+0x4a>
 80019f6:	6821      	ldr	r1, [r4, #0]
 80019f8:	1862      	adds	r2, r4, r1
 80019fa:	4293      	cmp	r3, r2
 80019fc:	bf01      	itttt	eq
 80019fe:	681a      	ldreq	r2, [r3, #0]
 8001a00:	685b      	ldreq	r3, [r3, #4]
 8001a02:	1852      	addeq	r2, r2, r1
 8001a04:	6022      	streq	r2, [r4, #0]
 8001a06:	6063      	str	r3, [r4, #4]
 8001a08:	6004      	str	r4, [r0, #0]
 8001a0a:	e7ed      	b.n	80019e8 <_free_r+0x24>
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	b10a      	cbz	r2, 8001a16 <_free_r+0x52>
 8001a12:	42a2      	cmp	r2, r4
 8001a14:	d9fa      	bls.n	8001a0c <_free_r+0x48>
 8001a16:	6819      	ldr	r1, [r3, #0]
 8001a18:	1858      	adds	r0, r3, r1
 8001a1a:	42a0      	cmp	r0, r4
 8001a1c:	d10b      	bne.n	8001a36 <_free_r+0x72>
 8001a1e:	6820      	ldr	r0, [r4, #0]
 8001a20:	4401      	add	r1, r0
 8001a22:	1858      	adds	r0, r3, r1
 8001a24:	4282      	cmp	r2, r0
 8001a26:	6019      	str	r1, [r3, #0]
 8001a28:	d1de      	bne.n	80019e8 <_free_r+0x24>
 8001a2a:	6810      	ldr	r0, [r2, #0]
 8001a2c:	6852      	ldr	r2, [r2, #4]
 8001a2e:	4401      	add	r1, r0
 8001a30:	6019      	str	r1, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	e7d8      	b.n	80019e8 <_free_r+0x24>
 8001a36:	d902      	bls.n	8001a3e <_free_r+0x7a>
 8001a38:	230c      	movs	r3, #12
 8001a3a:	602b      	str	r3, [r5, #0]
 8001a3c:	e7d4      	b.n	80019e8 <_free_r+0x24>
 8001a3e:	6820      	ldr	r0, [r4, #0]
 8001a40:	1821      	adds	r1, r4, r0
 8001a42:	428a      	cmp	r2, r1
 8001a44:	bf01      	itttt	eq
 8001a46:	6811      	ldreq	r1, [r2, #0]
 8001a48:	6852      	ldreq	r2, [r2, #4]
 8001a4a:	1809      	addeq	r1, r1, r0
 8001a4c:	6021      	streq	r1, [r4, #0]
 8001a4e:	6062      	str	r2, [r4, #4]
 8001a50:	605c      	str	r4, [r3, #4]
 8001a52:	e7c9      	b.n	80019e8 <_free_r+0x24>
 8001a54:	bd38      	pop	{r3, r4, r5, pc}
 8001a56:	bf00      	nop
 8001a58:	2000008c 	.word	0x2000008c

08001a5c <_malloc_r>:
 8001a5c:	b570      	push	{r4, r5, r6, lr}
 8001a5e:	1ccd      	adds	r5, r1, #3
 8001a60:	f025 0503 	bic.w	r5, r5, #3
 8001a64:	3508      	adds	r5, #8
 8001a66:	2d0c      	cmp	r5, #12
 8001a68:	bf38      	it	cc
 8001a6a:	250c      	movcc	r5, #12
 8001a6c:	2d00      	cmp	r5, #0
 8001a6e:	4606      	mov	r6, r0
 8001a70:	db01      	blt.n	8001a76 <_malloc_r+0x1a>
 8001a72:	42a9      	cmp	r1, r5
 8001a74:	d903      	bls.n	8001a7e <_malloc_r+0x22>
 8001a76:	230c      	movs	r3, #12
 8001a78:	6033      	str	r3, [r6, #0]
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	bd70      	pop	{r4, r5, r6, pc}
 8001a7e:	f000 f881 	bl	8001b84 <__malloc_lock>
 8001a82:	4a23      	ldr	r2, [pc, #140]	; (8001b10 <_malloc_r+0xb4>)
 8001a84:	6814      	ldr	r4, [r2, #0]
 8001a86:	4621      	mov	r1, r4
 8001a88:	b991      	cbnz	r1, 8001ab0 <_malloc_r+0x54>
 8001a8a:	4c22      	ldr	r4, [pc, #136]	; (8001b14 <_malloc_r+0xb8>)
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	b91b      	cbnz	r3, 8001a98 <_malloc_r+0x3c>
 8001a90:	4630      	mov	r0, r6
 8001a92:	f000 f867 	bl	8001b64 <_sbrk_r>
 8001a96:	6020      	str	r0, [r4, #0]
 8001a98:	4629      	mov	r1, r5
 8001a9a:	4630      	mov	r0, r6
 8001a9c:	f000 f862 	bl	8001b64 <_sbrk_r>
 8001aa0:	1c43      	adds	r3, r0, #1
 8001aa2:	d126      	bne.n	8001af2 <_malloc_r+0x96>
 8001aa4:	230c      	movs	r3, #12
 8001aa6:	4630      	mov	r0, r6
 8001aa8:	6033      	str	r3, [r6, #0]
 8001aaa:	f000 f86c 	bl	8001b86 <__malloc_unlock>
 8001aae:	e7e4      	b.n	8001a7a <_malloc_r+0x1e>
 8001ab0:	680b      	ldr	r3, [r1, #0]
 8001ab2:	1b5b      	subs	r3, r3, r5
 8001ab4:	d41a      	bmi.n	8001aec <_malloc_r+0x90>
 8001ab6:	2b0b      	cmp	r3, #11
 8001ab8:	d90f      	bls.n	8001ada <_malloc_r+0x7e>
 8001aba:	600b      	str	r3, [r1, #0]
 8001abc:	18cc      	adds	r4, r1, r3
 8001abe:	50cd      	str	r5, [r1, r3]
 8001ac0:	4630      	mov	r0, r6
 8001ac2:	f000 f860 	bl	8001b86 <__malloc_unlock>
 8001ac6:	f104 000b 	add.w	r0, r4, #11
 8001aca:	1d23      	adds	r3, r4, #4
 8001acc:	f020 0007 	bic.w	r0, r0, #7
 8001ad0:	1ac3      	subs	r3, r0, r3
 8001ad2:	d01b      	beq.n	8001b0c <_malloc_r+0xb0>
 8001ad4:	425a      	negs	r2, r3
 8001ad6:	50e2      	str	r2, [r4, r3]
 8001ad8:	bd70      	pop	{r4, r5, r6, pc}
 8001ada:	428c      	cmp	r4, r1
 8001adc:	bf0b      	itete	eq
 8001ade:	6863      	ldreq	r3, [r4, #4]
 8001ae0:	684b      	ldrne	r3, [r1, #4]
 8001ae2:	6013      	streq	r3, [r2, #0]
 8001ae4:	6063      	strne	r3, [r4, #4]
 8001ae6:	bf18      	it	ne
 8001ae8:	460c      	movne	r4, r1
 8001aea:	e7e9      	b.n	8001ac0 <_malloc_r+0x64>
 8001aec:	460c      	mov	r4, r1
 8001aee:	6849      	ldr	r1, [r1, #4]
 8001af0:	e7ca      	b.n	8001a88 <_malloc_r+0x2c>
 8001af2:	1cc4      	adds	r4, r0, #3
 8001af4:	f024 0403 	bic.w	r4, r4, #3
 8001af8:	42a0      	cmp	r0, r4
 8001afa:	d005      	beq.n	8001b08 <_malloc_r+0xac>
 8001afc:	1a21      	subs	r1, r4, r0
 8001afe:	4630      	mov	r0, r6
 8001b00:	f000 f830 	bl	8001b64 <_sbrk_r>
 8001b04:	3001      	adds	r0, #1
 8001b06:	d0cd      	beq.n	8001aa4 <_malloc_r+0x48>
 8001b08:	6025      	str	r5, [r4, #0]
 8001b0a:	e7d9      	b.n	8001ac0 <_malloc_r+0x64>
 8001b0c:	bd70      	pop	{r4, r5, r6, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000008c 	.word	0x2000008c
 8001b14:	20000090 	.word	0x20000090

08001b18 <_realloc_r>:
 8001b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b1a:	4607      	mov	r7, r0
 8001b1c:	4614      	mov	r4, r2
 8001b1e:	460e      	mov	r6, r1
 8001b20:	b921      	cbnz	r1, 8001b2c <_realloc_r+0x14>
 8001b22:	4611      	mov	r1, r2
 8001b24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001b28:	f7ff bf98 	b.w	8001a5c <_malloc_r>
 8001b2c:	b922      	cbnz	r2, 8001b38 <_realloc_r+0x20>
 8001b2e:	f7ff ff49 	bl	80019c4 <_free_r>
 8001b32:	4625      	mov	r5, r4
 8001b34:	4628      	mov	r0, r5
 8001b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b38:	f000 f826 	bl	8001b88 <_malloc_usable_size_r>
 8001b3c:	4284      	cmp	r4, r0
 8001b3e:	d90f      	bls.n	8001b60 <_realloc_r+0x48>
 8001b40:	4621      	mov	r1, r4
 8001b42:	4638      	mov	r0, r7
 8001b44:	f7ff ff8a 	bl	8001a5c <_malloc_r>
 8001b48:	4605      	mov	r5, r0
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d0f2      	beq.n	8001b34 <_realloc_r+0x1c>
 8001b4e:	4631      	mov	r1, r6
 8001b50:	4622      	mov	r2, r4
 8001b52:	f7ff ff11 	bl	8001978 <memcpy>
 8001b56:	4631      	mov	r1, r6
 8001b58:	4638      	mov	r0, r7
 8001b5a:	f7ff ff33 	bl	80019c4 <_free_r>
 8001b5e:	e7e9      	b.n	8001b34 <_realloc_r+0x1c>
 8001b60:	4635      	mov	r5, r6
 8001b62:	e7e7      	b.n	8001b34 <_realloc_r+0x1c>

08001b64 <_sbrk_r>:
 8001b64:	b538      	push	{r3, r4, r5, lr}
 8001b66:	2300      	movs	r3, #0
 8001b68:	4c05      	ldr	r4, [pc, #20]	; (8001b80 <_sbrk_r+0x1c>)
 8001b6a:	4605      	mov	r5, r0
 8001b6c:	4608      	mov	r0, r1
 8001b6e:	6023      	str	r3, [r4, #0]
 8001b70:	f000 f814 	bl	8001b9c <_sbrk>
 8001b74:	1c43      	adds	r3, r0, #1
 8001b76:	d102      	bne.n	8001b7e <_sbrk_r+0x1a>
 8001b78:	6823      	ldr	r3, [r4, #0]
 8001b7a:	b103      	cbz	r3, 8001b7e <_sbrk_r+0x1a>
 8001b7c:	602b      	str	r3, [r5, #0]
 8001b7e:	bd38      	pop	{r3, r4, r5, pc}
 8001b80:	20000130 	.word	0x20000130

08001b84 <__malloc_lock>:
 8001b84:	4770      	bx	lr

08001b86 <__malloc_unlock>:
 8001b86:	4770      	bx	lr

08001b88 <_malloc_usable_size_r>:
 8001b88:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8001b8c:	2800      	cmp	r0, #0
 8001b8e:	f1a0 0004 	sub.w	r0, r0, #4
 8001b92:	bfbc      	itt	lt
 8001b94:	580b      	ldrlt	r3, [r1, r0]
 8001b96:	18c0      	addlt	r0, r0, r3
 8001b98:	4770      	bx	lr
	...

08001b9c <_sbrk>:
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <_sbrk+0x14>)
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	6819      	ldr	r1, [r3, #0]
 8001ba2:	b909      	cbnz	r1, 8001ba8 <_sbrk+0xc>
 8001ba4:	4903      	ldr	r1, [pc, #12]	; (8001bb4 <_sbrk+0x18>)
 8001ba6:	6019      	str	r1, [r3, #0]
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	4402      	add	r2, r0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	4770      	bx	lr
 8001bb0:	20000094 	.word	0x20000094
 8001bb4:	20000134 	.word	0x20000134

08001bb8 <_init>:
 8001bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bba:	bf00      	nop
 8001bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bbe:	bc08      	pop	{r3}
 8001bc0:	469e      	mov	lr, r3
 8001bc2:	4770      	bx	lr

08001bc4 <_fini>:
 8001bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc6:	bf00      	nop
 8001bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bca:	bc08      	pop	{r3}
 8001bcc:	469e      	mov	lr, r3
 8001bce:	4770      	bx	lr
