
TM1637_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080016e8  080016e8  000116e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001730  08001730  00011730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001734  08001734  00011734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000038  2000000c  08001744  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000044  08001744  00020044  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000065d3  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000191a  00000000  00000000  00026608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021b4  00000000  00000000  00027f22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000580  00000000  00000000  0002a0d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000710  00000000  00000000  0002a658  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002d06  00000000  00000000  0002ad68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001bc5  00000000  00000000  0002da6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002f633  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000c80  00000000  00000000  0002f6b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080016d0 	.word	0x080016d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080016d0 	.word	0x080016d0

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f892 	bl	800028c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 f87a 	bl	80012a4 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000002c 	.word	0x2000002c

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfa9      	itett	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026e:	b2d2      	uxtbge	r2, r2
 8000270:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfbb      	ittet	lt
 8000276:	f000 000f 	andlt.w	r0, r0, #15
 800027a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	541a      	strblt	r2, [r3, r0]
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800028c:	3801      	subs	r0, #1
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000292:	d20a      	bcs.n	80002aa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e000e010 	.word	0xe000e010
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80002bc:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80002be:	4626      	mov	r6, r4
 80002c0:	4b66      	ldr	r3, [pc, #408]	; (800045c <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002c2:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 800046c <HAL_GPIO_Init+0x1b4>
 80002c6:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000470 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80002ca:	680a      	ldr	r2, [r1, #0]
 80002cc:	fa32 f506 	lsrs.w	r5, r2, r6
 80002d0:	d102      	bne.n	80002d8 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80002d2:	b003      	add	sp, #12
 80002d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80002d8:	f04f 0801 	mov.w	r8, #1
 80002dc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002e0:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80002e4:	4590      	cmp	r8, r2
 80002e6:	d17f      	bne.n	80003e8 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80002e8:	684d      	ldr	r5, [r1, #4]
 80002ea:	2d12      	cmp	r5, #18
 80002ec:	f000 80aa 	beq.w	8000444 <HAL_GPIO_Init+0x18c>
 80002f0:	f200 8083 	bhi.w	80003fa <HAL_GPIO_Init+0x142>
 80002f4:	2d02      	cmp	r5, #2
 80002f6:	f000 80a2 	beq.w	800043e <HAL_GPIO_Init+0x186>
 80002fa:	d877      	bhi.n	80003ec <HAL_GPIO_Init+0x134>
 80002fc:	2d00      	cmp	r5, #0
 80002fe:	f000 8089 	beq.w	8000414 <HAL_GPIO_Init+0x15c>
 8000302:	2d01      	cmp	r5, #1
 8000304:	f000 8099 	beq.w	800043a <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000308:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800030c:	2aff      	cmp	r2, #255	; 0xff
 800030e:	bf93      	iteet	ls
 8000310:	4682      	movls	sl, r0
 8000312:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000316:	3d08      	subhi	r5, #8
 8000318:	f8d0 b000 	ldrls.w	fp, [r0]
 800031c:	bf92      	itee	ls
 800031e:	00b5      	lslls	r5, r6, #2
 8000320:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000324:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000326:	fa09 f805 	lsl.w	r8, r9, r5
 800032a:	ea2b 0808 	bic.w	r8, fp, r8
 800032e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000332:	bf88      	it	hi
 8000334:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000338:	ea48 0505 	orr.w	r5, r8, r5
 800033c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000340:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000344:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000348:	d04e      	beq.n	80003e8 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800034a:	4d45      	ldr	r5, [pc, #276]	; (8000460 <HAL_GPIO_Init+0x1a8>)
 800034c:	4f44      	ldr	r7, [pc, #272]	; (8000460 <HAL_GPIO_Init+0x1a8>)
 800034e:	69ad      	ldr	r5, [r5, #24]
 8000350:	f026 0803 	bic.w	r8, r6, #3
 8000354:	f045 0501 	orr.w	r5, r5, #1
 8000358:	61bd      	str	r5, [r7, #24]
 800035a:	69bd      	ldr	r5, [r7, #24]
 800035c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000360:	f005 0501 	and.w	r5, r5, #1
 8000364:	9501      	str	r5, [sp, #4]
 8000366:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800036a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800036e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000370:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000374:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000378:	fa09 f90b 	lsl.w	r9, r9, fp
 800037c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000380:	4d38      	ldr	r5, [pc, #224]	; (8000464 <HAL_GPIO_Init+0x1ac>)
 8000382:	42a8      	cmp	r0, r5
 8000384:	d063      	beq.n	800044e <HAL_GPIO_Init+0x196>
 8000386:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800038a:	42a8      	cmp	r0, r5
 800038c:	d061      	beq.n	8000452 <HAL_GPIO_Init+0x19a>
 800038e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000392:	42a8      	cmp	r0, r5
 8000394:	d05f      	beq.n	8000456 <HAL_GPIO_Init+0x19e>
 8000396:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800039a:	42a8      	cmp	r0, r5
 800039c:	bf0c      	ite	eq
 800039e:	2503      	moveq	r5, #3
 80003a0:	2504      	movne	r5, #4
 80003a2:	fa05 f50b 	lsl.w	r5, r5, fp
 80003a6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80003aa:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80003ae:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003b0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003b4:	bf14      	ite	ne
 80003b6:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003b8:	4395      	biceq	r5, r2
 80003ba:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80003bc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003be:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003c2:	bf14      	ite	ne
 80003c4:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003c6:	4395      	biceq	r5, r2
 80003c8:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003ca:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003cc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003d0:	bf14      	ite	ne
 80003d2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003d4:	4395      	biceq	r5, r2
 80003d6:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80003d8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003da:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003de:	bf14      	ite	ne
 80003e0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003e2:	ea25 0202 	biceq.w	r2, r5, r2
 80003e6:	60da      	str	r2, [r3, #12]
	position++;
 80003e8:	3601      	adds	r6, #1
 80003ea:	e76e      	b.n	80002ca <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80003ec:	2d03      	cmp	r5, #3
 80003ee:	d022      	beq.n	8000436 <HAL_GPIO_Init+0x17e>
 80003f0:	2d11      	cmp	r5, #17
 80003f2:	d189      	bne.n	8000308 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003f4:	68cc      	ldr	r4, [r1, #12]
 80003f6:	3404      	adds	r4, #4
          break;
 80003f8:	e786      	b.n	8000308 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80003fa:	4f1b      	ldr	r7, [pc, #108]	; (8000468 <HAL_GPIO_Init+0x1b0>)
 80003fc:	42bd      	cmp	r5, r7
 80003fe:	d009      	beq.n	8000414 <HAL_GPIO_Init+0x15c>
 8000400:	d812      	bhi.n	8000428 <HAL_GPIO_Init+0x170>
 8000402:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000474 <HAL_GPIO_Init+0x1bc>
 8000406:	454d      	cmp	r5, r9
 8000408:	d004      	beq.n	8000414 <HAL_GPIO_Init+0x15c>
 800040a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800040e:	454d      	cmp	r5, r9
 8000410:	f47f af7a 	bne.w	8000308 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000414:	688c      	ldr	r4, [r1, #8]
 8000416:	b1c4      	cbz	r4, 800044a <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000418:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800041a:	bf0c      	ite	eq
 800041c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000420:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000424:	2408      	movs	r4, #8
 8000426:	e76f      	b.n	8000308 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000428:	4575      	cmp	r5, lr
 800042a:	d0f3      	beq.n	8000414 <HAL_GPIO_Init+0x15c>
 800042c:	4565      	cmp	r5, ip
 800042e:	d0f1      	beq.n	8000414 <HAL_GPIO_Init+0x15c>
 8000430:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000478 <HAL_GPIO_Init+0x1c0>
 8000434:	e7eb      	b.n	800040e <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000436:	2400      	movs	r4, #0
 8000438:	e766      	b.n	8000308 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800043a:	68cc      	ldr	r4, [r1, #12]
          break;
 800043c:	e764      	b.n	8000308 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800043e:	68cc      	ldr	r4, [r1, #12]
 8000440:	3408      	adds	r4, #8
          break;
 8000442:	e761      	b.n	8000308 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000444:	68cc      	ldr	r4, [r1, #12]
 8000446:	340c      	adds	r4, #12
          break;
 8000448:	e75e      	b.n	8000308 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800044a:	2404      	movs	r4, #4
 800044c:	e75c      	b.n	8000308 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800044e:	2500      	movs	r5, #0
 8000450:	e7a7      	b.n	80003a2 <HAL_GPIO_Init+0xea>
 8000452:	2501      	movs	r5, #1
 8000454:	e7a5      	b.n	80003a2 <HAL_GPIO_Init+0xea>
 8000456:	2502      	movs	r5, #2
 8000458:	e7a3      	b.n	80003a2 <HAL_GPIO_Init+0xea>
 800045a:	bf00      	nop
 800045c:	40010400 	.word	0x40010400
 8000460:	40021000 	.word	0x40021000
 8000464:	40010800 	.word	0x40010800
 8000468:	10210000 	.word	0x10210000
 800046c:	10310000 	.word	0x10310000
 8000470:	10320000 	.word	0x10320000
 8000474:	10110000 	.word	0x10110000
 8000478:	10220000 	.word	0x10220000

0800047c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800047c:	6883      	ldr	r3, [r0, #8]
 800047e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000480:	bf14      	ite	ne
 8000482:	2001      	movne	r0, #1
 8000484:	2000      	moveq	r0, #0
 8000486:	4770      	bx	lr

08000488 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000488:	b10a      	cbz	r2, 800048e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800048a:	6101      	str	r1, [r0, #16]
 800048c:	4770      	bx	lr
 800048e:	0409      	lsls	r1, r1, #16
 8000490:	e7fb      	b.n	800048a <HAL_GPIO_WritePin+0x2>
	...

08000494 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000494:	2201      	movs	r2, #1
 8000496:	4b01      	ldr	r3, [pc, #4]	; (800049c <HAL_PWR_EnableBkUpAccess+0x8>)
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	4770      	bx	lr
 800049c:	420e0020 	.word	0x420e0020

080004a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80004a4:	4605      	mov	r5, r0
 80004a6:	b908      	cbnz	r0, 80004ac <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80004a8:	2001      	movs	r0, #1
 80004aa:	e03c      	b.n	8000526 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ac:	6803      	ldr	r3, [r0, #0]
 80004ae:	07db      	lsls	r3, r3, #31
 80004b0:	d410      	bmi.n	80004d4 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004b2:	682b      	ldr	r3, [r5, #0]
 80004b4:	079f      	lsls	r7, r3, #30
 80004b6:	d45d      	bmi.n	8000574 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004b8:	682b      	ldr	r3, [r5, #0]
 80004ba:	0719      	lsls	r1, r3, #28
 80004bc:	f100 8094 	bmi.w	80005e8 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004c0:	682b      	ldr	r3, [r5, #0]
 80004c2:	075a      	lsls	r2, r3, #29
 80004c4:	f100 80be 	bmi.w	8000644 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004c8:	69e8      	ldr	r0, [r5, #28]
 80004ca:	2800      	cmp	r0, #0
 80004cc:	f040 812c 	bne.w	8000728 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80004d0:	2000      	movs	r0, #0
 80004d2:	e028      	b.n	8000526 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80004d4:	4c8f      	ldr	r4, [pc, #572]	; (8000714 <HAL_RCC_OscConfig+0x274>)
 80004d6:	6863      	ldr	r3, [r4, #4]
 80004d8:	f003 030c 	and.w	r3, r3, #12
 80004dc:	2b04      	cmp	r3, #4
 80004de:	d007      	beq.n	80004f0 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004e0:	6863      	ldr	r3, [r4, #4]
 80004e2:	f003 030c 	and.w	r3, r3, #12
 80004e6:	2b08      	cmp	r3, #8
 80004e8:	d109      	bne.n	80004fe <HAL_RCC_OscConfig+0x5e>
 80004ea:	6863      	ldr	r3, [r4, #4]
 80004ec:	03de      	lsls	r6, r3, #15
 80004ee:	d506      	bpl.n	80004fe <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004f0:	6823      	ldr	r3, [r4, #0]
 80004f2:	039c      	lsls	r4, r3, #14
 80004f4:	d5dd      	bpl.n	80004b2 <HAL_RCC_OscConfig+0x12>
 80004f6:	686b      	ldr	r3, [r5, #4]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d1da      	bne.n	80004b2 <HAL_RCC_OscConfig+0x12>
 80004fc:	e7d4      	b.n	80004a8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004fe:	686b      	ldr	r3, [r5, #4]
 8000500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000504:	d112      	bne.n	800052c <HAL_RCC_OscConfig+0x8c>
 8000506:	6823      	ldr	r3, [r4, #0]
 8000508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800050c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800050e:	f7ff fe5f 	bl	80001d0 <HAL_GetTick>
 8000512:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000514:	6823      	ldr	r3, [r4, #0]
 8000516:	0398      	lsls	r0, r3, #14
 8000518:	d4cb      	bmi.n	80004b2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800051a:	f7ff fe59 	bl	80001d0 <HAL_GetTick>
 800051e:	1b80      	subs	r0, r0, r6
 8000520:	2864      	cmp	r0, #100	; 0x64
 8000522:	d9f7      	bls.n	8000514 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000524:	2003      	movs	r0, #3
}
 8000526:	b002      	add	sp, #8
 8000528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800052c:	b99b      	cbnz	r3, 8000556 <HAL_RCC_OscConfig+0xb6>
 800052e:	6823      	ldr	r3, [r4, #0]
 8000530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000534:	6023      	str	r3, [r4, #0]
 8000536:	6823      	ldr	r3, [r4, #0]
 8000538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800053c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800053e:	f7ff fe47 	bl	80001d0 <HAL_GetTick>
 8000542:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000544:	6823      	ldr	r3, [r4, #0]
 8000546:	0399      	lsls	r1, r3, #14
 8000548:	d5b3      	bpl.n	80004b2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800054a:	f7ff fe41 	bl	80001d0 <HAL_GetTick>
 800054e:	1b80      	subs	r0, r0, r6
 8000550:	2864      	cmp	r0, #100	; 0x64
 8000552:	d9f7      	bls.n	8000544 <HAL_RCC_OscConfig+0xa4>
 8000554:	e7e6      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000556:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800055a:	6823      	ldr	r3, [r4, #0]
 800055c:	d103      	bne.n	8000566 <HAL_RCC_OscConfig+0xc6>
 800055e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000562:	6023      	str	r3, [r4, #0]
 8000564:	e7cf      	b.n	8000506 <HAL_RCC_OscConfig+0x66>
 8000566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800056a:	6023      	str	r3, [r4, #0]
 800056c:	6823      	ldr	r3, [r4, #0]
 800056e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000572:	e7cb      	b.n	800050c <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000574:	4c67      	ldr	r4, [pc, #412]	; (8000714 <HAL_RCC_OscConfig+0x274>)
 8000576:	6863      	ldr	r3, [r4, #4]
 8000578:	f013 0f0c 	tst.w	r3, #12
 800057c:	d007      	beq.n	800058e <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800057e:	6863      	ldr	r3, [r4, #4]
 8000580:	f003 030c 	and.w	r3, r3, #12
 8000584:	2b08      	cmp	r3, #8
 8000586:	d110      	bne.n	80005aa <HAL_RCC_OscConfig+0x10a>
 8000588:	6863      	ldr	r3, [r4, #4]
 800058a:	03da      	lsls	r2, r3, #15
 800058c:	d40d      	bmi.n	80005aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800058e:	6823      	ldr	r3, [r4, #0]
 8000590:	079b      	lsls	r3, r3, #30
 8000592:	d502      	bpl.n	800059a <HAL_RCC_OscConfig+0xfa>
 8000594:	692b      	ldr	r3, [r5, #16]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d186      	bne.n	80004a8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800059a:	6823      	ldr	r3, [r4, #0]
 800059c:	696a      	ldr	r2, [r5, #20]
 800059e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005a2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005a6:	6023      	str	r3, [r4, #0]
 80005a8:	e786      	b.n	80004b8 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005aa:	692a      	ldr	r2, [r5, #16]
 80005ac:	4b5a      	ldr	r3, [pc, #360]	; (8000718 <HAL_RCC_OscConfig+0x278>)
 80005ae:	b16a      	cbz	r2, 80005cc <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80005b0:	2201      	movs	r2, #1
 80005b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005b4:	f7ff fe0c 	bl	80001d0 <HAL_GetTick>
 80005b8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005ba:	6823      	ldr	r3, [r4, #0]
 80005bc:	079f      	lsls	r7, r3, #30
 80005be:	d4ec      	bmi.n	800059a <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005c0:	f7ff fe06 	bl	80001d0 <HAL_GetTick>
 80005c4:	1b80      	subs	r0, r0, r6
 80005c6:	2802      	cmp	r0, #2
 80005c8:	d9f7      	bls.n	80005ba <HAL_RCC_OscConfig+0x11a>
 80005ca:	e7ab      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005ce:	f7ff fdff 	bl	80001d0 <HAL_GetTick>
 80005d2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005d4:	6823      	ldr	r3, [r4, #0]
 80005d6:	0798      	lsls	r0, r3, #30
 80005d8:	f57f af6e 	bpl.w	80004b8 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005dc:	f7ff fdf8 	bl	80001d0 <HAL_GetTick>
 80005e0:	1b80      	subs	r0, r0, r6
 80005e2:	2802      	cmp	r0, #2
 80005e4:	d9f6      	bls.n	80005d4 <HAL_RCC_OscConfig+0x134>
 80005e6:	e79d      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005e8:	69aa      	ldr	r2, [r5, #24]
 80005ea:	4c4a      	ldr	r4, [pc, #296]	; (8000714 <HAL_RCC_OscConfig+0x274>)
 80005ec:	4b4b      	ldr	r3, [pc, #300]	; (800071c <HAL_RCC_OscConfig+0x27c>)
 80005ee:	b1da      	cbz	r2, 8000628 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80005f0:	2201      	movs	r2, #1
 80005f2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005f4:	f7ff fdec 	bl	80001d0 <HAL_GetTick>
 80005f8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005fc:	079b      	lsls	r3, r3, #30
 80005fe:	d50d      	bpl.n	800061c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000600:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000604:	4b46      	ldr	r3, [pc, #280]	; (8000720 <HAL_RCC_OscConfig+0x280>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	fbb3 f3f2 	udiv	r3, r3, r2
 800060c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800060e:	bf00      	nop
  }
  while (Delay --);
 8000610:	9b01      	ldr	r3, [sp, #4]
 8000612:	1e5a      	subs	r2, r3, #1
 8000614:	9201      	str	r2, [sp, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f9      	bne.n	800060e <HAL_RCC_OscConfig+0x16e>
 800061a:	e751      	b.n	80004c0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800061c:	f7ff fdd8 	bl	80001d0 <HAL_GetTick>
 8000620:	1b80      	subs	r0, r0, r6
 8000622:	2802      	cmp	r0, #2
 8000624:	d9e9      	bls.n	80005fa <HAL_RCC_OscConfig+0x15a>
 8000626:	e77d      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000628:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800062a:	f7ff fdd1 	bl	80001d0 <HAL_GetTick>
 800062e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000630:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000632:	079f      	lsls	r7, r3, #30
 8000634:	f57f af44 	bpl.w	80004c0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000638:	f7ff fdca 	bl	80001d0 <HAL_GetTick>
 800063c:	1b80      	subs	r0, r0, r6
 800063e:	2802      	cmp	r0, #2
 8000640:	d9f6      	bls.n	8000630 <HAL_RCC_OscConfig+0x190>
 8000642:	e76f      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000644:	4c33      	ldr	r4, [pc, #204]	; (8000714 <HAL_RCC_OscConfig+0x274>)
 8000646:	69e3      	ldr	r3, [r4, #28]
 8000648:	00d8      	lsls	r0, r3, #3
 800064a:	d424      	bmi.n	8000696 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 800064c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800064e:	69e3      	ldr	r3, [r4, #28]
 8000650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000654:	61e3      	str	r3, [r4, #28]
 8000656:	69e3      	ldr	r3, [r4, #28]
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000660:	4e30      	ldr	r6, [pc, #192]	; (8000724 <HAL_RCC_OscConfig+0x284>)
 8000662:	6833      	ldr	r3, [r6, #0]
 8000664:	05d9      	lsls	r1, r3, #23
 8000666:	d518      	bpl.n	800069a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000668:	68eb      	ldr	r3, [r5, #12]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d126      	bne.n	80006bc <HAL_RCC_OscConfig+0x21c>
 800066e:	6a23      	ldr	r3, [r4, #32]
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000676:	f7ff fdab 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800067a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800067e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000680:	6a23      	ldr	r3, [r4, #32]
 8000682:	079b      	lsls	r3, r3, #30
 8000684:	d53f      	bpl.n	8000706 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000686:	2f00      	cmp	r7, #0
 8000688:	f43f af1e 	beq.w	80004c8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800068c:	69e3      	ldr	r3, [r4, #28]
 800068e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000692:	61e3      	str	r3, [r4, #28]
 8000694:	e718      	b.n	80004c8 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000696:	2700      	movs	r7, #0
 8000698:	e7e2      	b.n	8000660 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800069a:	6833      	ldr	r3, [r6, #0]
 800069c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006a2:	f7ff fd95 	bl	80001d0 <HAL_GetTick>
 80006a6:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006a8:	6833      	ldr	r3, [r6, #0]
 80006aa:	05da      	lsls	r2, r3, #23
 80006ac:	d4dc      	bmi.n	8000668 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006ae:	f7ff fd8f 	bl	80001d0 <HAL_GetTick>
 80006b2:	eba0 0008 	sub.w	r0, r0, r8
 80006b6:	2864      	cmp	r0, #100	; 0x64
 80006b8:	d9f6      	bls.n	80006a8 <HAL_RCC_OscConfig+0x208>
 80006ba:	e733      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006bc:	b9ab      	cbnz	r3, 80006ea <HAL_RCC_OscConfig+0x24a>
 80006be:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006c0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006c4:	f023 0301 	bic.w	r3, r3, #1
 80006c8:	6223      	str	r3, [r4, #32]
 80006ca:	6a23      	ldr	r3, [r4, #32]
 80006cc:	f023 0304 	bic.w	r3, r3, #4
 80006d0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006d2:	f7ff fd7d 	bl	80001d0 <HAL_GetTick>
 80006d6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006d8:	6a23      	ldr	r3, [r4, #32]
 80006da:	0798      	lsls	r0, r3, #30
 80006dc:	d5d3      	bpl.n	8000686 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006de:	f7ff fd77 	bl	80001d0 <HAL_GetTick>
 80006e2:	1b80      	subs	r0, r0, r6
 80006e4:	4540      	cmp	r0, r8
 80006e6:	d9f7      	bls.n	80006d8 <HAL_RCC_OscConfig+0x238>
 80006e8:	e71c      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006ea:	2b05      	cmp	r3, #5
 80006ec:	6a23      	ldr	r3, [r4, #32]
 80006ee:	d103      	bne.n	80006f8 <HAL_RCC_OscConfig+0x258>
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6223      	str	r3, [r4, #32]
 80006f6:	e7ba      	b.n	800066e <HAL_RCC_OscConfig+0x1ce>
 80006f8:	f023 0301 	bic.w	r3, r3, #1
 80006fc:	6223      	str	r3, [r4, #32]
 80006fe:	6a23      	ldr	r3, [r4, #32]
 8000700:	f023 0304 	bic.w	r3, r3, #4
 8000704:	e7b6      	b.n	8000674 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000706:	f7ff fd63 	bl	80001d0 <HAL_GetTick>
 800070a:	eba0 0008 	sub.w	r0, r0, r8
 800070e:	42b0      	cmp	r0, r6
 8000710:	d9b6      	bls.n	8000680 <HAL_RCC_OscConfig+0x1e0>
 8000712:	e707      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
 8000714:	40021000 	.word	0x40021000
 8000718:	42420000 	.word	0x42420000
 800071c:	42420480 	.word	0x42420480
 8000720:	20000008 	.word	0x20000008
 8000724:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000728:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <HAL_RCC_OscConfig+0x334>)
 800072a:	685a      	ldr	r2, [r3, #4]
 800072c:	461c      	mov	r4, r3
 800072e:	f002 020c 	and.w	r2, r2, #12
 8000732:	2a08      	cmp	r2, #8
 8000734:	d03d      	beq.n	80007b2 <HAL_RCC_OscConfig+0x312>
 8000736:	2300      	movs	r3, #0
 8000738:	4e27      	ldr	r6, [pc, #156]	; (80007d8 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800073a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800073c:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800073e:	d12b      	bne.n	8000798 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000740:	f7ff fd46 	bl	80001d0 <HAL_GetTick>
 8000744:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000746:	6823      	ldr	r3, [r4, #0]
 8000748:	0199      	lsls	r1, r3, #6
 800074a:	d41f      	bmi.n	800078c <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800074c:	6a2b      	ldr	r3, [r5, #32]
 800074e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000752:	d105      	bne.n	8000760 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000754:	6862      	ldr	r2, [r4, #4]
 8000756:	68a9      	ldr	r1, [r5, #8]
 8000758:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800075c:	430a      	orrs	r2, r1
 800075e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000760:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000762:	6862      	ldr	r2, [r4, #4]
 8000764:	430b      	orrs	r3, r1
 8000766:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800076a:	4313      	orrs	r3, r2
 800076c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800076e:	2301      	movs	r3, #1
 8000770:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000772:	f7ff fd2d 	bl	80001d0 <HAL_GetTick>
 8000776:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000778:	6823      	ldr	r3, [r4, #0]
 800077a:	019a      	lsls	r2, r3, #6
 800077c:	f53f aea8 	bmi.w	80004d0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000780:	f7ff fd26 	bl	80001d0 <HAL_GetTick>
 8000784:	1b40      	subs	r0, r0, r5
 8000786:	2802      	cmp	r0, #2
 8000788:	d9f6      	bls.n	8000778 <HAL_RCC_OscConfig+0x2d8>
 800078a:	e6cb      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800078c:	f7ff fd20 	bl	80001d0 <HAL_GetTick>
 8000790:	1bc0      	subs	r0, r0, r7
 8000792:	2802      	cmp	r0, #2
 8000794:	d9d7      	bls.n	8000746 <HAL_RCC_OscConfig+0x2a6>
 8000796:	e6c5      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000798:	f7ff fd1a 	bl	80001d0 <HAL_GetTick>
 800079c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800079e:	6823      	ldr	r3, [r4, #0]
 80007a0:	019b      	lsls	r3, r3, #6
 80007a2:	f57f ae95 	bpl.w	80004d0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80007a6:	f7ff fd13 	bl	80001d0 <HAL_GetTick>
 80007aa:	1b40      	subs	r0, r0, r5
 80007ac:	2802      	cmp	r0, #2
 80007ae:	d9f6      	bls.n	800079e <HAL_RCC_OscConfig+0x2fe>
 80007b0:	e6b8      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80007b2:	2801      	cmp	r0, #1
 80007b4:	f43f aeb7 	beq.w	8000526 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80007b8:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80007ba:	6a2b      	ldr	r3, [r5, #32]
 80007bc:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80007c0:	429a      	cmp	r2, r3
 80007c2:	f47f ae71 	bne.w	80004a8 <HAL_RCC_OscConfig+0x8>
 80007c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80007c8:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80007cc:	1ac0      	subs	r0, r0, r3
 80007ce:	bf18      	it	ne
 80007d0:	2001      	movne	r0, #1
 80007d2:	e6a8      	b.n	8000526 <HAL_RCC_OscConfig+0x86>
 80007d4:	40021000 	.word	0x40021000
 80007d8:	42420060 	.word	0x42420060

080007dc <HAL_RCC_GetSysClockFreq>:
{
 80007dc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007e0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007e2:	ac02      	add	r4, sp, #8
 80007e4:	f103 0510 	add.w	r5, r3, #16
 80007e8:	4622      	mov	r2, r4
 80007ea:	6818      	ldr	r0, [r3, #0]
 80007ec:	6859      	ldr	r1, [r3, #4]
 80007ee:	3308      	adds	r3, #8
 80007f0:	c203      	stmia	r2!, {r0, r1}
 80007f2:	42ab      	cmp	r3, r5
 80007f4:	4614      	mov	r4, r2
 80007f6:	d1f7      	bne.n	80007e8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007f8:	2301      	movs	r3, #1
 80007fa:	f88d 3004 	strb.w	r3, [sp, #4]
 80007fe:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000800:	4911      	ldr	r1, [pc, #68]	; (8000848 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000802:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000806:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000808:	f003 020c 	and.w	r2, r3, #12
 800080c:	2a08      	cmp	r2, #8
 800080e:	d117      	bne.n	8000840 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000810:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000814:	a806      	add	r0, sp, #24
 8000816:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000818:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800081a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800081e:	d50c      	bpl.n	800083a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000820:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000822:	480a      	ldr	r0, [pc, #40]	; (800084c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000824:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000828:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800082a:	aa06      	add	r2, sp, #24
 800082c:	4413      	add	r3, r2
 800082e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000832:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000836:	b007      	add	sp, #28
 8000838:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <HAL_RCC_GetSysClockFreq+0x74>)
 800083c:	4350      	muls	r0, r2
 800083e:	e7fa      	b.n	8000836 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000842:	e7f8      	b.n	8000836 <HAL_RCC_GetSysClockFreq+0x5a>
 8000844:	080016e8 	.word	0x080016e8
 8000848:	40021000 	.word	0x40021000
 800084c:	007a1200 	.word	0x007a1200
 8000850:	003d0900 	.word	0x003d0900

08000854 <HAL_RCC_ClockConfig>:
{
 8000854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000858:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800085a:	4604      	mov	r4, r0
 800085c:	b910      	cbnz	r0, 8000864 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800085e:	2001      	movs	r0, #1
 8000860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000864:	4a45      	ldr	r2, [pc, #276]	; (800097c <HAL_RCC_ClockConfig+0x128>)
 8000866:	6813      	ldr	r3, [r2, #0]
 8000868:	f003 0307 	and.w	r3, r3, #7
 800086c:	428b      	cmp	r3, r1
 800086e:	d329      	bcc.n	80008c4 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000870:	6821      	ldr	r1, [r4, #0]
 8000872:	078e      	lsls	r6, r1, #30
 8000874:	d431      	bmi.n	80008da <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000876:	07ca      	lsls	r2, r1, #31
 8000878:	d444      	bmi.n	8000904 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800087a:	4a40      	ldr	r2, [pc, #256]	; (800097c <HAL_RCC_ClockConfig+0x128>)
 800087c:	6813      	ldr	r3, [r2, #0]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	429d      	cmp	r5, r3
 8000884:	d367      	bcc.n	8000956 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000886:	6822      	ldr	r2, [r4, #0]
 8000888:	4d3d      	ldr	r5, [pc, #244]	; (8000980 <HAL_RCC_ClockConfig+0x12c>)
 800088a:	f012 0f04 	tst.w	r2, #4
 800088e:	d16e      	bne.n	800096e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000890:	0713      	lsls	r3, r2, #28
 8000892:	d506      	bpl.n	80008a2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000894:	686b      	ldr	r3, [r5, #4]
 8000896:	6922      	ldr	r2, [r4, #16]
 8000898:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800089c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80008a0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80008a2:	f7ff ff9b 	bl	80007dc <HAL_RCC_GetSysClockFreq>
 80008a6:	686b      	ldr	r3, [r5, #4]
 80008a8:	4a36      	ldr	r2, [pc, #216]	; (8000984 <HAL_RCC_ClockConfig+0x130>)
 80008aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80008ae:	5cd3      	ldrb	r3, [r2, r3]
 80008b0:	40d8      	lsrs	r0, r3
 80008b2:	4b35      	ldr	r3, [pc, #212]	; (8000988 <HAL_RCC_ClockConfig+0x134>)
 80008b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80008b6:	4b35      	ldr	r3, [pc, #212]	; (800098c <HAL_RCC_ClockConfig+0x138>)
 80008b8:	6818      	ldr	r0, [r3, #0]
 80008ba:	f7ff fc47 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 80008be:	2000      	movs	r0, #0
 80008c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008c4:	6813      	ldr	r3, [r2, #0]
 80008c6:	f023 0307 	bic.w	r3, r3, #7
 80008ca:	430b      	orrs	r3, r1
 80008cc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80008ce:	6813      	ldr	r3, [r2, #0]
 80008d0:	f003 0307 	and.w	r3, r3, #7
 80008d4:	4299      	cmp	r1, r3
 80008d6:	d1c2      	bne.n	800085e <HAL_RCC_ClockConfig+0xa>
 80008d8:	e7ca      	b.n	8000870 <HAL_RCC_ClockConfig+0x1c>
 80008da:	4b29      	ldr	r3, [pc, #164]	; (8000980 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008dc:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80008e0:	bf1e      	ittt	ne
 80008e2:	685a      	ldrne	r2, [r3, #4]
 80008e4:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80008e8:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008ea:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008ec:	bf42      	ittt	mi
 80008ee:	685a      	ldrmi	r2, [r3, #4]
 80008f0:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80008f4:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	68a0      	ldr	r0, [r4, #8]
 80008fa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008fe:	4302      	orrs	r2, r0
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	e7b8      	b.n	8000876 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000904:	6862      	ldr	r2, [r4, #4]
 8000906:	4e1e      	ldr	r6, [pc, #120]	; (8000980 <HAL_RCC_ClockConfig+0x12c>)
 8000908:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800090a:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800090c:	d11b      	bne.n	8000946 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800090e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000912:	d0a4      	beq.n	800085e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000914:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000916:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800091a:	f023 0303 	bic.w	r3, r3, #3
 800091e:	4313      	orrs	r3, r2
 8000920:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000922:	f7ff fc55 	bl	80001d0 <HAL_GetTick>
 8000926:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000928:	6873      	ldr	r3, [r6, #4]
 800092a:	6862      	ldr	r2, [r4, #4]
 800092c:	f003 030c 	and.w	r3, r3, #12
 8000930:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000934:	d0a1      	beq.n	800087a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000936:	f7ff fc4b 	bl	80001d0 <HAL_GetTick>
 800093a:	1bc0      	subs	r0, r0, r7
 800093c:	4540      	cmp	r0, r8
 800093e:	d9f3      	bls.n	8000928 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000940:	2003      	movs	r0, #3
}
 8000942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000946:	2a02      	cmp	r2, #2
 8000948:	d102      	bne.n	8000950 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800094a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800094e:	e7e0      	b.n	8000912 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000950:	f013 0f02 	tst.w	r3, #2
 8000954:	e7dd      	b.n	8000912 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000956:	6813      	ldr	r3, [r2, #0]
 8000958:	f023 0307 	bic.w	r3, r3, #7
 800095c:	432b      	orrs	r3, r5
 800095e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000960:	6813      	ldr	r3, [r2, #0]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	429d      	cmp	r5, r3
 8000968:	f47f af79 	bne.w	800085e <HAL_RCC_ClockConfig+0xa>
 800096c:	e78b      	b.n	8000886 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800096e:	686b      	ldr	r3, [r5, #4]
 8000970:	68e1      	ldr	r1, [r4, #12]
 8000972:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000976:	430b      	orrs	r3, r1
 8000978:	606b      	str	r3, [r5, #4]
 800097a:	e789      	b.n	8000890 <HAL_RCC_ClockConfig+0x3c>
 800097c:	40022000 	.word	0x40022000
 8000980:	40021000 	.word	0x40021000
 8000984:	08001708 	.word	0x08001708
 8000988:	20000008 	.word	0x20000008
 800098c:	20000004 	.word	0x20000004

08000990 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800099a:	5cd3      	ldrb	r3, [r2, r3]
 800099c:	4a03      	ldr	r2, [pc, #12]	; (80009ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 800099e:	6810      	ldr	r0, [r2, #0]
}
 80009a0:	40d8      	lsrs	r0, r3
 80009a2:	4770      	bx	lr
 80009a4:	40021000 	.word	0x40021000
 80009a8:	08001718 	.word	0x08001718
 80009ac:	20000008 	.word	0x20000008

080009b0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80009b0:	6803      	ldr	r3, [r0, #0]
{
 80009b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80009b6:	07d9      	lsls	r1, r3, #31
{
 80009b8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80009ba:	d520      	bpl.n	80009fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009bc:	4c35      	ldr	r4, [pc, #212]	; (8000a94 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80009be:	69e3      	ldr	r3, [r4, #28]
 80009c0:	00da      	lsls	r2, r3, #3
 80009c2:	d432      	bmi.n	8000a2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80009c4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	69e3      	ldr	r3, [r4, #28]
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009cc:	61e3      	str	r3, [r4, #28]
 80009ce:	69e3      	ldr	r3, [r4, #28]
 80009d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009d8:	4e2f      	ldr	r6, [pc, #188]	; (8000a98 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80009da:	6833      	ldr	r3, [r6, #0]
 80009dc:	05db      	lsls	r3, r3, #23
 80009de:	d526      	bpl.n	8000a2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80009e0:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80009e2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80009e6:	d136      	bne.n	8000a56 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80009e8:	6a23      	ldr	r3, [r4, #32]
 80009ea:	686a      	ldr	r2, [r5, #4]
 80009ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009f0:	4313      	orrs	r3, r2
 80009f2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80009f4:	b11f      	cbz	r7, 80009fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80009f6:	69e3      	ldr	r3, [r4, #28]
 80009f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009fc:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80009fe:	6828      	ldr	r0, [r5, #0]
 8000a00:	0783      	lsls	r3, r0, #30
 8000a02:	d506      	bpl.n	8000a12 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000a04:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000a06:	68a9      	ldr	r1, [r5, #8]
 8000a08:	6853      	ldr	r3, [r2, #4]
 8000a0a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a0e:	430b      	orrs	r3, r1
 8000a10:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000a12:	f010 0010 	ands.w	r0, r0, #16
 8000a16:	d01b      	beq.n	8000a50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000a18:	4a1e      	ldr	r2, [pc, #120]	; (8000a94 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000a1a:	68e9      	ldr	r1, [r5, #12]
 8000a1c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000a1e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000a20:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000a24:	430b      	orrs	r3, r1
 8000a26:	6053      	str	r3, [r2, #4]
 8000a28:	e012      	b.n	8000a50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8000a2a:	2700      	movs	r7, #0
 8000a2c:	e7d4      	b.n	80009d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a2e:	6833      	ldr	r3, [r6, #0]
 8000a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a34:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000a36:	f7ff fbcb 	bl	80001d0 <HAL_GetTick>
 8000a3a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a3c:	6833      	ldr	r3, [r6, #0]
 8000a3e:	05d8      	lsls	r0, r3, #23
 8000a40:	d4ce      	bmi.n	80009e0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a42:	f7ff fbc5 	bl	80001d0 <HAL_GetTick>
 8000a46:	eba0 0008 	sub.w	r0, r0, r8
 8000a4a:	2864      	cmp	r0, #100	; 0x64
 8000a4c:	d9f6      	bls.n	8000a3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000a4e:	2003      	movs	r0, #3
}
 8000a50:	b002      	add	sp, #8
 8000a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000a56:	686a      	ldr	r2, [r5, #4]
 8000a58:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d0c3      	beq.n	80009e8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000a60:	2001      	movs	r0, #1
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000a64:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000a66:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000a68:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000a6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000a6e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000a70:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000a72:	07d9      	lsls	r1, r3, #31
 8000a74:	d5b8      	bpl.n	80009e8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000a76:	f7ff fbab 	bl	80001d0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a7a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000a7e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a80:	6a23      	ldr	r3, [r4, #32]
 8000a82:	079a      	lsls	r2, r3, #30
 8000a84:	d4b0      	bmi.n	80009e8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a86:	f7ff fba3 	bl	80001d0 <HAL_GetTick>
 8000a8a:	1b80      	subs	r0, r0, r6
 8000a8c:	4540      	cmp	r0, r8
 8000a8e:	d9f7      	bls.n	8000a80 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000a90:	e7dd      	b.n	8000a4e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40007000 	.word	0x40007000
 8000a9c:	42420440 	.word	0x42420440

08000aa0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8000aa0:	b570      	push	{r4, r5, r6, lr}
 8000aa2:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000aa4:	4b35      	ldr	r3, [pc, #212]	; (8000b7c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8000aa6:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000aa8:	ad02      	add	r5, sp, #8
 8000aaa:	f103 0610 	add.w	r6, r3, #16
 8000aae:	462a      	mov	r2, r5
 8000ab0:	6818      	ldr	r0, [r3, #0]
 8000ab2:	6859      	ldr	r1, [r3, #4]
 8000ab4:	3308      	adds	r3, #8
 8000ab6:	c203      	stmia	r2!, {r0, r1}
 8000ab8:	42b3      	cmp	r3, r6
 8000aba:	4615      	mov	r5, r2
 8000abc:	d1f7      	bne.n	8000aae <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000abe:	2301      	movs	r3, #1
 8000ac0:	f88d 3004 	strb.w	r3, [sp, #4]
 8000ac4:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8000ac6:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ac8:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8000acc:	d047      	beq.n	8000b5e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8000ace:	2c10      	cmp	r4, #16
 8000ad0:	d017      	beq.n	8000b02 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8000ad2:	2c01      	cmp	r4, #1
 8000ad4:	d14f      	bne.n	8000b76 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000ad6:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8000ada:	4a29      	ldr	r2, [pc, #164]	; (8000b80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000adc:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000ade:	4019      	ands	r1, r3
 8000ae0:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8000ae4:	d044      	beq.n	8000b70 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000aee:	d12d      	bne.n	8000b4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8000af0:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000af4:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8000af6:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 8000afa:	bf08      	it	eq
 8000afc:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8000afe:	b006      	add	sp, #24
 8000b00:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000b04:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8000b06:	6818      	ldr	r0, [r3, #0]
 8000b08:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8000b0c:	d0f7      	beq.n	8000afe <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000b0e:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8000b12:	a806      	add	r0, sp, #24
 8000b14:	4402      	add	r2, r0
 8000b16:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000b1a:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b1c:	bf41      	itttt	mi
 8000b1e:	685a      	ldrmi	r2, [r3, #4]
 8000b20:	a906      	addmi	r1, sp, #24
 8000b22:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8000b26:	1852      	addmi	r2, r2, r1
 8000b28:	bf44      	itt	mi
 8000b2a:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8000b2e:	4a15      	ldrmi	r2, [pc, #84]	; (8000b84 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000b30:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8000b32:	bf4c      	ite	mi
 8000b34:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000b38:	4a13      	ldrpl	r2, [pc, #76]	; (8000b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000b3a:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000b3c:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000b40:	d4dd      	bmi.n	8000afe <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8000b42:	2303      	movs	r3, #3
 8000b44:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8000b46:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000b4a:	e7d8      	b.n	8000afe <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8000b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000b50:	d111      	bne.n	8000b76 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8000b52:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8000b54:	f24f 4024 	movw	r0, #62500	; 0xf424
 8000b58:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000b5c:	e7cd      	b.n	8000afa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8000b5e:	f7ff ff17 	bl	8000990 <HAL_RCC_GetPCLK2Freq>
 8000b62:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	e7ea      	b.n	8000b46 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8000b70:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b74:	e7c3      	b.n	8000afe <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
  uint32_t temp_reg = 0U, frequency = 0U;
 8000b76:	2000      	movs	r0, #0
 8000b78:	e7c1      	b.n	8000afe <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8000b7a:	bf00      	nop
 8000b7c:	080016f8 	.word	0x080016f8
 8000b80:	40021000 	.word	0x40021000
 8000b84:	007a1200 	.word	0x007a1200
 8000b88:	003d0900 	.word	0x003d0900

08000b8c <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000b8c:	6803      	ldr	r3, [r0, #0]
{
 8000b8e:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000b90:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8000b92:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000b94:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 8000b96:	b295      	uxth	r5, r2
 8000b98:	b28c      	uxth	r4, r1
 8000b9a:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8000b9c:	bf1d      	ittte	ne
 8000b9e:	69d8      	ldrne	r0, [r3, #28]
 8000ba0:	b280      	uxthne	r0, r0
 8000ba2:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8000ba6:	b280      	uxtheq	r0, r0
 8000ba8:	bf08      	it	eq
 8000baa:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 8000bae:	bd30      	pop	{r4, r5, pc}

08000bb0 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8000bb0:	6803      	ldr	r3, [r0, #0]
 8000bb2:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8000bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 8000bb6:	b29b      	uxth	r3, r3
}
 8000bb8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bbc:	4770      	bx	lr

08000bbe <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8000bbe:	2300      	movs	r3, #0

  while (Value >= 10U)
 8000bc0:	2809      	cmp	r0, #9
 8000bc2:	d803      	bhi.n	8000bcc <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8000bc4:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8000bc8:	b2c0      	uxtb	r0, r0
 8000bca:	4770      	bx	lr
    Value -= 10U;
 8000bcc:	380a      	subs	r0, #10
    bcdhigh++;
 8000bce:	3301      	adds	r3, #1
    Value -= 10U;
 8000bd0:	b2c0      	uxtb	r0, r0
 8000bd2:	e7f5      	b.n	8000bc0 <RTC_ByteToBcd2+0x2>

08000bd4 <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 8000bd4:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8000bd6:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8000bd8:	f000 000f 	and.w	r0, r0, #15
 8000bdc:	fb02 0003 	mla	r0, r2, r3, r0
}
 8000be0:	b2c0      	uxtb	r0, r0
 8000be2:	4770      	bx	lr

08000be4 <RTC_WeekDayNum>:
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;

  if (nMonth < 3U)
 8000be4:	2902      	cmp	r1, #2
{
 8000be6:	b570      	push	{r4, r5, r6, lr}
 8000be8:	f04f 0317 	mov.w	r3, #23
  year = 2000U + nYear;
 8000bec:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
 8000bf0:	f04f 0609 	mov.w	r6, #9
  if (nMonth < 3U)
 8000bf4:	d81a      	bhi.n	8000c2c <RTC_WeekDayNum+0x48>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8000bf6:	434b      	muls	r3, r1
 8000bf8:	f200 74cf 	addw	r4, r0, #1999	; 0x7cf
 8000bfc:	fbb3 f0f6 	udiv	r0, r3, r6
 8000c00:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c04:	fbb4 f3f3 	udiv	r3, r4, r3
 8000c08:	3204      	adds	r2, #4
 8000c0a:	442a      	add	r2, r5
 8000c0c:	4410      	add	r0, r2
 8000c0e:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8000c12:	4418      	add	r0, r3
 8000c14:	2364      	movs	r3, #100	; 0x64
 8000c16:	fbb4 f4f3 	udiv	r4, r4, r3
 8000c1a:	1b00      	subs	r0, r0, r4
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8000c1c:	2307      	movs	r3, #7
 8000c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c22:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000c26:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 8000c28:	b2c0      	uxtb	r0, r0
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8000c2c:	fb03 f001 	mul.w	r0, r3, r1
 8000c30:	fbb0 f0f6 	udiv	r0, r0, r6
 8000c34:	3202      	adds	r2, #2
 8000c36:	442a      	add	r2, r5
 8000c38:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c3c:	4410      	add	r0, r2
 8000c3e:	2264      	movs	r2, #100	; 0x64
 8000c40:	fbb5 f3f3 	udiv	r3, r5, r3
 8000c44:	fbb5 f2f2 	udiv	r2, r5, r2
 8000c48:	eb00 0095 	add.w	r0, r0, r5, lsr #2
 8000c4c:	4418      	add	r0, r3
 8000c4e:	1a80      	subs	r0, r0, r2
 8000c50:	e7e4      	b.n	8000c1c <RTC_WeekDayNum+0x38>

08000c52 <RTC_EnterInitMode>:
{
 8000c52:	b538      	push	{r3, r4, r5, lr}
 8000c54:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8000c56:	f7ff fabb 	bl	80001d0 <HAL_GetTick>
 8000c5a:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8000c5c:	6823      	ldr	r3, [r4, #0]
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	0692      	lsls	r2, r2, #26
 8000c62:	d505      	bpl.n	8000c70 <RTC_EnterInitMode+0x1e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000c64:	685a      	ldr	r2, [r3, #4]
  return HAL_OK;
 8000c66:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000c68:	f042 0210 	orr.w	r2, r2, #16
 8000c6c:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 8000c6e:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8000c70:	f7ff faae 	bl	80001d0 <HAL_GetTick>
 8000c74:	1b40      	subs	r0, r0, r5
 8000c76:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c7a:	d9ef      	bls.n	8000c5c <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8000c7c:	2003      	movs	r0, #3
}
 8000c7e:	bd38      	pop	{r3, r4, r5, pc}

08000c80 <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c80:	6802      	ldr	r2, [r0, #0]
{
 8000c82:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c84:	6853      	ldr	r3, [r2, #4]
{
 8000c86:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c88:	f023 0310 	bic.w	r3, r3, #16
 8000c8c:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8000c8e:	f7ff fa9f 	bl	80001d0 <HAL_GetTick>
 8000c92:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8000c94:	6823      	ldr	r3, [r4, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	069b      	lsls	r3, r3, #26
 8000c9a:	d501      	bpl.n	8000ca0 <RTC_ExitInitMode+0x20>
  return HAL_OK;
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8000ca0:	f7ff fa96 	bl	80001d0 <HAL_GetTick>
 8000ca4:	1b40      	subs	r0, r0, r5
 8000ca6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000caa:	d9f3      	bls.n	8000c94 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8000cac:	2003      	movs	r0, #3
}
 8000cae:	bd38      	pop	{r3, r4, r5, pc}

08000cb0 <RTC_WriteTimeCounter>:
{
 8000cb0:	b538      	push	{r3, r4, r5, lr}
 8000cb2:	4605      	mov	r5, r0
 8000cb4:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8000cb6:	f7ff ffcc 	bl	8000c52 <RTC_EnterInitMode>
 8000cba:	b958      	cbnz	r0, 8000cd4 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8000cbc:	682b      	ldr	r3, [r5, #0]
 8000cbe:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8000cc0:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8000cc2:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8000cc4:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8000cc6:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8000cc8:	f7ff ffda 	bl	8000c80 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8000ccc:	3000      	adds	r0, #0
 8000cce:	bf18      	it	ne
 8000cd0:	2001      	movne	r0, #1
 8000cd2:	bd38      	pop	{r3, r4, r5, pc}
 8000cd4:	2001      	movs	r0, #1
}
 8000cd6:	bd38      	pop	{r3, r4, r5, pc}

08000cd8 <RTC_WriteAlarmCounter>:
{
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	4605      	mov	r5, r0
 8000cdc:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8000cde:	f7ff ffb8 	bl	8000c52 <RTC_EnterInitMode>
 8000ce2:	b958      	cbnz	r0, 8000cfc <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8000ce4:	682b      	ldr	r3, [r5, #0]
 8000ce6:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8000ce8:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8000cea:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8000cec:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8000cee:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8000cf0:	f7ff ffc6 	bl	8000c80 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8000cf4:	3000      	adds	r0, #0
 8000cf6:	bf18      	it	ne
 8000cf8:	2001      	movne	r0, #1
 8000cfa:	bd38      	pop	{r3, r4, r5, pc}
 8000cfc:	2001      	movs	r0, #1
}
 8000cfe:	bd38      	pop	{r3, r4, r5, pc}

08000d00 <HAL_RTC_SetTime>:
{
 8000d00:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 8000d02:	4604      	mov	r4, r0
 8000d04:	b1e0      	cbz	r0, 8000d40 <HAL_RTC_SetTime+0x40>
 8000d06:	b1d9      	cbz	r1, 8000d40 <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8000d08:	7c03      	ldrb	r3, [r0, #16]
 8000d0a:	2602      	movs	r6, #2
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d046      	beq.n	8000d9e <HAL_RTC_SetTime+0x9e>
 8000d10:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8000d12:	7446      	strb	r6, [r0, #17]
  __HAL_LOCK(hrtc);
 8000d14:	7403      	strb	r3, [r0, #16]
 8000d16:	7808      	ldrb	r0, [r1, #0]
 8000d18:	784e      	ldrb	r6, [r1, #1]
 8000d1a:	7889      	ldrb	r1, [r1, #2]
  if (Format == RTC_FORMAT_BIN)
 8000d1c:	b992      	cbnz	r2, 8000d44 <HAL_RTC_SetTime+0x44>
                              ((uint32_t)sTime->Minutes * 60U) + \
 8000d1e:	253c      	movs	r5, #60	; 0x3c
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8000d20:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                              ((uint32_t)sTime->Minutes * 60U) + \
 8000d24:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8000d26:	fb03 5000 	mla	r0, r3, r0, r5
 8000d2a:	1845      	adds	r5, r0, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8000d2c:	4629      	mov	r1, r5
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f7ff ffbe 	bl	8000cb0 <RTC_WriteTimeCounter>
 8000d34:	4606      	mov	r6, r0
 8000d36:	b1b0      	cbz	r0, 8000d66 <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8000d40:	2601      	movs	r6, #1
 8000d42:	e02c      	b.n	8000d9e <HAL_RTC_SetTime+0x9e>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8000d44:	f7ff ff46 	bl	8000bd4 <RTC_Bcd2ToByte>
 8000d48:	4605      	mov	r5, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	f7ff ff42 	bl	8000bd4 <RTC_Bcd2ToByte>
 8000d50:	233c      	movs	r3, #60	; 0x3c
 8000d52:	4358      	muls	r0, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8000d54:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000d58:	fb03 0505 	mla	r5, r3, r5, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	f7ff ff39 	bl	8000bd4 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8000d62:	4405      	add	r5, r0
 8000d64:	e7e2      	b.n	8000d2c <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8000d66:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000d68:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8000d6a:	6853      	ldr	r3, [r2, #4]
 8000d6c:	f023 0305 	bic.w	r3, r3, #5
 8000d70:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000d72:	f7ff ff1d 	bl	8000bb0 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8000d76:	1c43      	adds	r3, r0, #1
 8000d78:	d00d      	beq.n	8000d96 <HAL_RTC_SetTime+0x96>
      if (counter_alarm < counter_time)
 8000d7a:	4285      	cmp	r5, r0
 8000d7c:	d90b      	bls.n	8000d96 <HAL_RTC_SetTime+0x96>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000d7e:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8000d82:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8000d86:	4620      	mov	r0, r4
 8000d88:	f7ff ffa6 	bl	8000cd8 <RTC_WriteAlarmCounter>
 8000d8c:	b118      	cbz	r0, 8000d96 <HAL_RTC_SetTime+0x96>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000d8e:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8000d90:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000d92:	7463      	strb	r3, [r4, #17]
 8000d94:	e7d4      	b.n	8000d40 <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 8000d96:	2301      	movs	r3, #1
 8000d98:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	7423      	strb	r3, [r4, #16]
}
 8000d9e:	4630      	mov	r0, r6
 8000da0:	bd70      	pop	{r4, r5, r6, pc}
	...

08000da4 <HAL_RTC_GetTime>:
{
 8000da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000da8:	460d      	mov	r5, r1
 8000daa:	4690      	mov	r8, r2
  if ((hrtc == NULL) || (sTime == NULL))
 8000dac:	4604      	mov	r4, r0
 8000dae:	b910      	cbnz	r0, 8000db6 <HAL_RTC_GetTime+0x12>
    return HAL_ERROR;
 8000db0:	2001      	movs	r0, #1
 8000db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((hrtc == NULL) || (sTime == NULL))
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d0fa      	beq.n	8000db0 <HAL_RTC_GetTime+0xc>
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8000dba:	6803      	ldr	r3, [r0, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	075e      	lsls	r6, r3, #29
 8000dc0:	d4f6      	bmi.n	8000db0 <HAL_RTC_GetTime+0xc>
  counter_time = RTC_ReadTimeCounter(hrtc);
 8000dc2:	f7ff fee3 	bl	8000b8c <RTC_ReadTimeCounter>
  hours = counter_time / 3600U;
 8000dc6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000dca:	fbb0 f3f2 	udiv	r3, r0, r2
  counter_time = RTC_ReadTimeCounter(hrtc);
 8000dce:	4607      	mov	r7, r0
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8000dd0:	fb02 0213 	mls	r2, r2, r3, r0
 8000dd4:	203c      	movs	r0, #60	; 0x3c
 8000dd6:	fbb2 f1f0 	udiv	r1, r2, r0
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8000dda:	fb00 2211 	mls	r2, r0, r1, r2
  if (hours >= 24U)
 8000dde:	2b17      	cmp	r3, #23
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8000de0:	7069      	strb	r1, [r5, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8000de2:	70aa      	strb	r2, [r5, #2]
  if (hours >= 24U)
 8000de4:	f240 8085 	bls.w	8000ef2 <HAL_RTC_GetTime+0x14e>
    sTime->Hours = (hours % 24U);
 8000de8:	2118      	movs	r1, #24
 8000dea:	fbb3 f2f1 	udiv	r2, r3, r1
 8000dee:	fb01 3312 	mls	r3, r1, r2, r3
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000df2:	4620      	mov	r0, r4
    sTime->Hours = (hours % 24U);
 8000df4:	702b      	strb	r3, [r5, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000df6:	f7ff fedb 	bl	8000bb0 <RTC_ReadAlarmCounter>
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8000dfa:	1c41      	adds	r1, r0, #1
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000dfc:	4606      	mov	r6, r0
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8000dfe:	d004      	beq.n	8000e0a <HAL_RTC_GetTime+0x66>
 8000e00:	4287      	cmp	r7, r0
      counter_alarm = RTC_ALARM_RESETVALUE;
 8000e02:	bf2c      	ite	cs
 8000e04:	f04f 36ff 	movcs.w	r6, #4294967295	; 0xffffffff
      counter_alarm -= counter_time;
 8000e08:	1bc6      	subcc	r6, r0, r7
 8000e0a:	4b40      	ldr	r3, [pc, #256]	; (8000f0c <HAL_RTC_GetTime+0x168>)
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	fbb7 f9f3 	udiv	r9, r7, r3
 8000e12:	fb03 7919 	mls	r9, r3, r9, r7
 8000e16:	4649      	mov	r1, r9
 8000e18:	f7ff ff4a 	bl	8000cb0 <RTC_WriteTimeCounter>
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	d1c7      	bne.n	8000db0 <HAL_RTC_GetTime+0xc>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8000e20:	1c72      	adds	r2, r6, #1
 8000e22:	d02f      	beq.n	8000e84 <HAL_RTC_GetTime+0xe0>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000e24:	eb09 0106 	add.w	r1, r9, r6
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000e28:	4620      	mov	r0, r4
 8000e2a:	f7ff ff55 	bl	8000cd8 <RTC_WriteAlarmCounter>
 8000e2e:	2800      	cmp	r0, #0
 8000e30:	d1be      	bne.n	8000db0 <HAL_RTC_GetTime+0xc>
    days_elapsed = (hours / 24U);
 8000e32:	4b36      	ldr	r3, [pc, #216]	; (8000f0c <HAL_RTC_GetTime+0x168>)
  for (loop = 0U; loop < DayElapsed; loop++)
 8000e34:	2600      	movs	r6, #0
    days_elapsed = (hours / 24U);
 8000e36:	fbb7 f7f3 	udiv	r7, r7, r3
  if ((nYear % 100U) != 0U)
 8000e3a:	f04f 0e64 	mov.w	lr, #100	; 0x64
  if ((nYear % 400U) == 0U)
 8000e3e:	f44f 7cc8 	mov.w	ip, #400	; 0x190
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8000e42:	f240 29d5 	movw	r9, #725	; 0x2d5
  year = hrtc->DateToUpdate.Year;
 8000e46:	7be0      	ldrb	r0, [r4, #15]
  month = hrtc->DateToUpdate.Month;
 8000e48:	7b61      	ldrb	r1, [r4, #13]
  day = hrtc->DateToUpdate.Date;
 8000e4a:	7ba2      	ldrb	r2, [r4, #14]
  for (loop = 0U; loop < DayElapsed; loop++)
 8000e4c:	42b7      	cmp	r7, r6
 8000e4e:	d11b      	bne.n	8000e88 <HAL_RTC_GetTime+0xe4>
  hrtc->DateToUpdate.Month = month;
 8000e50:	b2c9      	uxtb	r1, r1
  hrtc->DateToUpdate.Date = day;
 8000e52:	b2d2      	uxtb	r2, r2
  hrtc->DateToUpdate.Year = year;
 8000e54:	73e0      	strb	r0, [r4, #15]
  hrtc->DateToUpdate.Month = month;
 8000e56:	7361      	strb	r1, [r4, #13]
  hrtc->DateToUpdate.Date = day;
 8000e58:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8000e5a:	f7ff fec3 	bl	8000be4 <RTC_WeekDayNum>
 8000e5e:	7320      	strb	r0, [r4, #12]
  if (Format != RTC_FORMAT_BIN)
 8000e60:	f1b8 0f00 	cmp.w	r8, #0
 8000e64:	d00b      	beq.n	8000e7e <HAL_RTC_GetTime+0xda>
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8000e66:	7828      	ldrb	r0, [r5, #0]
 8000e68:	f7ff fea9 	bl	8000bbe <RTC_ByteToBcd2>
 8000e6c:	7028      	strb	r0, [r5, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8000e6e:	7868      	ldrb	r0, [r5, #1]
 8000e70:	f7ff fea5 	bl	8000bbe <RTC_ByteToBcd2>
 8000e74:	7068      	strb	r0, [r5, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8000e76:	78a8      	ldrb	r0, [r5, #2]
 8000e78:	f7ff fea1 	bl	8000bbe <RTC_ByteToBcd2>
 8000e7c:	70a8      	strb	r0, [r5, #2]
  return HAL_OK;
 8000e7e:	2000      	movs	r0, #0
 8000e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000e84:	4631      	mov	r1, r6
 8000e86:	e7cf      	b.n	8000e28 <HAL_RTC_GetTime+0x84>
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8000e88:	1e4b      	subs	r3, r1, #1
 8000e8a:	2b09      	cmp	r3, #9
 8000e8c:	d835      	bhi.n	8000efa <HAL_RTC_GetTime+0x156>
 8000e8e:	fa29 f303 	lsr.w	r3, r9, r3
 8000e92:	07db      	lsls	r3, r3, #31
 8000e94:	d42f      	bmi.n	8000ef6 <HAL_RTC_GetTime+0x152>
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8000e96:	f021 0302 	bic.w	r3, r1, #2
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	d001      	beq.n	8000ea2 <HAL_RTC_GetTime+0xfe>
 8000e9e:	2b09      	cmp	r3, #9
 8000ea0:	d104      	bne.n	8000eac <HAL_RTC_GetTime+0x108>
      if (day < 30U)
 8000ea2:	2a1d      	cmp	r2, #29
      if (day < 31U)
 8000ea4:	d906      	bls.n	8000eb4 <HAL_RTC_GetTime+0x110>
        month++;
 8000ea6:	3101      	adds	r1, #1
        day = 1U;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	e02d      	b.n	8000f08 <HAL_RTC_GetTime+0x164>
    else if (month == 2U)
 8000eac:	2902      	cmp	r1, #2
 8000eae:	d12b      	bne.n	8000f08 <HAL_RTC_GetTime+0x164>
      if (day < 28U)
 8000eb0:	2a1b      	cmp	r2, #27
 8000eb2:	d801      	bhi.n	8000eb8 <HAL_RTC_GetTime+0x114>
        day++;
 8000eb4:	3201      	adds	r2, #1
 8000eb6:	e027      	b.n	8000f08 <HAL_RTC_GetTime+0x164>
      else if (day == 28U)
 8000eb8:	2a1c      	cmp	r2, #28
 8000eba:	d113      	bne.n	8000ee4 <HAL_RTC_GetTime+0x140>
        if (RTC_IsLeapYear(year))
 8000ebc:	b282      	uxth	r2, r0
  if ((nYear % 4U) != 0U)
 8000ebe:	0793      	lsls	r3, r2, #30
 8000ec0:	d112      	bne.n	8000ee8 <HAL_RTC_GetTime+0x144>
  if ((nYear % 100U) != 0U)
 8000ec2:	fbb2 f3fe 	udiv	r3, r2, lr
 8000ec6:	fb0e 2313 	mls	r3, lr, r3, r2
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	b97b      	cbnz	r3, 8000eee <HAL_RTC_GetTime+0x14a>
  if ((nYear % 400U) == 0U)
 8000ece:	fbb2 f3fc 	udiv	r3, r2, ip
 8000ed2:	fb0c 2313 	mls	r3, ip, r3, r2
 8000ed6:	b29b      	uxth	r3, r3
          day++;
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bf16      	itet	ne
 8000edc:	2201      	movne	r2, #1
 8000ede:	221d      	moveq	r2, #29
 8000ee0:	2103      	movne	r1, #3
 8000ee2:	e011      	b.n	8000f08 <HAL_RTC_GetTime+0x164>
      else if (day == 29U)
 8000ee4:	2a1d      	cmp	r2, #29
 8000ee6:	d10f      	bne.n	8000f08 <HAL_RTC_GetTime+0x164>
          day = 1U;
 8000ee8:	2201      	movs	r2, #1
          month++;
 8000eea:	2103      	movs	r1, #3
 8000eec:	e00c      	b.n	8000f08 <HAL_RTC_GetTime+0x164>
          day++;
 8000eee:	221d      	movs	r2, #29
 8000ef0:	e00a      	b.n	8000f08 <HAL_RTC_GetTime+0x164>
    sTime->Hours = hours;
 8000ef2:	702b      	strb	r3, [r5, #0]
 8000ef4:	e7b4      	b.n	8000e60 <HAL_RTC_GetTime+0xbc>
      if (day < 31U)
 8000ef6:	2a1e      	cmp	r2, #30
 8000ef8:	e7d4      	b.n	8000ea4 <HAL_RTC_GetTime+0x100>
        (month == 8U) || (month == 10U) || (month == 12U))
 8000efa:	290c      	cmp	r1, #12
 8000efc:	d1cb      	bne.n	8000e96 <HAL_RTC_GetTime+0xf2>
      if (day < 31U)
 8000efe:	2a1e      	cmp	r2, #30
 8000f00:	d9d8      	bls.n	8000eb4 <HAL_RTC_GetTime+0x110>
          day = 1U;
 8000f02:	2201      	movs	r2, #1
          month = 1U;
 8000f04:	4611      	mov	r1, r2
          year++;
 8000f06:	3001      	adds	r0, #1
  for (loop = 0U; loop < DayElapsed; loop++)
 8000f08:	3601      	adds	r6, #1
 8000f0a:	e79f      	b.n	8000e4c <HAL_RTC_GetTime+0xa8>
 8000f0c:	00015180 	.word	0x00015180

08000f10 <HAL_RTC_SetDate>:
{
 8000f10:	b570      	push	{r4, r5, r6, lr}
 8000f12:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 8000f14:	4604      	mov	r4, r0
 8000f16:	b358      	cbz	r0, 8000f70 <HAL_RTC_SetDate+0x60>
 8000f18:	b351      	cbz	r1, 8000f70 <HAL_RTC_SetDate+0x60>
  __HAL_LOCK(hrtc);
 8000f1a:	7c03      	ldrb	r3, [r0, #16]
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d027      	beq.n	8000f72 <HAL_RTC_SetDate+0x62>
 8000f22:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8000f24:	7460      	strb	r0, [r4, #17]
  __HAL_LOCK(hrtc);
 8000f26:	7423      	strb	r3, [r4, #16]
 8000f28:	78c8      	ldrb	r0, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8000f2a:	bb1a      	cbnz	r2, 8000f74 <HAL_RTC_SetDate+0x64>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8000f2c:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8000f2e:	784b      	ldrb	r3, [r1, #1]
 8000f30:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8000f32:	788b      	ldrb	r3, [r1, #2]
 8000f34:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8000f36:	7ba2      	ldrb	r2, [r4, #14]
 8000f38:	7b61      	ldrb	r1, [r4, #13]
 8000f3a:	7be0      	ldrb	r0, [r4, #15]
 8000f3c:	f7ff fe52 	bl	8000be4 <RTC_WeekDayNum>
 8000f40:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8000f42:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8000f44:	4620      	mov	r0, r4
 8000f46:	f7ff fe21 	bl	8000b8c <RTC_ReadTimeCounter>
  if (hours > 24U)
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <HAL_RTC_SetDate+0xac>)
 8000f4c:	4298      	cmp	r0, r3
 8000f4e:	d930      	bls.n	8000fb2 <HAL_RTC_SetDate+0xa2>
 8000f50:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 8000f54:	fbb0 f5f3 	udiv	r5, r0, r3
 8000f58:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	4629      	mov	r1, r5
 8000f60:	f7ff fea6 	bl	8000cb0 <RTC_WriteTimeCounter>
 8000f64:	4606      	mov	r6, r0
 8000f66:	b188      	cbz	r0, 8000f8c <HAL_RTC_SetDate+0x7c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8000f70:	2001      	movs	r0, #1
}
 8000f72:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8000f74:	f7ff fe2e 	bl	8000bd4 <RTC_Bcd2ToByte>
 8000f78:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8000f7a:	7848      	ldrb	r0, [r1, #1]
 8000f7c:	f7ff fe2a 	bl	8000bd4 <RTC_Bcd2ToByte>
 8000f80:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8000f82:	7888      	ldrb	r0, [r1, #2]
 8000f84:	f7ff fe26 	bl	8000bd4 <RTC_Bcd2ToByte>
 8000f88:	73a0      	strb	r0, [r4, #14]
 8000f8a:	e7d4      	b.n	8000f36 <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f7ff fe0f 	bl	8000bb0 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8000f92:	1c43      	adds	r3, r0, #1
 8000f94:	d00d      	beq.n	8000fb2 <HAL_RTC_SetDate+0xa2>
      if (counter_alarm < counter_time)
 8000f96:	4285      	cmp	r5, r0
 8000f98:	d90b      	bls.n	8000fb2 <HAL_RTC_SetDate+0xa2>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000f9a:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8000f9e:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	f7ff fe98 	bl	8000cd8 <RTC_WriteAlarmCounter>
 8000fa8:	b118      	cbz	r0, 8000fb2 <HAL_RTC_SetDate+0xa2>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000faa:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8000fac:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000fae:	7463      	strb	r3, [r4, #17]
 8000fb0:	e7de      	b.n	8000f70 <HAL_RTC_SetDate+0x60>
  hrtc->State = HAL_RTC_STATE_READY ;
 8000fb2:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8000fb4:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8000fb6:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8000fb8:	7420      	strb	r0, [r4, #16]
  return HAL_OK;
 8000fba:	bd70      	pop	{r4, r5, r6, pc}
 8000fbc:	00015f8f 	.word	0x00015f8f

08000fc0 <HAL_RTC_WaitForSynchro>:
{
 8000fc0:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	b1a8      	cbz	r0, 8000ff2 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8000fc6:	6802      	ldr	r2, [r0, #0]
 8000fc8:	6853      	ldr	r3, [r2, #4]
 8000fca:	f023 0308 	bic.w	r3, r3, #8
 8000fce:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8000fd0:	f7ff f8fe 	bl	80001d0 <HAL_GetTick>
 8000fd4:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8000fd6:	6823      	ldr	r3, [r4, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	071b      	lsls	r3, r3, #28
 8000fdc:	d501      	bpl.n	8000fe2 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8000fde:	2000      	movs	r0, #0
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8000fe2:	f7ff f8f5 	bl	80001d0 <HAL_GetTick>
 8000fe6:	1b40      	subs	r0, r0, r5
 8000fe8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000fec:	d9f3      	bls.n	8000fd6 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8000fee:	2003      	movs	r0, #3
}
 8000ff0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	bd38      	pop	{r3, r4, r5, pc}
	...

08000ff8 <HAL_RTC_Init>:
{
 8000ff8:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	b170      	cbz	r0, 800101c <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8000ffe:	7c43      	ldrb	r3, [r0, #17]
 8001000:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001004:	b913      	cbnz	r3, 800100c <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001006:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8001008:	f000 f96e 	bl	80012e8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800100c:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800100e:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001010:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001012:	f7ff ffd5 	bl	8000fc0 <HAL_RTC_WaitForSynchro>
 8001016:	b118      	cbz	r0, 8001020 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001018:	2304      	movs	r3, #4
 800101a:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 800101c:	2001      	movs	r0, #1
}
 800101e:	bd10      	pop	{r4, pc}
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001020:	4620      	mov	r0, r4
 8001022:	f7ff fe16 	bl	8000c52 <RTC_EnterInitMode>
 8001026:	2800      	cmp	r0, #0
 8001028:	d1f6      	bne.n	8001018 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800102a:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800102c:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800102e:	6853      	ldr	r3, [r2, #4]
 8001030:	f023 0307 	bic.w	r3, r3, #7
 8001034:	6053      	str	r3, [r2, #4]
 8001036:	4a17      	ldr	r2, [pc, #92]	; (8001094 <HAL_RTC_Init+0x9c>)
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001038:	b118      	cbz	r0, 8001042 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800103a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800103c:	f021 0101 	bic.w	r1, r1, #1
 8001040:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001042:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001044:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8001048:	4303      	orrs	r3, r0
 800104a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800104c:	6860      	ldr	r0, [r4, #4]
 800104e:	1c43      	adds	r3, r0, #1
 8001050:	d105      	bne.n	800105e <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff fd24 	bl	8000aa0 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8001058:	2800      	cmp	r0, #0
 800105a:	d0dd      	beq.n	8001018 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 800105c:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800105e:	6822      	ldr	r2, [r4, #0]
 8001060:	6893      	ldr	r3, [r2, #8]
 8001062:	f023 030f 	bic.w	r3, r3, #15
 8001066:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800106a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800106c:	68d3      	ldr	r3, [r2, #12]
 800106e:	b280      	uxth	r0, r0
 8001070:	0c1b      	lsrs	r3, r3, #16
 8001072:	041b      	lsls	r3, r3, #16
 8001074:	4318      	orrs	r0, r3
 8001076:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001078:	4620      	mov	r0, r4
 800107a:	f7ff fe01 	bl	8000c80 <RTC_ExitInitMode>
 800107e:	2301      	movs	r3, #1
 8001080:	b110      	cbz	r0, 8001088 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001082:	2204      	movs	r2, #4
 8001084:	7462      	strb	r2, [r4, #17]
 8001086:	e7c9      	b.n	800101c <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Year = 0x00U;
 8001088:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800108a:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800108c:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 800108e:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8001090:	bd10      	pop	{r4, pc}
 8001092:	bf00      	nop
 8001094:	40006c00 	.word	0x40006c00

08001098 <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC


void DWT_Init(void)
{
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001098:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <DWT_Init+0x18>)
 800109a:	6813      	ldr	r3, [r2, #0]
 800109c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010a0:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <DWT_Init+0x1c>)
 80010a4:	6813      	ldr	r3, [r2, #0]
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000edfc 	.word	0xe000edfc
 80010b4:	e0001000 	.word	0xe0001000

080010b8 <delay_micros>:
}

void delay_micros(uint32_t us)
{
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <delay_micros+0x1c>)
 80010ba:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <delay_micros+0x20>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	fbb3 f3f2 	udiv	r3, r3, r2
    DWT->CYCCNT = 0U; // обнуляем счётчик
 80010c2:	2200      	movs	r2, #0
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 80010c4:	4358      	muls	r0, r3
    DWT->CYCCNT = 0U; // обнуляем счётчик
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <delay_micros+0x24>)
 80010c8:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	4290      	cmp	r0, r2
 80010ce:	d8fc      	bhi.n	80010ca <delay_micros+0x12>
}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008
 80010d8:	000f4240 	.word	0x000f4240
 80010dc:	e0001000 	.word	0xe0001000

080010e0 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e0:	2228      	movs	r2, #40	; 0x28
{
 80010e2:	b530      	push	{r4, r5, lr}
 80010e4:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	eb0d 0002 	add.w	r0, sp, r2
 80010ea:	2100      	movs	r1, #0
 80010ec:	f000 fae8 	bl	80016c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	2214      	movs	r2, #20
 80010f2:	2100      	movs	r1, #0
 80010f4:	eb0d 0002 	add.w	r0, sp, r2
 80010f8:	f000 fae2 	bl	80016c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010fc:	2210      	movs	r2, #16
 80010fe:	2100      	movs	r1, #0
 8001100:	a801      	add	r0, sp, #4
 8001102:	f000 fadd 	bl	80016c0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001106:	2305      	movs	r3, #5
 8001108:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800110a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800110e:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001110:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001112:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001114:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001116:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111a:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800111c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800111e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001120:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001122:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001124:	f7ff f9bc 	bl	80004a0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001128:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800112a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001130:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001132:	4629      	mov	r1, r5
 8001134:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001136:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001138:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113c:	9506      	str	r5, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800113e:	f7ff fb89 	bl	8000854 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001142:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001146:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001148:	9401      	str	r4, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800114a:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114c:	f7ff fc30 	bl	80009b0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001150:	b015      	add	sp, #84	; 0x54
 8001152:	bd30      	pop	{r4, r5, pc}

08001154 <main>:
{
 8001154:	b500      	push	{lr}
 8001156:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8001158:	f7ff f81c 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 800115c:	f7ff ffc0 	bl	80010e0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	2210      	movs	r2, #16
 8001162:	2100      	movs	r1, #0
 8001164:	a806      	add	r0, sp, #24
 8001166:	f000 faab 	bl	80016c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	4b4a      	ldr	r3, [pc, #296]	; (8001294 <main+0x140>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIO_Pin|CLK_Pin, GPIO_PIN_RESET);
 800116c:	f44f 7140 	mov.w	r1, #768	; 0x300
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001170:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, DIO_Pin|CLK_Pin, GPIO_PIN_RESET);
 8001172:	4849      	ldr	r0, [pc, #292]	; (8001298 <main+0x144>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001174:	f042 0210 	orr.w	r2, r2, #16
 8001178:	619a      	str	r2, [r3, #24]
 800117a:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : DIO_Pin CLK_Pin */
  GPIO_InitStruct.Pin = DIO_Pin|CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117c:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	f002 0210 	and.w	r2, r2, #16
 8001182:	9202      	str	r2, [sp, #8]
 8001184:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001186:	699a      	ldr	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8001188:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800118a:	f042 0220 	orr.w	r2, r2, #32
 800118e:	619a      	str	r2, [r3, #24]
 8001190:	699a      	ldr	r2, [r3, #24]
  hrtc.Instance = RTC;
 8001192:	4d42      	ldr	r5, [pc, #264]	; (800129c <main+0x148>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001194:	f002 0220 	and.w	r2, r2, #32
 8001198:	9203      	str	r2, [sp, #12]
 800119a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119c:	699a      	ldr	r2, [r3, #24]
 800119e:	f042 0204 	orr.w	r2, r2, #4
 80011a2:	619a      	str	r2, [r3, #24]
 80011a4:	699a      	ldr	r2, [r3, #24]
 80011a6:	f002 0204 	and.w	r2, r2, #4
 80011aa:	9204      	str	r2, [sp, #16]
 80011ac:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	699a      	ldr	r2, [r3, #24]
 80011b0:	f042 0208 	orr.w	r2, r2, #8
 80011b4:	619a      	str	r2, [r3, #24]
 80011b6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, DIO_Pin|CLK_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	9305      	str	r3, [sp, #20]
 80011c0:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOB, DIO_Pin|CLK_Pin, GPIO_PIN_RESET);
 80011c2:	f7ff f961 	bl	8000488 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DIO_Pin|CLK_Pin;
 80011c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ca:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011cc:	2311      	movs	r3, #17
 80011ce:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d2:	a906      	add	r1, sp, #24
 80011d4:	4830      	ldr	r0, [pc, #192]	; (8001298 <main+0x144>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d8:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	f7ff f86d 	bl	80002b8 <HAL_GPIO_Init>
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80011de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e6:	492e      	ldr	r1, [pc, #184]	; (80012a0 <main+0x14c>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011e8:	4628      	mov	r0, r5
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80011ea:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  RTC_TimeTypeDef sTime = {0};
 80011ee:	f8ad 4004 	strh.w	r4, [sp, #4]
 80011f2:	f88d 4006 	strb.w	r4, [sp, #6]
  RTC_DateTypeDef DateToUpdate = {0};
 80011f6:	9406      	str	r4, [sp, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011f8:	f7ff fefe 	bl	8000ff8 <HAL_RTC_Init>
  sTime.Hours = 6;
 80011fc:	2306      	movs	r3, #6
 80011fe:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 43;
 8001202:	232b      	movs	r3, #43	; 0x2b
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001204:	4622      	mov	r2, r4
 8001206:	a901      	add	r1, sp, #4
 8001208:	4628      	mov	r0, r5
  sTime.Minutes = 43;
 800120a:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0;
 800120e:	f88d 4006 	strb.w	r4, [sp, #6]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001212:	f7ff fd75 	bl	8000d00 <HAL_RTC_SetTime>
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8001216:	4622      	mov	r2, r4
 8001218:	a906      	add	r1, sp, #24
 800121a:	4628      	mov	r0, r5
  DateToUpdate.Year = 0;
 800121c:	f88d 401b 	strb.w	r4, [sp, #27]
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001220:	f88d 6018 	strb.w	r6, [sp, #24]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001224:	f88d 6019 	strb.w	r6, [sp, #25]
  DateToUpdate.Date = 1;
 8001228:	f88d 601a 	strb.w	r6, [sp, #26]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 800122c:	f7ff fe70 	bl	8000f10 <HAL_RTC_SetDate>
  DWT_Init();        // инициализация DWT
 8001230:	f7ff ff32 	bl	8001098 <DWT_Init>
  set_brightness(7); // 0 - 7 яркость
 8001234:	2007      	movs	r0, #7
 8001236:	f000 f94f 	bl	80014d8 <set_brightness>
  clearDisplay();    // очистка дисплея
 800123a:	f000 f9e3 	bl	8001604 <clearDisplay>
  RTC_TimeTypeDef sTime = {0};           // структура для времени
 800123e:	f8ad 4004 	strh.w	r4, [sp, #4]
 8001242:	f88d 4006 	strb.w	r4, [sp, #6]
  int8_t TimeDisp[4] = {0,};
 8001246:	9406      	str	r4, [sp, #24]
	  TimeDisp[0] = sTime.Hours / 10;
 8001248:	240a      	movs	r4, #10
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800124a:	a901      	add	r1, sp, #4
 800124c:	2200      	movs	r2, #0
 800124e:	4628      	mov	r0, r5
 8001250:	f7ff fda8 	bl	8000da4 <HAL_RTC_GetTime>
	  point(0); // двоеточие, 0 - мигает, 1 - горит постоянно, удалить функцию - нет двоеточия
 8001254:	2000      	movs	r0, #0
 8001256:	f000 f945 	bl	80014e4 <point>
	  TimeDisp[0] = sTime.Hours / 10;
 800125a:	f89d 2004 	ldrb.w	r2, [sp, #4]
	  display_mass(TimeDisp);
 800125e:	a806      	add	r0, sp, #24
	  TimeDisp[0] = sTime.Hours / 10;
 8001260:	fbb2 f3f4 	udiv	r3, r2, r4
 8001264:	f88d 3018 	strb.w	r3, [sp, #24]
	  TimeDisp[1] = sTime.Hours % 10;
 8001268:	fb04 2313 	mls	r3, r4, r3, r2
	  TimeDisp[2] = sTime.Minutes / 10;
 800126c:	f89d 2005 	ldrb.w	r2, [sp, #5]
	  TimeDisp[1] = sTime.Hours % 10;
 8001270:	f88d 3019 	strb.w	r3, [sp, #25]
	  TimeDisp[2] = sTime.Minutes / 10;
 8001274:	fbb2 f3f4 	udiv	r3, r2, r4
 8001278:	f88d 301a 	strb.w	r3, [sp, #26]
	  TimeDisp[3] = sTime.Minutes % 10;
 800127c:	fb04 2313 	mls	r3, r4, r3, r2
 8001280:	f88d 301b 	strb.w	r3, [sp, #27]
	  display_mass(TimeDisp);
 8001284:	f000 f956 	bl	8001534 <display_mass>
	  HAL_Delay(1000);
 8001288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800128c:	f7fe ffa6 	bl	80001dc <HAL_Delay>
 8001290:	e7db      	b.n	800124a <main+0xf6>
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000
 8001298:	40010c00 	.word	0x40010c00
 800129c:	20000030 	.word	0x20000030
 80012a0:	40002800 	.word	0x40002800

080012a4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_MspInit+0x3c>)
{
 80012a6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80012a8:	699a      	ldr	r2, [r3, #24]
 80012aa:	f042 0201 	orr.w	r2, r2, #1
 80012ae:	619a      	str	r2, [r3, #24]
 80012b0:	699a      	ldr	r2, [r3, #24]
 80012b2:	f002 0201 	and.w	r2, r2, #1
 80012b6:	9200      	str	r2, [sp, #0]
 80012b8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	69da      	ldr	r2, [r3, #28]
 80012bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012c0:	61da      	str	r2, [r3, #28]
 80012c2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012ce:	6853      	ldr	r3, [r2, #4]
 80012d0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012da:	b002      	add	sp, #8
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010000 	.word	0x40010000

080012e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012e8:	b507      	push	{r0, r1, r2, lr}
  if(hrtc->Instance==RTC)
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_RTC_MspInit+0x30>)
 80012ec:	6802      	ldr	r2, [r0, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d10e      	bne.n	8001310 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80012f2:	f7ff f8cf 	bl	8000494 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_RTC_MspInit+0x34>)
 80012f8:	69da      	ldr	r2, [r3, #28]
 80012fa:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80012fe:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001300:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <HAL_RTC_MspInit+0x38>)
 800130e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001310:	b003      	add	sp, #12
 8001312:	f85d fb04 	ldr.w	pc, [sp], #4
 8001316:	bf00      	nop
 8001318:	40002800 	.word	0x40002800
 800131c:	40021000 	.word	0x40021000
 8001320:	4242043c 	.word	0x4242043c

08001324 <NMI_Handler>:
 8001324:	4770      	bx	lr

08001326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001326:	e7fe      	b.n	8001326 <HardFault_Handler>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	e7fe      	b.n	8001328 <MemManage_Handler>

0800132a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132a:	e7fe      	b.n	800132a <BusFault_Handler>

0800132c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800132c:	e7fe      	b.n	800132c <UsageFault_Handler>

0800132e <SVC_Handler>:
 800132e:	4770      	bx	lr

08001330 <DebugMon_Handler>:
 8001330:	4770      	bx	lr

08001332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001332:	4770      	bx	lr

08001334 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001334:	f7fe bf40 	b.w	80001b8 <HAL_IncTick>

08001338 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <SystemInit+0x40>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	f042 0201 	orr.w	r2, r2, #1
 8001340:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001342:	6859      	ldr	r1, [r3, #4]
 8001344:	4a0d      	ldr	r2, [pc, #52]	; (800137c <SystemInit+0x44>)
 8001346:	400a      	ands	r2, r1
 8001348:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001350:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001354:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800135c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001364:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001366:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800136a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800136c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <SystemInit+0x48>)
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000
 800137c:	f8ff0000 	.word	0xf8ff0000
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <writeByte>:
uint8_t point_flag = 0;

static int8_t TubeTab[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f, 0x77,0x7c,0x40}; //0~9, A(10), b(11), -(12)

void writeByte(int8_t wr_data)
{
 8001384:	b570      	push	{r4, r5, r6, lr}
 8001386:	4605      	mov	r5, r0
 8001388:	2408      	movs	r4, #8
  uint8_t count = 0;

  for(uint8_t i = 0; i < 8; i++)
  {
    CLK_LOW;
 800138a:	4e2a      	ldr	r6, [pc, #168]	; (8001434 <writeByte+0xb0>)
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001392:	4828      	ldr	r0, [pc, #160]	; (8001434 <writeByte+0xb0>)
 8001394:	f7ff f878 	bl	8000488 <HAL_GPIO_WritePin>

    if(wr_data & 0x01) DIO_HIGH;
 8001398:	f015 0201 	ands.w	r2, r5, #1
 800139c:	bf18      	it	ne
 800139e:	2201      	movne	r2, #1
    else DIO_LOW;
 80013a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a4:	4630      	mov	r0, r6
 80013a6:	f7ff f86f 	bl	8000488 <HAL_GPIO_WritePin>

    delay_micros(6);
 80013aa:	2006      	movs	r0, #6
 80013ac:	f7ff fe84 	bl	80010b8 <delay_micros>
    wr_data >>= 1;
    delay_micros(6);
 80013b0:	2006      	movs	r0, #6
 80013b2:	f7ff fe81 	bl	80010b8 <delay_micros>
    CLK_HIGH;
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013bc:	481d      	ldr	r0, [pc, #116]	; (8001434 <writeByte+0xb0>)
 80013be:	f7ff f863 	bl	8000488 <HAL_GPIO_WritePin>
 80013c2:	3c01      	subs	r4, #1
    delay_micros(8);
 80013c4:	2008      	movs	r0, #8
 80013c6:	f7ff fe77 	bl	80010b8 <delay_micros>
  for(uint8_t i = 0; i < 8; i++)
 80013ca:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    wr_data >>= 1;
 80013ce:	ea4f 0565 	mov.w	r5, r5, asr #1
  for(uint8_t i = 0; i < 8; i++)
 80013d2:	d1db      	bne.n	800138c <writeByte+0x8>
  }

  CLK_LOW;
 80013d4:	4622      	mov	r2, r4
 80013d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013da:	4816      	ldr	r0, [pc, #88]	; (8001434 <writeByte+0xb0>)
 80013dc:	f7ff f854 	bl	8000488 <HAL_GPIO_WritePin>
  delay_micros(6);
 80013e0:	2006      	movs	r0, #6
 80013e2:	f7ff fe69 	bl	80010b8 <delay_micros>
  DIO_HIGH;
 80013e6:	2201      	movs	r2, #1
 80013e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ec:	4811      	ldr	r0, [pc, #68]	; (8001434 <writeByte+0xb0>)
 80013ee:	f7ff f84b 	bl	8000488 <HAL_GPIO_WritePin>
  delay_micros(6);
 80013f2:	2006      	movs	r0, #6
 80013f4:	f7ff fe60 	bl	80010b8 <delay_micros>
  CLK_HIGH;
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013fe:	480d      	ldr	r0, [pc, #52]	; (8001434 <writeByte+0xb0>)
 8001400:	f7ff f842 	bl	8000488 <HAL_GPIO_WritePin>
  delay_micros(8);
 8001404:	2008      	movs	r0, #8
 8001406:	f7ff fe57 	bl	80010b8 <delay_micros>

  while(DIO_READ)
 800140a:	4d0a      	ldr	r5, [pc, #40]	; (8001434 <writeByte+0xb0>)
{
 800140c:	24c8      	movs	r4, #200	; 0xc8
  while(DIO_READ)
 800140e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001412:	4808      	ldr	r0, [pc, #32]	; (8001434 <writeByte+0xb0>)
 8001414:	f7ff f832 	bl	800047c <HAL_GPIO_ReadPin>
 8001418:	b900      	cbnz	r0, 800141c <writeByte+0x98>
    {
    	DIO_LOW;
    	count = 0;
    }
  }
}
 800141a:	bd70      	pop	{r4, r5, r6, pc}
 800141c:	3c01      	subs	r4, #1
    if(count == 200)
 800141e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001422:	d1f4      	bne.n	800140e <writeByte+0x8a>
    	DIO_LOW;
 8001424:	4622      	mov	r2, r4
 8001426:	f44f 7180 	mov.w	r1, #256	; 0x100
 800142a:	4628      	mov	r0, r5
 800142c:	f7ff f82c 	bl	8000488 <HAL_GPIO_WritePin>
 8001430:	e7ec      	b.n	800140c <writeByte+0x88>
 8001432:	bf00      	nop
 8001434:	40010c00 	.word	0x40010c00

08001438 <start>:

void start(void)
{
 8001438:	b510      	push	{r4, lr}
	CLK_HIGH;
 800143a:	4c12      	ldr	r4, [pc, #72]	; (8001484 <start+0x4c>)
 800143c:	2201      	movs	r2, #1
 800143e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001442:	4620      	mov	r0, r4
 8001444:	f7ff f820 	bl	8000488 <HAL_GPIO_WritePin>
	delay_micros(6);
 8001448:	2006      	movs	r0, #6
 800144a:	f7ff fe35 	bl	80010b8 <delay_micros>
	DIO_HIGH;
 800144e:	2201      	movs	r2, #1
 8001450:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001454:	4620      	mov	r0, r4
 8001456:	f7ff f817 	bl	8000488 <HAL_GPIO_WritePin>
	delay_micros(6);
 800145a:	2006      	movs	r0, #6
 800145c:	f7ff fe2c 	bl	80010b8 <delay_micros>
	DIO_LOW;
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001466:	4620      	mov	r0, r4
 8001468:	f7ff f80e 	bl	8000488 <HAL_GPIO_WritePin>
	delay_micros(6);
 800146c:	2006      	movs	r0, #6
 800146e:	f7ff fe23 	bl	80010b8 <delay_micros>
	CLK_LOW;
 8001472:	4620      	mov	r0, r4
}
 8001474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	CLK_LOW;
 8001478:	2200      	movs	r2, #0
 800147a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147e:	f7ff b803 	b.w	8000488 <HAL_GPIO_WritePin>
 8001482:	bf00      	nop
 8001484:	40010c00 	.word	0x40010c00

08001488 <stop>:

void stop(void)
{
 8001488:	b510      	push	{r4, lr}
	CLK_LOW;
 800148a:	4c12      	ldr	r4, [pc, #72]	; (80014d4 <stop+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001492:	4620      	mov	r0, r4
 8001494:	f7fe fff8 	bl	8000488 <HAL_GPIO_WritePin>
	delay_micros(6);
 8001498:	2006      	movs	r0, #6
 800149a:	f7ff fe0d 	bl	80010b8 <delay_micros>
	DIO_LOW;
 800149e:	2200      	movs	r2, #0
 80014a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014a4:	4620      	mov	r0, r4
 80014a6:	f7fe ffef 	bl	8000488 <HAL_GPIO_WritePin>
	delay_micros(6);
 80014aa:	2006      	movs	r0, #6
 80014ac:	f7ff fe04 	bl	80010b8 <delay_micros>
	CLK_HIGH;
 80014b0:	2201      	movs	r2, #1
 80014b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7fe ffe6 	bl	8000488 <HAL_GPIO_WritePin>
	delay_micros(6);
 80014bc:	2006      	movs	r0, #6
 80014be:	f7ff fdfb 	bl	80010b8 <delay_micros>
	DIO_HIGH;
 80014c2:	4620      	mov	r0, r4
}
 80014c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	DIO_HIGH;
 80014c8:	2201      	movs	r2, #1
 80014ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ce:	f7fe bfdb 	b.w	8000488 <HAL_GPIO_WritePin>
 80014d2:	bf00      	nop
 80014d4:	40010c00 	.word	0x40010c00

080014d8 <set_brightness>:
	display(0x03, 0x7f);
}

void set_brightness(uint8_t brightness)
{
	Cmd_DispCtrl = 0x88 + brightness;
 80014d8:	4b01      	ldr	r3, [pc, #4]	; (80014e0 <set_brightness+0x8>)
 80014da:	3878      	subs	r0, #120	; 0x78
 80014dc:	7018      	strb	r0, [r3, #0]
 80014de:	4770      	bx	lr
 80014e0:	20000028 	.word	0x20000028

080014e4 <point>:
}

void point(uint8_t cmd)
{
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <point+0x14>)
	if(cmd == 0) point_flag = (~point_flag) & 0x01;
 80014e6:	b928      	cbnz	r0, 80014f4 <point+0x10>
 80014e8:	7813      	ldrb	r3, [r2, #0]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	f003 0301 	and.w	r3, r3, #1
	else point_flag = 1;
 80014f0:	7013      	strb	r3, [r2, #0]
 80014f2:	4770      	bx	lr
 80014f4:	2301      	movs	r3, #1
 80014f6:	e7fb      	b.n	80014f0 <point+0xc>
 80014f8:	20000029 	.word	0x20000029

080014fc <coding_mass>:
}

void coding_mass(int8_t DispData[])
{
 80014fc:	b530      	push	{r4, r5, lr}
	uint8_t PointData;

	if(point_flag == 1) PointData = 0x80;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <coding_mass+0x30>)
	else PointData = 0;

	for(uint8_t i = 0; i < 4; i++)
	{
		if(DispData[i] == 0x7f) DispData[i] = 0x00;
 8001500:	2500      	movs	r5, #0
	if(point_flag == 1) PointData = 0x80;
 8001502:	781b      	ldrb	r3, [r3, #0]
		else DispData[i] = TubeTab[DispData[i]] + PointData;
 8001504:	4c0a      	ldr	r4, [pc, #40]	; (8001530 <coding_mass+0x34>)
	else PointData = 0;
 8001506:	2b01      	cmp	r3, #1
 8001508:	bf0c      	ite	eq
 800150a:	2180      	moveq	r1, #128	; 0x80
 800150c:	2100      	movne	r1, #0
 800150e:	1d02      	adds	r2, r0, #4
		if(DispData[i] == 0x7f) DispData[i] = 0x00;
 8001510:	f990 3000 	ldrsb.w	r3, [r0]
 8001514:	3001      	adds	r0, #1
 8001516:	2b7f      	cmp	r3, #127	; 0x7f
		else DispData[i] = TubeTab[DispData[i]] + PointData;
 8001518:	bf17      	itett	ne
 800151a:	5ce3      	ldrbne	r3, [r4, r3]
		if(DispData[i] == 0x7f) DispData[i] = 0x00;
 800151c:	f800 5c01 	strbeq.w	r5, [r0, #-1]
		else DispData[i] = TubeTab[DispData[i]] + PointData;
 8001520:	185b      	addne	r3, r3, r1
 8001522:	f800 3c01 	strbne.w	r3, [r0, #-1]
	for(uint8_t i = 0; i < 4; i++)
 8001526:	4290      	cmp	r0, r2
 8001528:	d1f2      	bne.n	8001510 <coding_mass+0x14>
	}
}
 800152a:	bd30      	pop	{r4, r5, pc}
 800152c:	20000029 	.word	0x20000029
 8001530:	08001720 	.word	0x08001720

08001534 <display_mass>:
{
 8001534:	2300      	movs	r3, #0
 8001536:	b537      	push	{r0, r1, r2, r4, r5, lr}
		SegData[i] = DispData[i];
 8001538:	ad01      	add	r5, sp, #4
 800153a:	5cc2      	ldrb	r2, [r0, r3]
 800153c:	555a      	strb	r2, [r3, r5]
 800153e:	3301      	adds	r3, #1
	for(uint8_t i = 0; i < 4; i++)
 8001540:	2b04      	cmp	r3, #4
 8001542:	d1fa      	bne.n	800153a <display_mass+0x6>
	coding_mass(SegData);
 8001544:	4628      	mov	r0, r5
 8001546:	f7ff ffd9 	bl	80014fc <coding_mass>
	start();
 800154a:	f7ff ff75 	bl	8001438 <start>
	writeByte(ADDR_AUTO);
 800154e:	2040      	movs	r0, #64	; 0x40
 8001550:	f7ff ff18 	bl	8001384 <writeByte>
	stop();
 8001554:	f7ff ff98 	bl	8001488 <stop>
	start();
 8001558:	f7ff ff6e 	bl	8001438 <start>
	writeByte(0xc0);
 800155c:	f06f 003f 	mvn.w	r0, #63	; 0x3f
 8001560:	f7ff ff10 	bl	8001384 <writeByte>
 8001564:	2400      	movs	r4, #0
		writeByte(SegData[i]);
 8001566:	5728      	ldrsb	r0, [r5, r4]
 8001568:	3401      	adds	r4, #1
 800156a:	f7ff ff0b 	bl	8001384 <writeByte>
	for(uint8_t i = 0; i < 4; i++)
 800156e:	2c04      	cmp	r4, #4
 8001570:	d1f9      	bne.n	8001566 <display_mass+0x32>
	stop();
 8001572:	f7ff ff89 	bl	8001488 <stop>
	start();
 8001576:	f7ff ff5f 	bl	8001438 <start>
	writeByte(Cmd_DispCtrl);
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <display_mass+0x58>)
 800157c:	f993 0000 	ldrsb.w	r0, [r3]
 8001580:	f7ff ff00 	bl	8001384 <writeByte>
	stop();
 8001584:	f7ff ff80 	bl	8001488 <stop>
}
 8001588:	b003      	add	sp, #12
 800158a:	bd30      	pop	{r4, r5, pc}
 800158c:	20000028 	.word	0x20000028

08001590 <coding>:

int8_t coding(int8_t DispData)
{
	uint8_t PointData;

	if(point_flag == 1) PointData = 0x80;
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <coding+0x20>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b01      	cmp	r3, #1
	else PointData = 0;
 8001596:	bf0c      	ite	eq
 8001598:	2380      	moveq	r3, #128	; 0x80
 800159a:	2300      	movne	r3, #0

	if(DispData == 0x7f) DispData = 0x00 + PointData;
 800159c:	287f      	cmp	r0, #127	; 0x7f
	else DispData = TubeTab[DispData] + PointData;
 800159e:	bf17      	itett	ne
 80015a0:	4a04      	ldrne	r2, [pc, #16]	; (80015b4 <coding+0x24>)
	if(DispData == 0x7f) DispData = 0x00 + PointData;
 80015a2:	b258      	sxtbeq	r0, r3
	else DispData = TubeTab[DispData] + PointData;
 80015a4:	5c10      	ldrbne	r0, [r2, r0]
 80015a6:	18c0      	addne	r0, r0, r3
 80015a8:	bf18      	it	ne
 80015aa:	b240      	sxtbne	r0, r0

	return DispData;
}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000029 	.word	0x20000029
 80015b4:	08001720 	.word	0x08001720

080015b8 <display>:
{
 80015b8:	b538      	push	{r3, r4, r5, lr}
 80015ba:	4605      	mov	r5, r0
	SegData = coding(DispData);
 80015bc:	4608      	mov	r0, r1
 80015be:	f7ff ffe7 	bl	8001590 <coding>
 80015c2:	4604      	mov	r4, r0
	start();
 80015c4:	f7ff ff38 	bl	8001438 <start>
	writeByte(ADDR_FIXED);
 80015c8:	2044      	movs	r0, #68	; 0x44
 80015ca:	f7ff fedb 	bl	8001384 <writeByte>
	stop();
 80015ce:	f7ff ff5b 	bl	8001488 <stop>
	start();
 80015d2:	f7ff ff31 	bl	8001438 <start>
	writeByte(BitAddr | 0xc0);
 80015d6:	f065 003f 	orn	r0, r5, #63	; 0x3f
 80015da:	f7ff fed3 	bl	8001384 <writeByte>
	writeByte(SegData);
 80015de:	4620      	mov	r0, r4
 80015e0:	f7ff fed0 	bl	8001384 <writeByte>
	stop();
 80015e4:	f7ff ff50 	bl	8001488 <stop>
	start();
 80015e8:	f7ff ff26 	bl	8001438 <start>
	writeByte(Cmd_DispCtrl);
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <display+0x48>)
 80015ee:	f993 0000 	ldrsb.w	r0, [r3]
 80015f2:	f7ff fec7 	bl	8001384 <writeByte>
}
 80015f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	stop();
 80015fa:	f7ff bf45 	b.w	8001488 <stop>
 80015fe:	bf00      	nop
 8001600:	20000028 	.word	0x20000028

08001604 <clearDisplay>:
{
 8001604:	b508      	push	{r3, lr}
	display(0x00, 0x7f);
 8001606:	217f      	movs	r1, #127	; 0x7f
 8001608:	2000      	movs	r0, #0
 800160a:	f7ff ffd5 	bl	80015b8 <display>
	display(0x01, 0x7f);
 800160e:	217f      	movs	r1, #127	; 0x7f
 8001610:	2001      	movs	r0, #1
 8001612:	f7ff ffd1 	bl	80015b8 <display>
	display(0x02, 0x7f);
 8001616:	217f      	movs	r1, #127	; 0x7f
 8001618:	2002      	movs	r0, #2
 800161a:	f7ff ffcd 	bl	80015b8 <display>
}
 800161e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	display(0x03, 0x7f);
 8001622:	217f      	movs	r1, #127	; 0x7f
 8001624:	2003      	movs	r0, #3
 8001626:	f7ff bfc7 	b.w	80015b8 <display>
	...

0800162c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800162c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800162e:	e003      	b.n	8001638 <LoopCopyDataInit>

08001630 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001632:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001634:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001636:	3104      	adds	r1, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001638:	480a      	ldr	r0, [pc, #40]	; (8001664 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800163c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800163e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001640:	d3f6      	bcc.n	8001630 <CopyDataInit>
  ldr r2, =_sbss
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001644:	e002      	b.n	800164c <LoopFillZerobss>

08001646 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001648:	f842 3b04 	str.w	r3, [r2], #4

0800164c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800164e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001650:	d3f9      	bcc.n	8001646 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001652:	f7ff fe71 	bl	8001338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001656:	f000 f80f 	bl	8001678 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800165a:	f7ff fd7b 	bl	8001154 <main>
  bx lr
 800165e:	4770      	bx	lr
  ldr r3, =_sidata
 8001660:	08001738 	.word	0x08001738
  ldr r0, =_sdata
 8001664:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001668:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800166c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001670:	20000044 	.word	0x20000044

08001674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001674:	e7fe      	b.n	8001674 <ADC1_2_IRQHandler>
	...

08001678 <__libc_init_array>:
 8001678:	b570      	push	{r4, r5, r6, lr}
 800167a:	2500      	movs	r5, #0
 800167c:	4e0c      	ldr	r6, [pc, #48]	; (80016b0 <__libc_init_array+0x38>)
 800167e:	4c0d      	ldr	r4, [pc, #52]	; (80016b4 <__libc_init_array+0x3c>)
 8001680:	1ba4      	subs	r4, r4, r6
 8001682:	10a4      	asrs	r4, r4, #2
 8001684:	42a5      	cmp	r5, r4
 8001686:	d109      	bne.n	800169c <__libc_init_array+0x24>
 8001688:	f000 f822 	bl	80016d0 <_init>
 800168c:	2500      	movs	r5, #0
 800168e:	4e0a      	ldr	r6, [pc, #40]	; (80016b8 <__libc_init_array+0x40>)
 8001690:	4c0a      	ldr	r4, [pc, #40]	; (80016bc <__libc_init_array+0x44>)
 8001692:	1ba4      	subs	r4, r4, r6
 8001694:	10a4      	asrs	r4, r4, #2
 8001696:	42a5      	cmp	r5, r4
 8001698:	d105      	bne.n	80016a6 <__libc_init_array+0x2e>
 800169a:	bd70      	pop	{r4, r5, r6, pc}
 800169c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016a0:	4798      	blx	r3
 80016a2:	3501      	adds	r5, #1
 80016a4:	e7ee      	b.n	8001684 <__libc_init_array+0xc>
 80016a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016aa:	4798      	blx	r3
 80016ac:	3501      	adds	r5, #1
 80016ae:	e7f2      	b.n	8001696 <__libc_init_array+0x1e>
 80016b0:	08001730 	.word	0x08001730
 80016b4:	08001730 	.word	0x08001730
 80016b8:	08001730 	.word	0x08001730
 80016bc:	08001734 	.word	0x08001734

080016c0 <memset>:
 80016c0:	4603      	mov	r3, r0
 80016c2:	4402      	add	r2, r0
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d100      	bne.n	80016ca <memset+0xa>
 80016c8:	4770      	bx	lr
 80016ca:	f803 1b01 	strb.w	r1, [r3], #1
 80016ce:	e7f9      	b.n	80016c4 <memset+0x4>

080016d0 <_init>:
 80016d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016d2:	bf00      	nop
 80016d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016d6:	bc08      	pop	{r3}
 80016d8:	469e      	mov	lr, r3
 80016da:	4770      	bx	lr

080016dc <_fini>:
 80016dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016de:	bf00      	nop
 80016e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016e2:	bc08      	pop	{r3}
 80016e4:	469e      	mov	lr, r3
 80016e6:	4770      	bx	lr
