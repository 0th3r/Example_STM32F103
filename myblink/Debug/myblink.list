
myblink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ac8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000bd4  08000bd4  00010bd4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000bf4  08000bf4  00010bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000bf8  08000bf8  00010bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08000bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2000000c  08000c08  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000002c  08000c08  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000075cb  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000014d7  00000000  00000000  00027600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e80  00000000  00000000  00028ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000320  00000000  00000000  00029958  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000420  00000000  00000000  00029c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001e05  00000000  00000000  0002a098  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001517  00000000  00000000  0002be9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002d3b4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000690  00000000  00000000  0002d430  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000bbc 	.word	0x08000bbc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000bbc 	.word	0x08000bbc

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f892 	bl	800028c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f000 fc62 	bl	8000a74 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfaf      	iteee	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
 800026e:	f000 000f 	andlt.w	r0, r0, #15
 8000272:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfa5      	ittet	ge
 8000276:	b2d2      	uxtbge	r2, r2
 8000278:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800028c:	3801      	subs	r0, #1
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000292:	d20a      	bcs.n	80002aa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e000e010 	.word	0xe000e010
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002bc:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002be:	4616      	mov	r6, r2
 80002c0:	4b65      	ldr	r3, [pc, #404]	; (8000458 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002c2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000468 <HAL_GPIO_Init+0x1b0>
 80002c6:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800046c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002ca:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002ce:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002d0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002d4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002d8:	45a0      	cmp	r8, r4
 80002da:	d17f      	bne.n	80003dc <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002dc:	684d      	ldr	r5, [r1, #4]
 80002de:	2d12      	cmp	r5, #18
 80002e0:	f000 80af 	beq.w	8000442 <HAL_GPIO_Init+0x18a>
 80002e4:	f200 8088 	bhi.w	80003f8 <HAL_GPIO_Init+0x140>
 80002e8:	2d02      	cmp	r5, #2
 80002ea:	f000 80a7 	beq.w	800043c <HAL_GPIO_Init+0x184>
 80002ee:	d87c      	bhi.n	80003ea <HAL_GPIO_Init+0x132>
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	f000 808e 	beq.w	8000412 <HAL_GPIO_Init+0x15a>
 80002f6:	2d01      	cmp	r5, #1
 80002f8:	f000 809e 	beq.w	8000438 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002fc:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000300:	2cff      	cmp	r4, #255	; 0xff
 8000302:	bf93      	iteet	ls
 8000304:	4682      	movls	sl, r0
 8000306:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800030a:	3d08      	subhi	r5, #8
 800030c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000310:	bf92      	itee	ls
 8000312:	00b5      	lslls	r5, r6, #2
 8000314:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000318:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800031a:	fa09 f805 	lsl.w	r8, r9, r5
 800031e:	ea2b 0808 	bic.w	r8, fp, r8
 8000322:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000326:	bf88      	it	hi
 8000328:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800032c:	ea48 0505 	orr.w	r5, r8, r5
 8000330:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000334:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000338:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800033c:	d04e      	beq.n	80003dc <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800033e:	4d47      	ldr	r5, [pc, #284]	; (800045c <HAL_GPIO_Init+0x1a4>)
 8000340:	4f46      	ldr	r7, [pc, #280]	; (800045c <HAL_GPIO_Init+0x1a4>)
 8000342:	69ad      	ldr	r5, [r5, #24]
 8000344:	f026 0803 	bic.w	r8, r6, #3
 8000348:	f045 0501 	orr.w	r5, r5, #1
 800034c:	61bd      	str	r5, [r7, #24]
 800034e:	69bd      	ldr	r5, [r7, #24]
 8000350:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000354:	f005 0501 	and.w	r5, r5, #1
 8000358:	9501      	str	r5, [sp, #4]
 800035a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800035e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000362:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000364:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000368:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800036c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000370:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000374:	4d3a      	ldr	r5, [pc, #232]	; (8000460 <HAL_GPIO_Init+0x1a8>)
 8000376:	42a8      	cmp	r0, r5
 8000378:	d068      	beq.n	800044c <HAL_GPIO_Init+0x194>
 800037a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800037e:	42a8      	cmp	r0, r5
 8000380:	d066      	beq.n	8000450 <HAL_GPIO_Init+0x198>
 8000382:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000386:	42a8      	cmp	r0, r5
 8000388:	d064      	beq.n	8000454 <HAL_GPIO_Init+0x19c>
 800038a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800038e:	42a8      	cmp	r0, r5
 8000390:	bf0c      	ite	eq
 8000392:	2503      	moveq	r5, #3
 8000394:	2504      	movne	r5, #4
 8000396:	fa05 f50b 	lsl.w	r5, r5, fp
 800039a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800039e:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003a2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003a4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003a8:	bf14      	ite	ne
 80003aa:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003ac:	43a5      	biceq	r5, r4
 80003ae:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003b0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003b2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003b6:	bf14      	ite	ne
 80003b8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003ba:	43a5      	biceq	r5, r4
 80003bc:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003be:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003c0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003c4:	bf14      	ite	ne
 80003c6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003c8:	43a5      	biceq	r5, r4
 80003ca:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003cc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003ce:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003d2:	bf14      	ite	ne
 80003d4:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003d6:	ea25 0404 	biceq.w	r4, r5, r4
 80003da:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003dc:	3601      	adds	r6, #1
 80003de:	2e10      	cmp	r6, #16
 80003e0:	f47f af73 	bne.w	80002ca <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003e4:	b003      	add	sp, #12
 80003e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003ea:	2d03      	cmp	r5, #3
 80003ec:	d022      	beq.n	8000434 <HAL_GPIO_Init+0x17c>
 80003ee:	2d11      	cmp	r5, #17
 80003f0:	d184      	bne.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003f2:	68ca      	ldr	r2, [r1, #12]
 80003f4:	3204      	adds	r2, #4
          break;
 80003f6:	e781      	b.n	80002fc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003f8:	4f1a      	ldr	r7, [pc, #104]	; (8000464 <HAL_GPIO_Init+0x1ac>)
 80003fa:	42bd      	cmp	r5, r7
 80003fc:	d009      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 80003fe:	d812      	bhi.n	8000426 <HAL_GPIO_Init+0x16e>
 8000400:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000470 <HAL_GPIO_Init+0x1b8>
 8000404:	454d      	cmp	r5, r9
 8000406:	d004      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 8000408:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800040c:	454d      	cmp	r5, r9
 800040e:	f47f af75 	bne.w	80002fc <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000412:	688a      	ldr	r2, [r1, #8]
 8000414:	b1c2      	cbz	r2, 8000448 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000416:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000418:	bf0c      	ite	eq
 800041a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800041e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000422:	2208      	movs	r2, #8
 8000424:	e76a      	b.n	80002fc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000426:	4575      	cmp	r5, lr
 8000428:	d0f3      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 800042a:	4565      	cmp	r5, ip
 800042c:	d0f1      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 800042e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000474 <HAL_GPIO_Init+0x1bc>
 8000432:	e7eb      	b.n	800040c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000434:	2200      	movs	r2, #0
 8000436:	e761      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000438:	68ca      	ldr	r2, [r1, #12]
          break;
 800043a:	e75f      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800043c:	68ca      	ldr	r2, [r1, #12]
 800043e:	3208      	adds	r2, #8
          break;
 8000440:	e75c      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000442:	68ca      	ldr	r2, [r1, #12]
 8000444:	320c      	adds	r2, #12
          break;
 8000446:	e759      	b.n	80002fc <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000448:	2204      	movs	r2, #4
 800044a:	e757      	b.n	80002fc <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800044c:	2500      	movs	r5, #0
 800044e:	e7a2      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000450:	2501      	movs	r5, #1
 8000452:	e7a0      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000454:	2502      	movs	r5, #2
 8000456:	e79e      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000458:	40010400 	.word	0x40010400
 800045c:	40021000 	.word	0x40021000
 8000460:	40010800 	.word	0x40010800
 8000464:	10210000 	.word	0x10210000
 8000468:	10310000 	.word	0x10310000
 800046c:	10320000 	.word	0x10320000
 8000470:	10110000 	.word	0x10110000
 8000474:	10220000 	.word	0x10220000

08000478 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000478:	b10a      	cbz	r2, 800047e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800047a:	6101      	str	r1, [r0, #16]
 800047c:	4770      	bx	lr
 800047e:	0409      	lsls	r1, r1, #16
 8000480:	e7fb      	b.n	800047a <HAL_GPIO_WritePin+0x2>
	...

08000484 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000484:	6803      	ldr	r3, [r0, #0]
{
 8000486:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800048a:	07db      	lsls	r3, r3, #31
{
 800048c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800048e:	d410      	bmi.n	80004b2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000490:	682b      	ldr	r3, [r5, #0]
 8000492:	079f      	lsls	r7, r3, #30
 8000494:	d45e      	bmi.n	8000554 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000496:	682b      	ldr	r3, [r5, #0]
 8000498:	0719      	lsls	r1, r3, #28
 800049a:	f100 8095 	bmi.w	80005c8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800049e:	682b      	ldr	r3, [r5, #0]
 80004a0:	075a      	lsls	r2, r3, #29
 80004a2:	f100 80bf 	bmi.w	8000624 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004a6:	69ea      	ldr	r2, [r5, #28]
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	f040 812d 	bne.w	8000708 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004ae:	2000      	movs	r0, #0
 80004b0:	e014      	b.n	80004dc <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004b2:	4c90      	ldr	r4, [pc, #576]	; (80006f4 <HAL_RCC_OscConfig+0x270>)
 80004b4:	6863      	ldr	r3, [r4, #4]
 80004b6:	f003 030c 	and.w	r3, r3, #12
 80004ba:	2b04      	cmp	r3, #4
 80004bc:	d007      	beq.n	80004ce <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004be:	6863      	ldr	r3, [r4, #4]
 80004c0:	f003 030c 	and.w	r3, r3, #12
 80004c4:	2b08      	cmp	r3, #8
 80004c6:	d10c      	bne.n	80004e2 <HAL_RCC_OscConfig+0x5e>
 80004c8:	6863      	ldr	r3, [r4, #4]
 80004ca:	03de      	lsls	r6, r3, #15
 80004cc:	d509      	bpl.n	80004e2 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004ce:	6823      	ldr	r3, [r4, #0]
 80004d0:	039c      	lsls	r4, r3, #14
 80004d2:	d5dd      	bpl.n	8000490 <HAL_RCC_OscConfig+0xc>
 80004d4:	686b      	ldr	r3, [r5, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d1da      	bne.n	8000490 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004da:	2001      	movs	r0, #1
}
 80004dc:	b002      	add	sp, #8
 80004de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004e2:	686b      	ldr	r3, [r5, #4]
 80004e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004e8:	d110      	bne.n	800050c <HAL_RCC_OscConfig+0x88>
 80004ea:	6823      	ldr	r3, [r4, #0]
 80004ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004f2:	f7ff fe6d 	bl	80001d0 <HAL_GetTick>
 80004f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80004f8:	6823      	ldr	r3, [r4, #0]
 80004fa:	0398      	lsls	r0, r3, #14
 80004fc:	d4c8      	bmi.n	8000490 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80004fe:	f7ff fe67 	bl	80001d0 <HAL_GetTick>
 8000502:	1b80      	subs	r0, r0, r6
 8000504:	2864      	cmp	r0, #100	; 0x64
 8000506:	d9f7      	bls.n	80004f8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000508:	2003      	movs	r0, #3
 800050a:	e7e7      	b.n	80004dc <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800050c:	b99b      	cbnz	r3, 8000536 <HAL_RCC_OscConfig+0xb2>
 800050e:	6823      	ldr	r3, [r4, #0]
 8000510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000514:	6023      	str	r3, [r4, #0]
 8000516:	6823      	ldr	r3, [r4, #0]
 8000518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800051c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800051e:	f7ff fe57 	bl	80001d0 <HAL_GetTick>
 8000522:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000524:	6823      	ldr	r3, [r4, #0]
 8000526:	0399      	lsls	r1, r3, #14
 8000528:	d5b2      	bpl.n	8000490 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800052a:	f7ff fe51 	bl	80001d0 <HAL_GetTick>
 800052e:	1b80      	subs	r0, r0, r6
 8000530:	2864      	cmp	r0, #100	; 0x64
 8000532:	d9f7      	bls.n	8000524 <HAL_RCC_OscConfig+0xa0>
 8000534:	e7e8      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000536:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800053a:	6823      	ldr	r3, [r4, #0]
 800053c:	d103      	bne.n	8000546 <HAL_RCC_OscConfig+0xc2>
 800053e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000542:	6023      	str	r3, [r4, #0]
 8000544:	e7d1      	b.n	80004ea <HAL_RCC_OscConfig+0x66>
 8000546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800054a:	6023      	str	r3, [r4, #0]
 800054c:	6823      	ldr	r3, [r4, #0]
 800054e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000552:	e7cd      	b.n	80004f0 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000554:	4c67      	ldr	r4, [pc, #412]	; (80006f4 <HAL_RCC_OscConfig+0x270>)
 8000556:	6863      	ldr	r3, [r4, #4]
 8000558:	f013 0f0c 	tst.w	r3, #12
 800055c:	d007      	beq.n	800056e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800055e:	6863      	ldr	r3, [r4, #4]
 8000560:	f003 030c 	and.w	r3, r3, #12
 8000564:	2b08      	cmp	r3, #8
 8000566:	d110      	bne.n	800058a <HAL_RCC_OscConfig+0x106>
 8000568:	6863      	ldr	r3, [r4, #4]
 800056a:	03da      	lsls	r2, r3, #15
 800056c:	d40d      	bmi.n	800058a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800056e:	6823      	ldr	r3, [r4, #0]
 8000570:	079b      	lsls	r3, r3, #30
 8000572:	d502      	bpl.n	800057a <HAL_RCC_OscConfig+0xf6>
 8000574:	692b      	ldr	r3, [r5, #16]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d1af      	bne.n	80004da <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800057a:	6823      	ldr	r3, [r4, #0]
 800057c:	696a      	ldr	r2, [r5, #20]
 800057e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000582:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000586:	6023      	str	r3, [r4, #0]
 8000588:	e785      	b.n	8000496 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800058a:	692a      	ldr	r2, [r5, #16]
 800058c:	4b5a      	ldr	r3, [pc, #360]	; (80006f8 <HAL_RCC_OscConfig+0x274>)
 800058e:	b16a      	cbz	r2, 80005ac <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000590:	2201      	movs	r2, #1
 8000592:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000594:	f7ff fe1c 	bl	80001d0 <HAL_GetTick>
 8000598:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800059a:	6823      	ldr	r3, [r4, #0]
 800059c:	079f      	lsls	r7, r3, #30
 800059e:	d4ec      	bmi.n	800057a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005a0:	f7ff fe16 	bl	80001d0 <HAL_GetTick>
 80005a4:	1b80      	subs	r0, r0, r6
 80005a6:	2802      	cmp	r0, #2
 80005a8:	d9f7      	bls.n	800059a <HAL_RCC_OscConfig+0x116>
 80005aa:	e7ad      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005ae:	f7ff fe0f 	bl	80001d0 <HAL_GetTick>
 80005b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005b4:	6823      	ldr	r3, [r4, #0]
 80005b6:	0798      	lsls	r0, r3, #30
 80005b8:	f57f af6d 	bpl.w	8000496 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005bc:	f7ff fe08 	bl	80001d0 <HAL_GetTick>
 80005c0:	1b80      	subs	r0, r0, r6
 80005c2:	2802      	cmp	r0, #2
 80005c4:	d9f6      	bls.n	80005b4 <HAL_RCC_OscConfig+0x130>
 80005c6:	e79f      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005c8:	69aa      	ldr	r2, [r5, #24]
 80005ca:	4c4a      	ldr	r4, [pc, #296]	; (80006f4 <HAL_RCC_OscConfig+0x270>)
 80005cc:	4b4b      	ldr	r3, [pc, #300]	; (80006fc <HAL_RCC_OscConfig+0x278>)
 80005ce:	b1da      	cbz	r2, 8000608 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005d0:	2201      	movs	r2, #1
 80005d2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005d4:	f7ff fdfc 	bl	80001d0 <HAL_GetTick>
 80005d8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005dc:	079b      	lsls	r3, r3, #30
 80005de:	d50d      	bpl.n	80005fc <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005e0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005e4:	4b46      	ldr	r3, [pc, #280]	; (8000700 <HAL_RCC_OscConfig+0x27c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80005ec:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80005ee:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80005f0:	9b01      	ldr	r3, [sp, #4]
 80005f2:	1e5a      	subs	r2, r3, #1
 80005f4:	9201      	str	r2, [sp, #4]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1f9      	bne.n	80005ee <HAL_RCC_OscConfig+0x16a>
 80005fa:	e750      	b.n	800049e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80005fc:	f7ff fde8 	bl	80001d0 <HAL_GetTick>
 8000600:	1b80      	subs	r0, r0, r6
 8000602:	2802      	cmp	r0, #2
 8000604:	d9e9      	bls.n	80005da <HAL_RCC_OscConfig+0x156>
 8000606:	e77f      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000608:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800060a:	f7ff fde1 	bl	80001d0 <HAL_GetTick>
 800060e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000612:	079f      	lsls	r7, r3, #30
 8000614:	f57f af43 	bpl.w	800049e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000618:	f7ff fdda 	bl	80001d0 <HAL_GetTick>
 800061c:	1b80      	subs	r0, r0, r6
 800061e:	2802      	cmp	r0, #2
 8000620:	d9f6      	bls.n	8000610 <HAL_RCC_OscConfig+0x18c>
 8000622:	e771      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000624:	4c33      	ldr	r4, [pc, #204]	; (80006f4 <HAL_RCC_OscConfig+0x270>)
 8000626:	69e3      	ldr	r3, [r4, #28]
 8000628:	00d8      	lsls	r0, r3, #3
 800062a:	d424      	bmi.n	8000676 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800062c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	69e3      	ldr	r3, [r4, #28]
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000634:	61e3      	str	r3, [r4, #28]
 8000636:	69e3      	ldr	r3, [r4, #28]
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000640:	4e30      	ldr	r6, [pc, #192]	; (8000704 <HAL_RCC_OscConfig+0x280>)
 8000642:	6833      	ldr	r3, [r6, #0]
 8000644:	05d9      	lsls	r1, r3, #23
 8000646:	d518      	bpl.n	800067a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000648:	68eb      	ldr	r3, [r5, #12]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d126      	bne.n	800069c <HAL_RCC_OscConfig+0x218>
 800064e:	6a23      	ldr	r3, [r4, #32]
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000656:	f7ff fdbb 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800065a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800065e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000660:	6a23      	ldr	r3, [r4, #32]
 8000662:	079b      	lsls	r3, r3, #30
 8000664:	d53f      	bpl.n	80006e6 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000666:	2f00      	cmp	r7, #0
 8000668:	f43f af1d 	beq.w	80004a6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800066c:	69e3      	ldr	r3, [r4, #28]
 800066e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000672:	61e3      	str	r3, [r4, #28]
 8000674:	e717      	b.n	80004a6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000676:	2700      	movs	r7, #0
 8000678:	e7e2      	b.n	8000640 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800067a:	6833      	ldr	r3, [r6, #0]
 800067c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000680:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000682:	f7ff fda5 	bl	80001d0 <HAL_GetTick>
 8000686:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000688:	6833      	ldr	r3, [r6, #0]
 800068a:	05da      	lsls	r2, r3, #23
 800068c:	d4dc      	bmi.n	8000648 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800068e:	f7ff fd9f 	bl	80001d0 <HAL_GetTick>
 8000692:	eba0 0008 	sub.w	r0, r0, r8
 8000696:	2864      	cmp	r0, #100	; 0x64
 8000698:	d9f6      	bls.n	8000688 <HAL_RCC_OscConfig+0x204>
 800069a:	e735      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800069c:	b9ab      	cbnz	r3, 80006ca <HAL_RCC_OscConfig+0x246>
 800069e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006a0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006a4:	f023 0301 	bic.w	r3, r3, #1
 80006a8:	6223      	str	r3, [r4, #32]
 80006aa:	6a23      	ldr	r3, [r4, #32]
 80006ac:	f023 0304 	bic.w	r3, r3, #4
 80006b0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006b2:	f7ff fd8d 	bl	80001d0 <HAL_GetTick>
 80006b6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006b8:	6a23      	ldr	r3, [r4, #32]
 80006ba:	0798      	lsls	r0, r3, #30
 80006bc:	d5d3      	bpl.n	8000666 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006be:	f7ff fd87 	bl	80001d0 <HAL_GetTick>
 80006c2:	1b80      	subs	r0, r0, r6
 80006c4:	4540      	cmp	r0, r8
 80006c6:	d9f7      	bls.n	80006b8 <HAL_RCC_OscConfig+0x234>
 80006c8:	e71e      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006ca:	2b05      	cmp	r3, #5
 80006cc:	6a23      	ldr	r3, [r4, #32]
 80006ce:	d103      	bne.n	80006d8 <HAL_RCC_OscConfig+0x254>
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	6223      	str	r3, [r4, #32]
 80006d6:	e7ba      	b.n	800064e <HAL_RCC_OscConfig+0x1ca>
 80006d8:	f023 0301 	bic.w	r3, r3, #1
 80006dc:	6223      	str	r3, [r4, #32]
 80006de:	6a23      	ldr	r3, [r4, #32]
 80006e0:	f023 0304 	bic.w	r3, r3, #4
 80006e4:	e7b6      	b.n	8000654 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006e6:	f7ff fd73 	bl	80001d0 <HAL_GetTick>
 80006ea:	eba0 0008 	sub.w	r0, r0, r8
 80006ee:	42b0      	cmp	r0, r6
 80006f0:	d9b6      	bls.n	8000660 <HAL_RCC_OscConfig+0x1dc>
 80006f2:	e709      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
 80006f4:	40021000 	.word	0x40021000
 80006f8:	42420000 	.word	0x42420000
 80006fc:	42420480 	.word	0x42420480
 8000700:	20000008 	.word	0x20000008
 8000704:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000708:	4c22      	ldr	r4, [pc, #136]	; (8000794 <HAL_RCC_OscConfig+0x310>)
 800070a:	6863      	ldr	r3, [r4, #4]
 800070c:	f003 030c 	and.w	r3, r3, #12
 8000710:	2b08      	cmp	r3, #8
 8000712:	f43f aee2 	beq.w	80004da <HAL_RCC_OscConfig+0x56>
 8000716:	2300      	movs	r3, #0
 8000718:	4e1f      	ldr	r6, [pc, #124]	; (8000798 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800071a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800071c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800071e:	d12b      	bne.n	8000778 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000720:	f7ff fd56 	bl	80001d0 <HAL_GetTick>
 8000724:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000726:	6823      	ldr	r3, [r4, #0]
 8000728:	0199      	lsls	r1, r3, #6
 800072a:	d41f      	bmi.n	800076c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800072c:	6a2b      	ldr	r3, [r5, #32]
 800072e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000732:	d105      	bne.n	8000740 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000734:	6862      	ldr	r2, [r4, #4]
 8000736:	68a9      	ldr	r1, [r5, #8]
 8000738:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800073c:	430a      	orrs	r2, r1
 800073e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000740:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000742:	6862      	ldr	r2, [r4, #4]
 8000744:	430b      	orrs	r3, r1
 8000746:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800074a:	4313      	orrs	r3, r2
 800074c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800074e:	2301      	movs	r3, #1
 8000750:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000752:	f7ff fd3d 	bl	80001d0 <HAL_GetTick>
 8000756:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000758:	6823      	ldr	r3, [r4, #0]
 800075a:	019a      	lsls	r2, r3, #6
 800075c:	f53f aea7 	bmi.w	80004ae <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000760:	f7ff fd36 	bl	80001d0 <HAL_GetTick>
 8000764:	1b40      	subs	r0, r0, r5
 8000766:	2802      	cmp	r0, #2
 8000768:	d9f6      	bls.n	8000758 <HAL_RCC_OscConfig+0x2d4>
 800076a:	e6cd      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800076c:	f7ff fd30 	bl	80001d0 <HAL_GetTick>
 8000770:	1bc0      	subs	r0, r0, r7
 8000772:	2802      	cmp	r0, #2
 8000774:	d9d7      	bls.n	8000726 <HAL_RCC_OscConfig+0x2a2>
 8000776:	e6c7      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000778:	f7ff fd2a 	bl	80001d0 <HAL_GetTick>
 800077c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800077e:	6823      	ldr	r3, [r4, #0]
 8000780:	019b      	lsls	r3, r3, #6
 8000782:	f57f ae94 	bpl.w	80004ae <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000786:	f7ff fd23 	bl	80001d0 <HAL_GetTick>
 800078a:	1b40      	subs	r0, r0, r5
 800078c:	2802      	cmp	r0, #2
 800078e:	d9f6      	bls.n	800077e <HAL_RCC_OscConfig+0x2fa>
 8000790:	e6ba      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000
 8000798:	42420060 	.word	0x42420060

0800079c <HAL_RCC_GetSysClockFreq>:
{
 800079c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007a0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007a2:	ac02      	add	r4, sp, #8
 80007a4:	f103 0510 	add.w	r5, r3, #16
 80007a8:	4622      	mov	r2, r4
 80007aa:	6818      	ldr	r0, [r3, #0]
 80007ac:	6859      	ldr	r1, [r3, #4]
 80007ae:	3308      	adds	r3, #8
 80007b0:	c203      	stmia	r2!, {r0, r1}
 80007b2:	42ab      	cmp	r3, r5
 80007b4:	4614      	mov	r4, r2
 80007b6:	d1f7      	bne.n	80007a8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007b8:	2301      	movs	r3, #1
 80007ba:	f88d 3004 	strb.w	r3, [sp, #4]
 80007be:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007c0:	4911      	ldr	r1, [pc, #68]	; (8000808 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007c2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007c6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007c8:	f003 020c 	and.w	r2, r3, #12
 80007cc:	2a08      	cmp	r2, #8
 80007ce:	d117      	bne.n	8000800 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007d0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80007d4:	a806      	add	r0, sp, #24
 80007d6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007d8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007da:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007de:	d50c      	bpl.n	80007fa <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007e0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007e2:	480a      	ldr	r0, [pc, #40]	; (800080c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007e4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007e8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007ea:	aa06      	add	r2, sp, #24
 80007ec:	4413      	add	r3, r2
 80007ee:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007f2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80007f6:	b007      	add	sp, #28
 80007f8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <HAL_RCC_GetSysClockFreq+0x74>)
 80007fc:	4350      	muls	r0, r2
 80007fe:	e7fa      	b.n	80007f6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000802:	e7f8      	b.n	80007f6 <HAL_RCC_GetSysClockFreq+0x5a>
 8000804:	08000bd4 	.word	0x08000bd4
 8000808:	40021000 	.word	0x40021000
 800080c:	007a1200 	.word	0x007a1200
 8000810:	003d0900 	.word	0x003d0900

08000814 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000814:	4a54      	ldr	r2, [pc, #336]	; (8000968 <HAL_RCC_ClockConfig+0x154>)
{
 8000816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800081a:	6813      	ldr	r3, [r2, #0]
{
 800081c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	428b      	cmp	r3, r1
{
 8000824:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000826:	d32a      	bcc.n	800087e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000828:	6829      	ldr	r1, [r5, #0]
 800082a:	078c      	lsls	r4, r1, #30
 800082c:	d434      	bmi.n	8000898 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800082e:	07ca      	lsls	r2, r1, #31
 8000830:	d447      	bmi.n	80008c2 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000832:	4a4d      	ldr	r2, [pc, #308]	; (8000968 <HAL_RCC_ClockConfig+0x154>)
 8000834:	6813      	ldr	r3, [r2, #0]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	429e      	cmp	r6, r3
 800083c:	f0c0 8082 	bcc.w	8000944 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000840:	682a      	ldr	r2, [r5, #0]
 8000842:	4c4a      	ldr	r4, [pc, #296]	; (800096c <HAL_RCC_ClockConfig+0x158>)
 8000844:	f012 0f04 	tst.w	r2, #4
 8000848:	f040 8087 	bne.w	800095a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800084c:	0713      	lsls	r3, r2, #28
 800084e:	d506      	bpl.n	800085e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000850:	6863      	ldr	r3, [r4, #4]
 8000852:	692a      	ldr	r2, [r5, #16]
 8000854:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000858:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800085c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800085e:	f7ff ff9d 	bl	800079c <HAL_RCC_GetSysClockFreq>
 8000862:	6863      	ldr	r3, [r4, #4]
 8000864:	4a42      	ldr	r2, [pc, #264]	; (8000970 <HAL_RCC_ClockConfig+0x15c>)
 8000866:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800086a:	5cd3      	ldrb	r3, [r2, r3]
 800086c:	40d8      	lsrs	r0, r3
 800086e:	4b41      	ldr	r3, [pc, #260]	; (8000974 <HAL_RCC_ClockConfig+0x160>)
 8000870:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff fc6a 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000878:	2000      	movs	r0, #0
}
 800087a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800087e:	6813      	ldr	r3, [r2, #0]
 8000880:	f023 0307 	bic.w	r3, r3, #7
 8000884:	430b      	orrs	r3, r1
 8000886:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000888:	6813      	ldr	r3, [r2, #0]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	4299      	cmp	r1, r3
 8000890:	d0ca      	beq.n	8000828 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000892:	2001      	movs	r0, #1
 8000894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000898:	4b34      	ldr	r3, [pc, #208]	; (800096c <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800089a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800089e:	bf1e      	ittt	ne
 80008a0:	685a      	ldrne	r2, [r3, #4]
 80008a2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80008a6:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008a8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008aa:	bf42      	ittt	mi
 80008ac:	685a      	ldrmi	r2, [r3, #4]
 80008ae:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80008b2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008b4:	685a      	ldr	r2, [r3, #4]
 80008b6:	68a8      	ldr	r0, [r5, #8]
 80008b8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008bc:	4302      	orrs	r2, r0
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	e7b5      	b.n	800082e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008c2:	686a      	ldr	r2, [r5, #4]
 80008c4:	4c29      	ldr	r4, [pc, #164]	; (800096c <HAL_RCC_ClockConfig+0x158>)
 80008c6:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008c8:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ca:	d11c      	bne.n	8000906 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008d0:	d0df      	beq.n	8000892 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008d2:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008d4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008d8:	f023 0303 	bic.w	r3, r3, #3
 80008dc:	4313      	orrs	r3, r2
 80008de:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008e0:	f7ff fc76 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008e4:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008e6:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d114      	bne.n	8000916 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008ec:	6863      	ldr	r3, [r4, #4]
 80008ee:	f003 030c 	and.w	r3, r3, #12
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d09d      	beq.n	8000832 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008f6:	f7ff fc6b 	bl	80001d0 <HAL_GetTick>
 80008fa:	1bc0      	subs	r0, r0, r7
 80008fc:	4540      	cmp	r0, r8
 80008fe:	d9f5      	bls.n	80008ec <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000900:	2003      	movs	r0, #3
 8000902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000906:	2a02      	cmp	r2, #2
 8000908:	d102      	bne.n	8000910 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800090a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800090e:	e7df      	b.n	80008d0 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000910:	f013 0f02 	tst.w	r3, #2
 8000914:	e7dc      	b.n	80008d0 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000916:	2b02      	cmp	r3, #2
 8000918:	d10f      	bne.n	800093a <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800091a:	6863      	ldr	r3, [r4, #4]
 800091c:	f003 030c 	and.w	r3, r3, #12
 8000920:	2b08      	cmp	r3, #8
 8000922:	d086      	beq.n	8000832 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000924:	f7ff fc54 	bl	80001d0 <HAL_GetTick>
 8000928:	1bc0      	subs	r0, r0, r7
 800092a:	4540      	cmp	r0, r8
 800092c:	d9f5      	bls.n	800091a <HAL_RCC_ClockConfig+0x106>
 800092e:	e7e7      	b.n	8000900 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000930:	f7ff fc4e 	bl	80001d0 <HAL_GetTick>
 8000934:	1bc0      	subs	r0, r0, r7
 8000936:	4540      	cmp	r0, r8
 8000938:	d8e2      	bhi.n	8000900 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800093a:	6863      	ldr	r3, [r4, #4]
 800093c:	f013 0f0c 	tst.w	r3, #12
 8000940:	d1f6      	bne.n	8000930 <HAL_RCC_ClockConfig+0x11c>
 8000942:	e776      	b.n	8000832 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000944:	6813      	ldr	r3, [r2, #0]
 8000946:	f023 0307 	bic.w	r3, r3, #7
 800094a:	4333      	orrs	r3, r6
 800094c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800094e:	6813      	ldr	r3, [r2, #0]
 8000950:	f003 0307 	and.w	r3, r3, #7
 8000954:	429e      	cmp	r6, r3
 8000956:	d19c      	bne.n	8000892 <HAL_RCC_ClockConfig+0x7e>
 8000958:	e772      	b.n	8000840 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800095a:	6863      	ldr	r3, [r4, #4]
 800095c:	68e9      	ldr	r1, [r5, #12]
 800095e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000962:	430b      	orrs	r3, r1
 8000964:	6063      	str	r3, [r4, #4]
 8000966:	e771      	b.n	800084c <HAL_RCC_ClockConfig+0x38>
 8000968:	40022000 	.word	0x40022000
 800096c:	40021000 	.word	0x40021000
 8000970:	08000be4 	.word	0x08000be4
 8000974:	20000008 	.word	0x20000008

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b510      	push	{r4, lr}
 800097a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097c:	2228      	movs	r2, #40	; 0x28
 800097e:	2100      	movs	r1, #0
 8000980:	a806      	add	r0, sp, #24
 8000982:	f000 f913 	bl	8000bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000986:	2100      	movs	r1, #0
 8000988:	2214      	movs	r2, #20
 800098a:	a801      	add	r0, sp, #4
 800098c:	f000 f90e 	bl	8000bac <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000990:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000994:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000996:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000998:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800099c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a0:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a2:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a4:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009a6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a8:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	f7ff fd6b 	bl	8000484 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b8:	4621      	mov	r1, r4
 80009ba:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009bc:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009be:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c0:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c2:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c4:	f7ff ff26 	bl	8000814 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80009c8:	b010      	add	sp, #64	; 0x40
 80009ca:	bd10      	pop	{r4, pc}

080009cc <main>:
{
 80009cc:	b500      	push	{lr}
 80009ce:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80009d0:	f7ff fbe0 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 80009d4:	f7ff ffd0 	bl	8000978 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	2210      	movs	r2, #16
 80009da:	2100      	movs	r1, #0
 80009dc:	eb0d 0002 	add.w	r0, sp, r2
 80009e0:	f000 f8e4 	bl	8000bac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e4:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <main+0xa0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_RESET);
 80009e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_RESET);
 80009ec:	4820      	ldr	r0, [pc, #128]	; (8000a70 <main+0xa4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	f042 0210 	orr.w	r2, r2, #16
 80009f2:	619a      	str	r2, [r3, #24]
 80009f4:	699a      	ldr	r2, [r3, #24]
	  HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_SET);
 80009f6:	4c1e      	ldr	r4, [pc, #120]	; (8000a70 <main+0xa4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f8:	f002 0210 	and.w	r2, r2, #16
 80009fc:	9201      	str	r2, [sp, #4]
 80009fe:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a00:	699a      	ldr	r2, [r3, #24]
 8000a02:	f042 0220 	orr.w	r2, r2, #32
 8000a06:	619a      	str	r2, [r3, #24]
 8000a08:	699a      	ldr	r2, [r3, #24]
 8000a0a:	f002 0220 	and.w	r2, r2, #32
 8000a0e:	9202      	str	r2, [sp, #8]
 8000a10:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	699a      	ldr	r2, [r3, #24]
 8000a14:	f042 0204 	orr.w	r2, r2, #4
 8000a18:	619a      	str	r2, [r3, #24]
 8000a1a:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	9303      	str	r3, [sp, #12]
 8000a24:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_RESET);
 8000a26:	f7ff fd27 	bl	8000478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led13_Pin */
  GPIO_InitStruct.Pin = led13_Pin;
 8000a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2302      	movs	r3, #2
  HAL_GPIO_Init(led13_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	a904      	add	r1, sp, #16
 8000a3c:	480c      	ldr	r0, [pc, #48]	; (8000a70 <main+0xa4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(led13_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f7ff fc3a 	bl	80002b8 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a4a:	4620      	mov	r0, r4
 8000a4c:	f7ff fd14 	bl	8000478 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000a50:	2064      	movs	r0, #100	; 0x64
 8000a52:	f7ff fbc3 	bl	80001dc <HAL_Delay>
	  HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_RESET);
 8000a56:	4620      	mov	r0, r4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5e:	f7ff fd0b 	bl	8000478 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000a62:	2064      	movs	r0, #100	; 0x64
 8000a64:	f7ff fbba 	bl	80001dc <HAL_Delay>
 8000a68:	e7ec      	b.n	8000a44 <main+0x78>
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40011000 	.word	0x40011000

08000a74 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_MspInit+0x3c>)
{
 8000a76:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a78:	699a      	ldr	r2, [r3, #24]
 8000a7a:	f042 0201 	orr.w	r2, r2, #1
 8000a7e:	619a      	str	r2, [r3, #24]
 8000a80:	699a      	ldr	r2, [r3, #24]
 8000a82:	f002 0201 	and.w	r2, r2, #1
 8000a86:	9200      	str	r2, [sp, #0]
 8000a88:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	69da      	ldr	r2, [r3, #28]
 8000a8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a90:	61da      	str	r2, [r3, #28]
 8000a92:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	9301      	str	r3, [sp, #4]
 8000a9c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a9e:	6853      	ldr	r3, [r2, #4]
 8000aa0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000aa4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aa8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	b002      	add	sp, #8
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40010000 	.word	0x40010000

08000ab8 <NMI_Handler>:
 8000ab8:	4770      	bx	lr

08000aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aba:	e7fe      	b.n	8000aba <HardFault_Handler>

08000abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	e7fe      	b.n	8000abe <BusFault_Handler>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler>

08000ac2 <SVC_Handler>:
 8000ac2:	4770      	bx	lr

08000ac4 <DebugMon_Handler>:
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	4770      	bx	lr

08000ac8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f7ff bb76 	b.w	80001b8 <HAL_IncTick>

08000acc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <SystemInit+0x40>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	f042 0201 	orr.w	r2, r2, #1
 8000ad4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000ad6:	6859      	ldr	r1, [r3, #4]
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <SystemInit+0x44>)
 8000ada:	400a      	ands	r2, r1
 8000adc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000ae4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ae8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000af0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000af8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000afa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000afe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <SystemInit+0x48>)
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	f8ff0000 	.word	0xf8ff0000
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b18:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b1a:	e003      	b.n	8000b24 <LoopCopyDataInit>

08000b1c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b1e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b20:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b22:	3104      	adds	r1, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b24:	480a      	ldr	r0, [pc, #40]	; (8000b50 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b28:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b2a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b2c:	d3f6      	bcc.n	8000b1c <CopyDataInit>
  ldr r2, =_sbss
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b30:	e002      	b.n	8000b38 <LoopFillZerobss>

08000b32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b34:	f842 3b04 	str.w	r3, [r2], #4

08000b38 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b3a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b3c:	d3f9      	bcc.n	8000b32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b3e:	f7ff ffc5 	bl	8000acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b42:	f000 f80f 	bl	8000b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b46:	f7ff ff41 	bl	80009cc <main>
  bx lr
 8000b4a:	4770      	bx	lr
  ldr r3, =_sidata
 8000b4c:	08000bfc 	.word	0x08000bfc
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b54:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000b58:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000b5c:	2000002c 	.word	0x2000002c

08000b60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC1_2_IRQHandler>
	...

08000b64 <__libc_init_array>:
 8000b64:	b570      	push	{r4, r5, r6, lr}
 8000b66:	2500      	movs	r5, #0
 8000b68:	4e0c      	ldr	r6, [pc, #48]	; (8000b9c <__libc_init_array+0x38>)
 8000b6a:	4c0d      	ldr	r4, [pc, #52]	; (8000ba0 <__libc_init_array+0x3c>)
 8000b6c:	1ba4      	subs	r4, r4, r6
 8000b6e:	10a4      	asrs	r4, r4, #2
 8000b70:	42a5      	cmp	r5, r4
 8000b72:	d109      	bne.n	8000b88 <__libc_init_array+0x24>
 8000b74:	f000 f822 	bl	8000bbc <_init>
 8000b78:	2500      	movs	r5, #0
 8000b7a:	4e0a      	ldr	r6, [pc, #40]	; (8000ba4 <__libc_init_array+0x40>)
 8000b7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ba8 <__libc_init_array+0x44>)
 8000b7e:	1ba4      	subs	r4, r4, r6
 8000b80:	10a4      	asrs	r4, r4, #2
 8000b82:	42a5      	cmp	r5, r4
 8000b84:	d105      	bne.n	8000b92 <__libc_init_array+0x2e>
 8000b86:	bd70      	pop	{r4, r5, r6, pc}
 8000b88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b8c:	4798      	blx	r3
 8000b8e:	3501      	adds	r5, #1
 8000b90:	e7ee      	b.n	8000b70 <__libc_init_array+0xc>
 8000b92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b96:	4798      	blx	r3
 8000b98:	3501      	adds	r5, #1
 8000b9a:	e7f2      	b.n	8000b82 <__libc_init_array+0x1e>
 8000b9c:	08000bf4 	.word	0x08000bf4
 8000ba0:	08000bf4 	.word	0x08000bf4
 8000ba4:	08000bf4 	.word	0x08000bf4
 8000ba8:	08000bf8 	.word	0x08000bf8

08000bac <memset>:
 8000bac:	4603      	mov	r3, r0
 8000bae:	4402      	add	r2, r0
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d100      	bne.n	8000bb6 <memset+0xa>
 8000bb4:	4770      	bx	lr
 8000bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8000bba:	e7f9      	b.n	8000bb0 <memset+0x4>

08000bbc <_init>:
 8000bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bbe:	bf00      	nop
 8000bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bc2:	bc08      	pop	{r3}
 8000bc4:	469e      	mov	lr, r3
 8000bc6:	4770      	bx	lr

08000bc8 <_fini>:
 8000bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bca:	bf00      	nop
 8000bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bce:	bc08      	pop	{r3}
 8000bd0:	469e      	mov	lr, r3
 8000bd2:	4770      	bx	lr
