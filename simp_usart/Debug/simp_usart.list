
simp_usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08001b18  08001b18  00011b18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001b8c  08001b8c  00011b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001b90  08001b90  00011b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08001b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b4  20000074  08001c08  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000128  08001c08  00020128  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b43e  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001bb3  00000000  00000000  0002b4db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002805  00000000  00000000  0002d08e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000528  00000000  00000000  0002f898  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000708  00000000  00000000  0002fdc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000328b  00000000  00000000  000304c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000203c  00000000  00000000  00033753  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003578f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001068  00000000  00000000  0003580c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08001b00 	.word	0x08001b00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08001b00 	.word	0x08001b00

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f89e 	bl	80002b4 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000188:	f000 f854 	bl	8000234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f82d 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f000 ff68 	bl	8001090 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200000dc 	.word	0x200000dc

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001f8:	bf1e      	ittt	ne
 80001fa:	4b04      	ldrne	r3, [pc, #16]	; (800020c <HAL_Delay+0x20>)
 80001fc:	781b      	ldrbne	r3, [r3, #0]
 80001fe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000200:	f7ff ffee 	bl	80001e0 <HAL_GetTick>
 8000204:	1b40      	subs	r0, r0, r5
 8000206:	4284      	cmp	r4, r0
 8000208:	d8fa      	bhi.n	8000200 <HAL_Delay+0x14>
  {
  }
}
 800020a:	bd38      	pop	{r3, r4, r5, pc}
 800020c:	20000000 	.word	0x20000000

08000210 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000212:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000214:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800021e:	041b      	lsls	r3, r3, #16
 8000220:	0c1b      	lsrs	r3, r3, #16
 8000222:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800022a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800022c:	60d3      	str	r3, [r2, #12]
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000236:	b530      	push	{r4, r5, lr}
 8000238:	68dc      	ldr	r4, [r3, #12]
 800023a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800023e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000242:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000244:	2b04      	cmp	r3, #4
 8000246:	bf28      	it	cs
 8000248:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	bf98      	it	ls
 8000252:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	fa05 f303 	lsl.w	r3, r5, r3
 8000258:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025c:	bf88      	it	hi
 800025e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	4019      	ands	r1, r3
 8000262:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000264:	fa05 f404 	lsl.w	r4, r5, r4
 8000268:	3c01      	subs	r4, #1
 800026a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800026c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026e:	ea42 0201 	orr.w	r2, r2, r1
 8000272:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	bfaf      	iteee	ge
 8000278:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	4b06      	ldrlt	r3, [pc, #24]	; (8000298 <HAL_NVIC_SetPriority+0x64>)
 800027e:	f000 000f 	andlt.w	r0, r0, #15
 8000282:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	bfa5      	ittet	ge
 8000286:	b2d2      	uxtbge	r2, r2
 8000288:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000ed14 	.word	0xe000ed14

0800029c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800029c:	2301      	movs	r3, #1
 800029e:	0942      	lsrs	r2, r0, #5
 80002a0:	f000 001f 	and.w	r0, r0, #31
 80002a4:	fa03 f000 	lsl.w	r0, r3, r0
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_NVIC_EnableIRQ+0x14>)
 80002aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ae:	4770      	bx	lr
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002b4:	3801      	subs	r0, #1
 80002b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ba:	d20a      	bcs.n	80002d2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	4a06      	ldr	r2, [pc, #24]	; (80002dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e010 	.word	0xe000e010
 80002dc:	e000ed00 	.word	0xe000ed00

080002e0 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002e0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80002e4:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	d003      	beq.n	80002f2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80002ea:	2304      	movs	r3, #4
 80002ec:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80002ee:	2001      	movs	r0, #1
 80002f0:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80002f2:	6803      	ldr	r3, [r0, #0]
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	f022 020e 	bic.w	r2, r2, #14
 80002fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	f022 0201 	bic.w	r2, r2, #1
 8000302:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000304:	4a18      	ldr	r2, [pc, #96]	; (8000368 <HAL_DMA_Abort_IT+0x88>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d01f      	beq.n	800034a <HAL_DMA_Abort_IT+0x6a>
 800030a:	3214      	adds	r2, #20
 800030c:	4293      	cmp	r3, r2
 800030e:	d01e      	beq.n	800034e <HAL_DMA_Abort_IT+0x6e>
 8000310:	3214      	adds	r2, #20
 8000312:	4293      	cmp	r3, r2
 8000314:	d01d      	beq.n	8000352 <HAL_DMA_Abort_IT+0x72>
 8000316:	3214      	adds	r2, #20
 8000318:	4293      	cmp	r3, r2
 800031a:	d01d      	beq.n	8000358 <HAL_DMA_Abort_IT+0x78>
 800031c:	3214      	adds	r2, #20
 800031e:	4293      	cmp	r3, r2
 8000320:	d01d      	beq.n	800035e <HAL_DMA_Abort_IT+0x7e>
 8000322:	3214      	adds	r2, #20
 8000324:	4293      	cmp	r3, r2
 8000326:	bf0c      	ite	eq
 8000328:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 800032c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000330:	4a0e      	ldr	r2, [pc, #56]	; (800036c <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000332:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000334:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000336:	2301      	movs	r3, #1
 8000338:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800033c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800033e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000342:	b17b      	cbz	r3, 8000364 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000344:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000346:	4620      	mov	r0, r4
 8000348:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800034a:	2301      	movs	r3, #1
 800034c:	e7f0      	b.n	8000330 <HAL_DMA_Abort_IT+0x50>
 800034e:	2310      	movs	r3, #16
 8000350:	e7ee      	b.n	8000330 <HAL_DMA_Abort_IT+0x50>
 8000352:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000356:	e7eb      	b.n	8000330 <HAL_DMA_Abort_IT+0x50>
 8000358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800035c:	e7e8      	b.n	8000330 <HAL_DMA_Abort_IT+0x50>
 800035e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000362:	e7e5      	b.n	8000330 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000364:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000366:	bd10      	pop	{r4, pc}
 8000368:	40020008 	.word	0x40020008
 800036c:	40020000 	.word	0x40020000

08000370 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000374:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000376:	4616      	mov	r6, r2
 8000378:	4b65      	ldr	r3, [pc, #404]	; (8000510 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800037a:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000520 <HAL_GPIO_Init+0x1b0>
 800037e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000524 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000382:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000386:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000388:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800038c:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000390:	45a0      	cmp	r8, r4
 8000392:	d17f      	bne.n	8000494 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000394:	684d      	ldr	r5, [r1, #4]
 8000396:	2d12      	cmp	r5, #18
 8000398:	f000 80af 	beq.w	80004fa <HAL_GPIO_Init+0x18a>
 800039c:	f200 8088 	bhi.w	80004b0 <HAL_GPIO_Init+0x140>
 80003a0:	2d02      	cmp	r5, #2
 80003a2:	f000 80a7 	beq.w	80004f4 <HAL_GPIO_Init+0x184>
 80003a6:	d87c      	bhi.n	80004a2 <HAL_GPIO_Init+0x132>
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	f000 808e 	beq.w	80004ca <HAL_GPIO_Init+0x15a>
 80003ae:	2d01      	cmp	r5, #1
 80003b0:	f000 809e 	beq.w	80004f0 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003b4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003b8:	2cff      	cmp	r4, #255	; 0xff
 80003ba:	bf93      	iteet	ls
 80003bc:	4682      	movls	sl, r0
 80003be:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80003c2:	3d08      	subhi	r5, #8
 80003c4:	f8d0 b000 	ldrls.w	fp, [r0]
 80003c8:	bf92      	itee	ls
 80003ca:	00b5      	lslls	r5, r6, #2
 80003cc:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80003d0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003d2:	fa09 f805 	lsl.w	r8, r9, r5
 80003d6:	ea2b 0808 	bic.w	r8, fp, r8
 80003da:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003de:	bf88      	it	hi
 80003e0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003e4:	ea48 0505 	orr.w	r5, r8, r5
 80003e8:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003ec:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80003f0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80003f4:	d04e      	beq.n	8000494 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003f6:	4d47      	ldr	r5, [pc, #284]	; (8000514 <HAL_GPIO_Init+0x1a4>)
 80003f8:	4f46      	ldr	r7, [pc, #280]	; (8000514 <HAL_GPIO_Init+0x1a4>)
 80003fa:	69ad      	ldr	r5, [r5, #24]
 80003fc:	f026 0803 	bic.w	r8, r6, #3
 8000400:	f045 0501 	orr.w	r5, r5, #1
 8000404:	61bd      	str	r5, [r7, #24]
 8000406:	69bd      	ldr	r5, [r7, #24]
 8000408:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800040c:	f005 0501 	and.w	r5, r5, #1
 8000410:	9501      	str	r5, [sp, #4]
 8000412:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000416:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800041a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800041c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000420:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000424:	fa09 f90b 	lsl.w	r9, r9, fp
 8000428:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800042c:	4d3a      	ldr	r5, [pc, #232]	; (8000518 <HAL_GPIO_Init+0x1a8>)
 800042e:	42a8      	cmp	r0, r5
 8000430:	d068      	beq.n	8000504 <HAL_GPIO_Init+0x194>
 8000432:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000436:	42a8      	cmp	r0, r5
 8000438:	d066      	beq.n	8000508 <HAL_GPIO_Init+0x198>
 800043a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800043e:	42a8      	cmp	r0, r5
 8000440:	d064      	beq.n	800050c <HAL_GPIO_Init+0x19c>
 8000442:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000446:	42a8      	cmp	r0, r5
 8000448:	bf0c      	ite	eq
 800044a:	2503      	moveq	r5, #3
 800044c:	2504      	movne	r5, #4
 800044e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000452:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000456:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800045a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800045c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000460:	bf14      	ite	ne
 8000462:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000464:	43a5      	biceq	r5, r4
 8000466:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000468:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800046a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800046e:	bf14      	ite	ne
 8000470:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000472:	43a5      	biceq	r5, r4
 8000474:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000476:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000478:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800047c:	bf14      	ite	ne
 800047e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000480:	43a5      	biceq	r5, r4
 8000482:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000484:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000486:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800048a:	bf14      	ite	ne
 800048c:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800048e:	ea25 0404 	biceq.w	r4, r5, r4
 8000492:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000494:	3601      	adds	r6, #1
 8000496:	2e10      	cmp	r6, #16
 8000498:	f47f af73 	bne.w	8000382 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 800049c:	b003      	add	sp, #12
 800049e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80004a2:	2d03      	cmp	r5, #3
 80004a4:	d022      	beq.n	80004ec <HAL_GPIO_Init+0x17c>
 80004a6:	2d11      	cmp	r5, #17
 80004a8:	d184      	bne.n	80003b4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004aa:	68ca      	ldr	r2, [r1, #12]
 80004ac:	3204      	adds	r2, #4
          break;
 80004ae:	e781      	b.n	80003b4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80004b0:	4f1a      	ldr	r7, [pc, #104]	; (800051c <HAL_GPIO_Init+0x1ac>)
 80004b2:	42bd      	cmp	r5, r7
 80004b4:	d009      	beq.n	80004ca <HAL_GPIO_Init+0x15a>
 80004b6:	d812      	bhi.n	80004de <HAL_GPIO_Init+0x16e>
 80004b8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000528 <HAL_GPIO_Init+0x1b8>
 80004bc:	454d      	cmp	r5, r9
 80004be:	d004      	beq.n	80004ca <HAL_GPIO_Init+0x15a>
 80004c0:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80004c4:	454d      	cmp	r5, r9
 80004c6:	f47f af75 	bne.w	80003b4 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004ca:	688a      	ldr	r2, [r1, #8]
 80004cc:	b1c2      	cbz	r2, 8000500 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004ce:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80004d0:	bf0c      	ite	eq
 80004d2:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80004d6:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004da:	2208      	movs	r2, #8
 80004dc:	e76a      	b.n	80003b4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80004de:	4575      	cmp	r5, lr
 80004e0:	d0f3      	beq.n	80004ca <HAL_GPIO_Init+0x15a>
 80004e2:	4565      	cmp	r5, ip
 80004e4:	d0f1      	beq.n	80004ca <HAL_GPIO_Init+0x15a>
 80004e6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800052c <HAL_GPIO_Init+0x1bc>
 80004ea:	e7eb      	b.n	80004c4 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004ec:	2200      	movs	r2, #0
 80004ee:	e761      	b.n	80003b4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004f0:	68ca      	ldr	r2, [r1, #12]
          break;
 80004f2:	e75f      	b.n	80003b4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004f4:	68ca      	ldr	r2, [r1, #12]
 80004f6:	3208      	adds	r2, #8
          break;
 80004f8:	e75c      	b.n	80003b4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004fa:	68ca      	ldr	r2, [r1, #12]
 80004fc:	320c      	adds	r2, #12
          break;
 80004fe:	e759      	b.n	80003b4 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000500:	2204      	movs	r2, #4
 8000502:	e757      	b.n	80003b4 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000504:	2500      	movs	r5, #0
 8000506:	e7a2      	b.n	800044e <HAL_GPIO_Init+0xde>
 8000508:	2501      	movs	r5, #1
 800050a:	e7a0      	b.n	800044e <HAL_GPIO_Init+0xde>
 800050c:	2502      	movs	r5, #2
 800050e:	e79e      	b.n	800044e <HAL_GPIO_Init+0xde>
 8000510:	40010400 	.word	0x40010400
 8000514:	40021000 	.word	0x40021000
 8000518:	40010800 	.word	0x40010800
 800051c:	10210000 	.word	0x10210000
 8000520:	10310000 	.word	0x10310000
 8000524:	10320000 	.word	0x10320000
 8000528:	10110000 	.word	0x10110000
 800052c:	10220000 	.word	0x10220000

08000530 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000530:	6803      	ldr	r3, [r0, #0]
{
 8000532:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000536:	07db      	lsls	r3, r3, #31
{
 8000538:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800053a:	d410      	bmi.n	800055e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800053c:	682b      	ldr	r3, [r5, #0]
 800053e:	079f      	lsls	r7, r3, #30
 8000540:	d45e      	bmi.n	8000600 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000542:	682b      	ldr	r3, [r5, #0]
 8000544:	0719      	lsls	r1, r3, #28
 8000546:	f100 8095 	bmi.w	8000674 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800054a:	682b      	ldr	r3, [r5, #0]
 800054c:	075a      	lsls	r2, r3, #29
 800054e:	f100 80bf 	bmi.w	80006d0 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000552:	69ea      	ldr	r2, [r5, #28]
 8000554:	2a00      	cmp	r2, #0
 8000556:	f040 812d 	bne.w	80007b4 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800055a:	2000      	movs	r0, #0
 800055c:	e014      	b.n	8000588 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800055e:	4c90      	ldr	r4, [pc, #576]	; (80007a0 <HAL_RCC_OscConfig+0x270>)
 8000560:	6863      	ldr	r3, [r4, #4]
 8000562:	f003 030c 	and.w	r3, r3, #12
 8000566:	2b04      	cmp	r3, #4
 8000568:	d007      	beq.n	800057a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800056a:	6863      	ldr	r3, [r4, #4]
 800056c:	f003 030c 	and.w	r3, r3, #12
 8000570:	2b08      	cmp	r3, #8
 8000572:	d10c      	bne.n	800058e <HAL_RCC_OscConfig+0x5e>
 8000574:	6863      	ldr	r3, [r4, #4]
 8000576:	03de      	lsls	r6, r3, #15
 8000578:	d509      	bpl.n	800058e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800057a:	6823      	ldr	r3, [r4, #0]
 800057c:	039c      	lsls	r4, r3, #14
 800057e:	d5dd      	bpl.n	800053c <HAL_RCC_OscConfig+0xc>
 8000580:	686b      	ldr	r3, [r5, #4]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d1da      	bne.n	800053c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000586:	2001      	movs	r0, #1
}
 8000588:	b002      	add	sp, #8
 800058a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800058e:	686b      	ldr	r3, [r5, #4]
 8000590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000594:	d110      	bne.n	80005b8 <HAL_RCC_OscConfig+0x88>
 8000596:	6823      	ldr	r3, [r4, #0]
 8000598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800059c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800059e:	f7ff fe1f 	bl	80001e0 <HAL_GetTick>
 80005a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005a4:	6823      	ldr	r3, [r4, #0]
 80005a6:	0398      	lsls	r0, r3, #14
 80005a8:	d4c8      	bmi.n	800053c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005aa:	f7ff fe19 	bl	80001e0 <HAL_GetTick>
 80005ae:	1b80      	subs	r0, r0, r6
 80005b0:	2864      	cmp	r0, #100	; 0x64
 80005b2:	d9f7      	bls.n	80005a4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80005b4:	2003      	movs	r0, #3
 80005b6:	e7e7      	b.n	8000588 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005b8:	b99b      	cbnz	r3, 80005e2 <HAL_RCC_OscConfig+0xb2>
 80005ba:	6823      	ldr	r3, [r4, #0]
 80005bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005c0:	6023      	str	r3, [r4, #0]
 80005c2:	6823      	ldr	r3, [r4, #0]
 80005c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005c8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005ca:	f7ff fe09 	bl	80001e0 <HAL_GetTick>
 80005ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005d0:	6823      	ldr	r3, [r4, #0]
 80005d2:	0399      	lsls	r1, r3, #14
 80005d4:	d5b2      	bpl.n	800053c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005d6:	f7ff fe03 	bl	80001e0 <HAL_GetTick>
 80005da:	1b80      	subs	r0, r0, r6
 80005dc:	2864      	cmp	r0, #100	; 0x64
 80005de:	d9f7      	bls.n	80005d0 <HAL_RCC_OscConfig+0xa0>
 80005e0:	e7e8      	b.n	80005b4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005e6:	6823      	ldr	r3, [r4, #0]
 80005e8:	d103      	bne.n	80005f2 <HAL_RCC_OscConfig+0xc2>
 80005ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005ee:	6023      	str	r3, [r4, #0]
 80005f0:	e7d1      	b.n	8000596 <HAL_RCC_OscConfig+0x66>
 80005f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005f6:	6023      	str	r3, [r4, #0]
 80005f8:	6823      	ldr	r3, [r4, #0]
 80005fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005fe:	e7cd      	b.n	800059c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000600:	4c67      	ldr	r4, [pc, #412]	; (80007a0 <HAL_RCC_OscConfig+0x270>)
 8000602:	6863      	ldr	r3, [r4, #4]
 8000604:	f013 0f0c 	tst.w	r3, #12
 8000608:	d007      	beq.n	800061a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800060a:	6863      	ldr	r3, [r4, #4]
 800060c:	f003 030c 	and.w	r3, r3, #12
 8000610:	2b08      	cmp	r3, #8
 8000612:	d110      	bne.n	8000636 <HAL_RCC_OscConfig+0x106>
 8000614:	6863      	ldr	r3, [r4, #4]
 8000616:	03da      	lsls	r2, r3, #15
 8000618:	d40d      	bmi.n	8000636 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800061a:	6823      	ldr	r3, [r4, #0]
 800061c:	079b      	lsls	r3, r3, #30
 800061e:	d502      	bpl.n	8000626 <HAL_RCC_OscConfig+0xf6>
 8000620:	692b      	ldr	r3, [r5, #16]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d1af      	bne.n	8000586 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000626:	6823      	ldr	r3, [r4, #0]
 8000628:	696a      	ldr	r2, [r5, #20]
 800062a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800062e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000632:	6023      	str	r3, [r4, #0]
 8000634:	e785      	b.n	8000542 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000636:	692a      	ldr	r2, [r5, #16]
 8000638:	4b5a      	ldr	r3, [pc, #360]	; (80007a4 <HAL_RCC_OscConfig+0x274>)
 800063a:	b16a      	cbz	r2, 8000658 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 800063c:	2201      	movs	r2, #1
 800063e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000640:	f7ff fdce 	bl	80001e0 <HAL_GetTick>
 8000644:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000646:	6823      	ldr	r3, [r4, #0]
 8000648:	079f      	lsls	r7, r3, #30
 800064a:	d4ec      	bmi.n	8000626 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800064c:	f7ff fdc8 	bl	80001e0 <HAL_GetTick>
 8000650:	1b80      	subs	r0, r0, r6
 8000652:	2802      	cmp	r0, #2
 8000654:	d9f7      	bls.n	8000646 <HAL_RCC_OscConfig+0x116>
 8000656:	e7ad      	b.n	80005b4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000658:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800065a:	f7ff fdc1 	bl	80001e0 <HAL_GetTick>
 800065e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000660:	6823      	ldr	r3, [r4, #0]
 8000662:	0798      	lsls	r0, r3, #30
 8000664:	f57f af6d 	bpl.w	8000542 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000668:	f7ff fdba 	bl	80001e0 <HAL_GetTick>
 800066c:	1b80      	subs	r0, r0, r6
 800066e:	2802      	cmp	r0, #2
 8000670:	d9f6      	bls.n	8000660 <HAL_RCC_OscConfig+0x130>
 8000672:	e79f      	b.n	80005b4 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000674:	69aa      	ldr	r2, [r5, #24]
 8000676:	4c4a      	ldr	r4, [pc, #296]	; (80007a0 <HAL_RCC_OscConfig+0x270>)
 8000678:	4b4b      	ldr	r3, [pc, #300]	; (80007a8 <HAL_RCC_OscConfig+0x278>)
 800067a:	b1da      	cbz	r2, 80006b4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 800067c:	2201      	movs	r2, #1
 800067e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000680:	f7ff fdae 	bl	80001e0 <HAL_GetTick>
 8000684:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000688:	079b      	lsls	r3, r3, #30
 800068a:	d50d      	bpl.n	80006a8 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800068c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000690:	4b46      	ldr	r3, [pc, #280]	; (80007ac <HAL_RCC_OscConfig+0x27c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	fbb3 f3f2 	udiv	r3, r3, r2
 8000698:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800069a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800069c:	9b01      	ldr	r3, [sp, #4]
 800069e:	1e5a      	subs	r2, r3, #1
 80006a0:	9201      	str	r2, [sp, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1f9      	bne.n	800069a <HAL_RCC_OscConfig+0x16a>
 80006a6:	e750      	b.n	800054a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006a8:	f7ff fd9a 	bl	80001e0 <HAL_GetTick>
 80006ac:	1b80      	subs	r0, r0, r6
 80006ae:	2802      	cmp	r0, #2
 80006b0:	d9e9      	bls.n	8000686 <HAL_RCC_OscConfig+0x156>
 80006b2:	e77f      	b.n	80005b4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80006b4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006b6:	f7ff fd93 	bl	80001e0 <HAL_GetTick>
 80006ba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006be:	079f      	lsls	r7, r3, #30
 80006c0:	f57f af43 	bpl.w	800054a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006c4:	f7ff fd8c 	bl	80001e0 <HAL_GetTick>
 80006c8:	1b80      	subs	r0, r0, r6
 80006ca:	2802      	cmp	r0, #2
 80006cc:	d9f6      	bls.n	80006bc <HAL_RCC_OscConfig+0x18c>
 80006ce:	e771      	b.n	80005b4 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006d0:	4c33      	ldr	r4, [pc, #204]	; (80007a0 <HAL_RCC_OscConfig+0x270>)
 80006d2:	69e3      	ldr	r3, [r4, #28]
 80006d4:	00d8      	lsls	r0, r3, #3
 80006d6:	d424      	bmi.n	8000722 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80006d8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	69e3      	ldr	r3, [r4, #28]
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e0:	61e3      	str	r3, [r4, #28]
 80006e2:	69e3      	ldr	r3, [r4, #28]
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006ec:	4e30      	ldr	r6, [pc, #192]	; (80007b0 <HAL_RCC_OscConfig+0x280>)
 80006ee:	6833      	ldr	r3, [r6, #0]
 80006f0:	05d9      	lsls	r1, r3, #23
 80006f2:	d518      	bpl.n	8000726 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006f4:	68eb      	ldr	r3, [r5, #12]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d126      	bne.n	8000748 <HAL_RCC_OscConfig+0x218>
 80006fa:	6a23      	ldr	r3, [r4, #32]
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000702:	f7ff fd6d 	bl	80001e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000706:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800070a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800070c:	6a23      	ldr	r3, [r4, #32]
 800070e:	079b      	lsls	r3, r3, #30
 8000710:	d53f      	bpl.n	8000792 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000712:	2f00      	cmp	r7, #0
 8000714:	f43f af1d 	beq.w	8000552 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000718:	69e3      	ldr	r3, [r4, #28]
 800071a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800071e:	61e3      	str	r3, [r4, #28]
 8000720:	e717      	b.n	8000552 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000722:	2700      	movs	r7, #0
 8000724:	e7e2      	b.n	80006ec <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000726:	6833      	ldr	r3, [r6, #0]
 8000728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800072c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800072e:	f7ff fd57 	bl	80001e0 <HAL_GetTick>
 8000732:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000734:	6833      	ldr	r3, [r6, #0]
 8000736:	05da      	lsls	r2, r3, #23
 8000738:	d4dc      	bmi.n	80006f4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800073a:	f7ff fd51 	bl	80001e0 <HAL_GetTick>
 800073e:	eba0 0008 	sub.w	r0, r0, r8
 8000742:	2864      	cmp	r0, #100	; 0x64
 8000744:	d9f6      	bls.n	8000734 <HAL_RCC_OscConfig+0x204>
 8000746:	e735      	b.n	80005b4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000748:	b9ab      	cbnz	r3, 8000776 <HAL_RCC_OscConfig+0x246>
 800074a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800074c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000750:	f023 0301 	bic.w	r3, r3, #1
 8000754:	6223      	str	r3, [r4, #32]
 8000756:	6a23      	ldr	r3, [r4, #32]
 8000758:	f023 0304 	bic.w	r3, r3, #4
 800075c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800075e:	f7ff fd3f 	bl	80001e0 <HAL_GetTick>
 8000762:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000764:	6a23      	ldr	r3, [r4, #32]
 8000766:	0798      	lsls	r0, r3, #30
 8000768:	d5d3      	bpl.n	8000712 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800076a:	f7ff fd39 	bl	80001e0 <HAL_GetTick>
 800076e:	1b80      	subs	r0, r0, r6
 8000770:	4540      	cmp	r0, r8
 8000772:	d9f7      	bls.n	8000764 <HAL_RCC_OscConfig+0x234>
 8000774:	e71e      	b.n	80005b4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000776:	2b05      	cmp	r3, #5
 8000778:	6a23      	ldr	r3, [r4, #32]
 800077a:	d103      	bne.n	8000784 <HAL_RCC_OscConfig+0x254>
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6223      	str	r3, [r4, #32]
 8000782:	e7ba      	b.n	80006fa <HAL_RCC_OscConfig+0x1ca>
 8000784:	f023 0301 	bic.w	r3, r3, #1
 8000788:	6223      	str	r3, [r4, #32]
 800078a:	6a23      	ldr	r3, [r4, #32]
 800078c:	f023 0304 	bic.w	r3, r3, #4
 8000790:	e7b6      	b.n	8000700 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000792:	f7ff fd25 	bl	80001e0 <HAL_GetTick>
 8000796:	eba0 0008 	sub.w	r0, r0, r8
 800079a:	42b0      	cmp	r0, r6
 800079c:	d9b6      	bls.n	800070c <HAL_RCC_OscConfig+0x1dc>
 800079e:	e709      	b.n	80005b4 <HAL_RCC_OscConfig+0x84>
 80007a0:	40021000 	.word	0x40021000
 80007a4:	42420000 	.word	0x42420000
 80007a8:	42420480 	.word	0x42420480
 80007ac:	2000000c 	.word	0x2000000c
 80007b0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007b4:	4c22      	ldr	r4, [pc, #136]	; (8000840 <HAL_RCC_OscConfig+0x310>)
 80007b6:	6863      	ldr	r3, [r4, #4]
 80007b8:	f003 030c 	and.w	r3, r3, #12
 80007bc:	2b08      	cmp	r3, #8
 80007be:	f43f aee2 	beq.w	8000586 <HAL_RCC_OscConfig+0x56>
 80007c2:	2300      	movs	r3, #0
 80007c4:	4e1f      	ldr	r6, [pc, #124]	; (8000844 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007c6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80007c8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007ca:	d12b      	bne.n	8000824 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80007cc:	f7ff fd08 	bl	80001e0 <HAL_GetTick>
 80007d0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007d2:	6823      	ldr	r3, [r4, #0]
 80007d4:	0199      	lsls	r1, r3, #6
 80007d6:	d41f      	bmi.n	8000818 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80007d8:	6a2b      	ldr	r3, [r5, #32]
 80007da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007de:	d105      	bne.n	80007ec <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80007e0:	6862      	ldr	r2, [r4, #4]
 80007e2:	68a9      	ldr	r1, [r5, #8]
 80007e4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80007e8:	430a      	orrs	r2, r1
 80007ea:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80007ec:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80007ee:	6862      	ldr	r2, [r4, #4]
 80007f0:	430b      	orrs	r3, r1
 80007f2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80007f6:	4313      	orrs	r3, r2
 80007f8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80007fa:	2301      	movs	r3, #1
 80007fc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80007fe:	f7ff fcef 	bl	80001e0 <HAL_GetTick>
 8000802:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000804:	6823      	ldr	r3, [r4, #0]
 8000806:	019a      	lsls	r2, r3, #6
 8000808:	f53f aea7 	bmi.w	800055a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800080c:	f7ff fce8 	bl	80001e0 <HAL_GetTick>
 8000810:	1b40      	subs	r0, r0, r5
 8000812:	2802      	cmp	r0, #2
 8000814:	d9f6      	bls.n	8000804 <HAL_RCC_OscConfig+0x2d4>
 8000816:	e6cd      	b.n	80005b4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000818:	f7ff fce2 	bl	80001e0 <HAL_GetTick>
 800081c:	1bc0      	subs	r0, r0, r7
 800081e:	2802      	cmp	r0, #2
 8000820:	d9d7      	bls.n	80007d2 <HAL_RCC_OscConfig+0x2a2>
 8000822:	e6c7      	b.n	80005b4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000824:	f7ff fcdc 	bl	80001e0 <HAL_GetTick>
 8000828:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800082a:	6823      	ldr	r3, [r4, #0]
 800082c:	019b      	lsls	r3, r3, #6
 800082e:	f57f ae94 	bpl.w	800055a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000832:	f7ff fcd5 	bl	80001e0 <HAL_GetTick>
 8000836:	1b40      	subs	r0, r0, r5
 8000838:	2802      	cmp	r0, #2
 800083a:	d9f6      	bls.n	800082a <HAL_RCC_OscConfig+0x2fa>
 800083c:	e6ba      	b.n	80005b4 <HAL_RCC_OscConfig+0x84>
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000
 8000844:	42420060 	.word	0x42420060

08000848 <HAL_RCC_GetSysClockFreq>:
{
 8000848:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800084c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800084e:	ac02      	add	r4, sp, #8
 8000850:	f103 0510 	add.w	r5, r3, #16
 8000854:	4622      	mov	r2, r4
 8000856:	6818      	ldr	r0, [r3, #0]
 8000858:	6859      	ldr	r1, [r3, #4]
 800085a:	3308      	adds	r3, #8
 800085c:	c203      	stmia	r2!, {r0, r1}
 800085e:	42ab      	cmp	r3, r5
 8000860:	4614      	mov	r4, r2
 8000862:	d1f7      	bne.n	8000854 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000864:	2301      	movs	r3, #1
 8000866:	f88d 3004 	strb.w	r3, [sp, #4]
 800086a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800086c:	4911      	ldr	r1, [pc, #68]	; (80008b4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800086e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000872:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000874:	f003 020c 	and.w	r2, r3, #12
 8000878:	2a08      	cmp	r2, #8
 800087a:	d117      	bne.n	80008ac <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800087c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000880:	a806      	add	r0, sp, #24
 8000882:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000884:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000886:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800088a:	d50c      	bpl.n	80008a6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800088c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800088e:	480a      	ldr	r0, [pc, #40]	; (80008b8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000890:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000894:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000896:	aa06      	add	r2, sp, #24
 8000898:	4413      	add	r3, r2
 800089a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800089e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80008a2:	b007      	add	sp, #28
 80008a4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <HAL_RCC_GetSysClockFreq+0x74>)
 80008a8:	4350      	muls	r0, r2
 80008aa:	e7fa      	b.n	80008a2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80008ae:	e7f8      	b.n	80008a2 <HAL_RCC_GetSysClockFreq+0x5a>
 80008b0:	08001b18 	.word	0x08001b18
 80008b4:	40021000 	.word	0x40021000
 80008b8:	007a1200 	.word	0x007a1200
 80008bc:	003d0900 	.word	0x003d0900

080008c0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008c0:	4a54      	ldr	r2, [pc, #336]	; (8000a14 <HAL_RCC_ClockConfig+0x154>)
{
 80008c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008c6:	6813      	ldr	r3, [r2, #0]
{
 80008c8:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	428b      	cmp	r3, r1
{
 80008d0:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008d2:	d32a      	bcc.n	800092a <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008d4:	6829      	ldr	r1, [r5, #0]
 80008d6:	078c      	lsls	r4, r1, #30
 80008d8:	d434      	bmi.n	8000944 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80008da:	07ca      	lsls	r2, r1, #31
 80008dc:	d447      	bmi.n	800096e <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80008de:	4a4d      	ldr	r2, [pc, #308]	; (8000a14 <HAL_RCC_ClockConfig+0x154>)
 80008e0:	6813      	ldr	r3, [r2, #0]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	429e      	cmp	r6, r3
 80008e8:	f0c0 8082 	bcc.w	80009f0 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008ec:	682a      	ldr	r2, [r5, #0]
 80008ee:	4c4a      	ldr	r4, [pc, #296]	; (8000a18 <HAL_RCC_ClockConfig+0x158>)
 80008f0:	f012 0f04 	tst.w	r2, #4
 80008f4:	f040 8087 	bne.w	8000a06 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008f8:	0713      	lsls	r3, r2, #28
 80008fa:	d506      	bpl.n	800090a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80008fc:	6863      	ldr	r3, [r4, #4]
 80008fe:	692a      	ldr	r2, [r5, #16]
 8000900:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000904:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000908:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800090a:	f7ff ff9d 	bl	8000848 <HAL_RCC_GetSysClockFreq>
 800090e:	6863      	ldr	r3, [r4, #4]
 8000910:	4a42      	ldr	r2, [pc, #264]	; (8000a1c <HAL_RCC_ClockConfig+0x15c>)
 8000912:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000916:	5cd3      	ldrb	r3, [r2, r3]
 8000918:	40d8      	lsrs	r0, r3
 800091a:	4b41      	ldr	r3, [pc, #260]	; (8000a20 <HAL_RCC_ClockConfig+0x160>)
 800091c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff fc1c 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 8000924:	2000      	movs	r0, #0
}
 8000926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800092a:	6813      	ldr	r3, [r2, #0]
 800092c:	f023 0307 	bic.w	r3, r3, #7
 8000930:	430b      	orrs	r3, r1
 8000932:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000934:	6813      	ldr	r3, [r2, #0]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	4299      	cmp	r1, r3
 800093c:	d0ca      	beq.n	80008d4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800093e:	2001      	movs	r0, #1
 8000940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000944:	4b34      	ldr	r3, [pc, #208]	; (8000a18 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000946:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800094a:	bf1e      	ittt	ne
 800094c:	685a      	ldrne	r2, [r3, #4]
 800094e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000952:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000954:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000956:	bf42      	ittt	mi
 8000958:	685a      	ldrmi	r2, [r3, #4]
 800095a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800095e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000960:	685a      	ldr	r2, [r3, #4]
 8000962:	68a8      	ldr	r0, [r5, #8]
 8000964:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000968:	4302      	orrs	r2, r0
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	e7b5      	b.n	80008da <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800096e:	686a      	ldr	r2, [r5, #4]
 8000970:	4c29      	ldr	r4, [pc, #164]	; (8000a18 <HAL_RCC_ClockConfig+0x158>)
 8000972:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000974:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000976:	d11c      	bne.n	80009b2 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000978:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800097c:	d0df      	beq.n	800093e <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800097e:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000980:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000984:	f023 0303 	bic.w	r3, r3, #3
 8000988:	4313      	orrs	r3, r2
 800098a:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800098c:	f7ff fc28 	bl	80001e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000990:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000992:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000994:	2b01      	cmp	r3, #1
 8000996:	d114      	bne.n	80009c2 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000998:	6863      	ldr	r3, [r4, #4]
 800099a:	f003 030c 	and.w	r3, r3, #12
 800099e:	2b04      	cmp	r3, #4
 80009a0:	d09d      	beq.n	80008de <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009a2:	f7ff fc1d 	bl	80001e0 <HAL_GetTick>
 80009a6:	1bc0      	subs	r0, r0, r7
 80009a8:	4540      	cmp	r0, r8
 80009aa:	d9f5      	bls.n	8000998 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80009ac:	2003      	movs	r0, #3
 80009ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009b2:	2a02      	cmp	r2, #2
 80009b4:	d102      	bne.n	80009bc <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009b6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80009ba:	e7df      	b.n	800097c <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009bc:	f013 0f02 	tst.w	r3, #2
 80009c0:	e7dc      	b.n	800097c <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d10f      	bne.n	80009e6 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009c6:	6863      	ldr	r3, [r4, #4]
 80009c8:	f003 030c 	and.w	r3, r3, #12
 80009cc:	2b08      	cmp	r3, #8
 80009ce:	d086      	beq.n	80008de <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009d0:	f7ff fc06 	bl	80001e0 <HAL_GetTick>
 80009d4:	1bc0      	subs	r0, r0, r7
 80009d6:	4540      	cmp	r0, r8
 80009d8:	d9f5      	bls.n	80009c6 <HAL_RCC_ClockConfig+0x106>
 80009da:	e7e7      	b.n	80009ac <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009dc:	f7ff fc00 	bl	80001e0 <HAL_GetTick>
 80009e0:	1bc0      	subs	r0, r0, r7
 80009e2:	4540      	cmp	r0, r8
 80009e4:	d8e2      	bhi.n	80009ac <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009e6:	6863      	ldr	r3, [r4, #4]
 80009e8:	f013 0f0c 	tst.w	r3, #12
 80009ec:	d1f6      	bne.n	80009dc <HAL_RCC_ClockConfig+0x11c>
 80009ee:	e776      	b.n	80008de <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009f0:	6813      	ldr	r3, [r2, #0]
 80009f2:	f023 0307 	bic.w	r3, r3, #7
 80009f6:	4333      	orrs	r3, r6
 80009f8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009fa:	6813      	ldr	r3, [r2, #0]
 80009fc:	f003 0307 	and.w	r3, r3, #7
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d19c      	bne.n	800093e <HAL_RCC_ClockConfig+0x7e>
 8000a04:	e772      	b.n	80008ec <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a06:	6863      	ldr	r3, [r4, #4]
 8000a08:	68e9      	ldr	r1, [r5, #12]
 8000a0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a0e:	430b      	orrs	r3, r1
 8000a10:	6063      	str	r3, [r4, #4]
 8000a12:	e771      	b.n	80008f8 <HAL_RCC_ClockConfig+0x38>
 8000a14:	40022000 	.word	0x40022000
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	08001b3f 	.word	0x08001b3f
 8000a20:	2000000c 	.word	0x2000000c

08000a24 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000a2e:	5cd3      	ldrb	r3, [r2, r3]
 8000a30:	4a03      	ldr	r2, [pc, #12]	; (8000a40 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000a32:	6810      	ldr	r0, [r2, #0]
}    
 8000a34:	40d8      	lsrs	r0, r3
 8000a36:	4770      	bx	lr
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	08001b4f 	.word	0x08001b4f
 8000a40:	2000000c 	.word	0x2000000c

08000a44 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000a4e:	5cd3      	ldrb	r3, [r2, r3]
 8000a50:	4a03      	ldr	r2, [pc, #12]	; (8000a60 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000a52:	6810      	ldr	r0, [r2, #0]
} 
 8000a54:	40d8      	lsrs	r0, r3
 8000a56:	4770      	bx	lr
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	08001b4f 	.word	0x08001b4f
 8000a60:	2000000c 	.word	0x2000000c

08000a64 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000a64:	6803      	ldr	r3, [r0, #0]
 8000a66:	68da      	ldr	r2, [r3, #12]
 8000a68:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000a6c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000a6e:	695a      	ldr	r2, [r3, #20]
 8000a70:	f022 0201 	bic.w	r2, r2, #1
 8000a74:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000a76:	2320      	movs	r3, #32
 8000a78:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000a7c:	4770      	bx	lr
	...

08000a80 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000a84:	6805      	ldr	r5, [r0, #0]
 8000a86:	68c2      	ldr	r2, [r0, #12]
 8000a88:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a8a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000a8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a90:	4313      	orrs	r3, r2
 8000a92:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a94:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000a96:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a98:	430b      	orrs	r3, r1
 8000a9a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000a9c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000aa0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000aa4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000aaa:	696b      	ldr	r3, [r5, #20]
 8000aac:	6982      	ldr	r2, [r0, #24]
 8000aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000ab6:	4b40      	ldr	r3, [pc, #256]	; (8000bb8 <UART_SetConfig+0x138>)
{
 8000ab8:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000aba:	429d      	cmp	r5, r3
 8000abc:	f04f 0419 	mov.w	r4, #25
 8000ac0:	d146      	bne.n	8000b50 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000ac2:	f7ff ffbf 	bl	8000a44 <HAL_RCC_GetPCLK2Freq>
 8000ac6:	fb04 f300 	mul.w	r3, r4, r0
 8000aca:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000ace:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000ad2:	00b6      	lsls	r6, r6, #2
 8000ad4:	fbb3 f3f6 	udiv	r3, r3, r6
 8000ad8:	fbb3 f3f8 	udiv	r3, r3, r8
 8000adc:	011e      	lsls	r6, r3, #4
 8000ade:	f7ff ffb1 	bl	8000a44 <HAL_RCC_GetPCLK2Freq>
 8000ae2:	4360      	muls	r0, r4
 8000ae4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	fbb0 f7f3 	udiv	r7, r0, r3
 8000aee:	f7ff ffa9 	bl	8000a44 <HAL_RCC_GetPCLK2Freq>
 8000af2:	4360      	muls	r0, r4
 8000af4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8000afe:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b02:	fb08 7313 	mls	r3, r8, r3, r7
 8000b06:	011b      	lsls	r3, r3, #4
 8000b08:	3332      	adds	r3, #50	; 0x32
 8000b0a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b0e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000b12:	f7ff ff97 	bl	8000a44 <HAL_RCC_GetPCLK2Freq>
 8000b16:	4360      	muls	r0, r4
 8000b18:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000b1c:	0092      	lsls	r2, r2, #2
 8000b1e:	fbb0 faf2 	udiv	sl, r0, r2
 8000b22:	f7ff ff8f 	bl	8000a44 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000b26:	4360      	muls	r0, r4
 8000b28:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b32:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b36:	fb08 a313 	mls	r3, r8, r3, sl
 8000b3a:	011b      	lsls	r3, r3, #4
 8000b3c:	3332      	adds	r3, #50	; 0x32
 8000b3e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	433b      	orrs	r3, r7
 8000b48:	4433      	add	r3, r6
 8000b4a:	60ab      	str	r3, [r5, #8]
 8000b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b50:	f7ff ff68 	bl	8000a24 <HAL_RCC_GetPCLK1Freq>
 8000b54:	fb04 f300 	mul.w	r3, r4, r0
 8000b58:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000b5c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000b60:	00b6      	lsls	r6, r6, #2
 8000b62:	fbb3 f3f6 	udiv	r3, r3, r6
 8000b66:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b6a:	011e      	lsls	r6, r3, #4
 8000b6c:	f7ff ff5a 	bl	8000a24 <HAL_RCC_GetPCLK1Freq>
 8000b70:	4360      	muls	r0, r4
 8000b72:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	fbb0 f7f3 	udiv	r7, r0, r3
 8000b7c:	f7ff ff52 	bl	8000a24 <HAL_RCC_GetPCLK1Freq>
 8000b80:	4360      	muls	r0, r4
 8000b82:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b8c:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b90:	fb08 7313 	mls	r3, r8, r3, r7
 8000b94:	011b      	lsls	r3, r3, #4
 8000b96:	3332      	adds	r3, #50	; 0x32
 8000b98:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b9c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000ba0:	f7ff ff40 	bl	8000a24 <HAL_RCC_GetPCLK1Freq>
 8000ba4:	4360      	muls	r0, r4
 8000ba6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000baa:	0092      	lsls	r2, r2, #2
 8000bac:	fbb0 faf2 	udiv	sl, r0, r2
 8000bb0:	f7ff ff38 	bl	8000a24 <HAL_RCC_GetPCLK1Freq>
 8000bb4:	e7b7      	b.n	8000b26 <UART_SetConfig+0xa6>
 8000bb6:	bf00      	nop
 8000bb8:	40013800 	.word	0x40013800

08000bbc <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	460e      	mov	r6, r1
 8000bc2:	4617      	mov	r7, r2
 8000bc4:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000bc6:	6821      	ldr	r1, [r4, #0]
 8000bc8:	680b      	ldr	r3, [r1, #0]
 8000bca:	ea36 0303 	bics.w	r3, r6, r3
 8000bce:	d101      	bne.n	8000bd4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000bd0:	2000      	movs	r0, #0
}
 8000bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000bd4:	1c6b      	adds	r3, r5, #1
 8000bd6:	d0f7      	beq.n	8000bc8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000bd8:	b995      	cbnz	r5, 8000c00 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000bda:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000bdc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000bde:	68da      	ldr	r2, [r3, #12]
 8000be0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000be4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000be6:	695a      	ldr	r2, [r3, #20]
 8000be8:	f022 0201 	bic.w	r2, r2, #1
 8000bec:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000bee:	2320      	movs	r3, #32
 8000bf0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000bf4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000c00:	f7ff faee 	bl	80001e0 <HAL_GetTick>
 8000c04:	1bc0      	subs	r0, r0, r7
 8000c06:	4285      	cmp	r5, r0
 8000c08:	d2dd      	bcs.n	8000bc6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000c0a:	e7e6      	b.n	8000bda <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000c0c <HAL_UART_Init>:
{
 8000c0c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000c0e:	4604      	mov	r4, r0
 8000c10:	b340      	cbz	r0, 8000c64 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000c12:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000c16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c1a:	b91b      	cbnz	r3, 8000c24 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000c1c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000c20:	f000 fa58 	bl	80010d4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000c24:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000c26:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000c28:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000c2c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000c2e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000c30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c34:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000c36:	f7ff ff23 	bl	8000a80 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c3a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c3c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c3e:	691a      	ldr	r2, [r3, #16]
 8000c40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000c46:	695a      	ldr	r2, [r3, #20]
 8000c48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000c4c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c54:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000c56:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c58:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000c5a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000c5e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000c62:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c64:	2001      	movs	r0, #1
}
 8000c66:	bd10      	pop	{r4, pc}

08000c68 <HAL_UART_Transmit>:
{
 8000c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c6c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000c6e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000c72:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8000c74:	2b20      	cmp	r3, #32
{
 8000c76:	460d      	mov	r5, r1
 8000c78:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000c7a:	d14e      	bne.n	8000d1a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	d049      	beq.n	8000d14 <HAL_UART_Transmit+0xac>
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	d047      	beq.n	8000d14 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000c84:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d046      	beq.n	8000d1a <HAL_UART_Transmit+0xb2>
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000c96:	2321      	movs	r3, #33	; 0x21
 8000c98:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000c9c:	f7ff faa0 	bl	80001e0 <HAL_GetTick>
 8000ca0:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000ca2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000ca6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000caa:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	b96b      	cbnz	r3, 8000ccc <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4632      	mov	r2, r6
 8000cb4:	2140      	movs	r1, #64	; 0x40
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	f7ff ff80 	bl	8000bbc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000cbc:	b9a8      	cbnz	r0, 8000cea <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000cbe:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000cc0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000cc4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000ccc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cce:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000cd6:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cd8:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cde:	4620      	mov	r0, r4
 8000ce0:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ce2:	d10e      	bne.n	8000d02 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ce4:	f7ff ff6a 	bl	8000bbc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000ce8:	b110      	cbz	r0, 8000cf0 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000cea:	2003      	movs	r0, #3
 8000cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000cf0:	882b      	ldrh	r3, [r5, #0]
 8000cf2:	6822      	ldr	r2, [r4, #0]
 8000cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000cf8:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000cfa:	6923      	ldr	r3, [r4, #16]
 8000cfc:	b943      	cbnz	r3, 8000d10 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8000cfe:	3502      	adds	r5, #2
 8000d00:	e7d3      	b.n	8000caa <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d02:	f7ff ff5b 	bl	8000bbc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000d06:	2800      	cmp	r0, #0
 8000d08:	d1ef      	bne.n	8000cea <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000d0a:	6823      	ldr	r3, [r4, #0]
 8000d0c:	782a      	ldrb	r2, [r5, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	3501      	adds	r5, #1
 8000d12:	e7ca      	b.n	8000caa <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000d14:	2001      	movs	r0, #1
 8000d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000d1a:	2002      	movs	r0, #2
}
 8000d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000d20 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8000d20:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8000d24:	2b20      	cmp	r3, #32
 8000d26:	d120      	bne.n	8000d6a <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 8000d28:	b1e9      	cbz	r1, 8000d66 <HAL_UART_Receive_IT+0x46>
 8000d2a:	b1e2      	cbz	r2, 8000d66 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8000d2c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d01a      	beq.n	8000d6a <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8000d34:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8000d36:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d38:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000d3a:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d3c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000d3e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8000d42:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8000d44:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8000d46:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8000d48:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8000d4c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000d50:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8000d52:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8000d54:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8000d56:	f041 0101 	orr.w	r1, r1, #1
 8000d5a:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8000d5c:	68d1      	ldr	r1, [r2, #12]
 8000d5e:	f041 0120 	orr.w	r1, r1, #32
 8000d62:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8000d64:	4770      	bx	lr
      return HAL_ERROR;
 8000d66:	2001      	movs	r0, #1
 8000d68:	4770      	bx	lr
    return HAL_BUSY;
 8000d6a:	2002      	movs	r0, #2
}
 8000d6c:	4770      	bx	lr

08000d6e <HAL_UART_TxCpltCallback>:
 8000d6e:	4770      	bx	lr

08000d70 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8000d70:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8000d74:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8000d76:	2b22      	cmp	r3, #34	; 0x22
 8000d78:	d136      	bne.n	8000de8 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d7a:	6883      	ldr	r3, [r0, #8]
 8000d7c:	6901      	ldr	r1, [r0, #16]
 8000d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d82:	6802      	ldr	r2, [r0, #0]
 8000d84:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000d86:	d123      	bne.n	8000dd0 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000d88:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000d8a:	b9e9      	cbnz	r1, 8000dc8 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d90:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8000d94:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8000d96:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8000d98:	3c01      	subs	r4, #1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8000d9e:	b98c      	cbnz	r4, 8000dc4 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000da0:	6803      	ldr	r3, [r0, #0]
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	f022 0220 	bic.w	r2, r2, #32
 8000da8:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8000daa:	68da      	ldr	r2, [r3, #12]
 8000dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000db0:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8000db2:	695a      	ldr	r2, [r3, #20]
 8000db4:	f022 0201 	bic.w	r2, r2, #1
 8000db8:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8000dba:	2320      	movs	r3, #32
 8000dbc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8000dc0:	f000 f8be 	bl	8000f40 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8000dc4:	2000      	movs	r0, #0
}
 8000dc6:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	f823 2b01 	strh.w	r2, [r3], #1
 8000dce:	e7e1      	b.n	8000d94 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000dd0:	b921      	cbnz	r1, 8000ddc <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8000dd2:	1c59      	adds	r1, r3, #1
 8000dd4:	6852      	ldr	r2, [r2, #4]
 8000dd6:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8000dd8:	701a      	strb	r2, [r3, #0]
 8000dda:	e7dc      	b.n	8000d96 <UART_Receive_IT+0x26>
 8000ddc:	6852      	ldr	r2, [r2, #4]
 8000dde:	1c59      	adds	r1, r3, #1
 8000de0:	6281      	str	r1, [r0, #40]	; 0x28
 8000de2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000de6:	e7f7      	b.n	8000dd8 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8000de8:	2002      	movs	r0, #2
 8000dea:	bd10      	pop	{r4, pc}

08000dec <HAL_UART_ErrorCallback>:
 8000dec:	4770      	bx	lr
	...

08000df0 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000df0:	6803      	ldr	r3, [r0, #0]
{
 8000df2:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000df4:	681a      	ldr	r2, [r3, #0]
{
 8000df6:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8000df8:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000dfa:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8000dfc:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8000dfe:	d107      	bne.n	8000e10 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000e00:	0696      	lsls	r6, r2, #26
 8000e02:	d55a      	bpl.n	8000eba <HAL_UART_IRQHandler+0xca>
 8000e04:	068d      	lsls	r5, r1, #26
 8000e06:	d558      	bpl.n	8000eba <HAL_UART_IRQHandler+0xca>
}
 8000e08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8000e0c:	f7ff bfb0 	b.w	8000d70 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8000e10:	f015 0501 	ands.w	r5, r5, #1
 8000e14:	d102      	bne.n	8000e1c <HAL_UART_IRQHandler+0x2c>
 8000e16:	f411 7f90 	tst.w	r1, #288	; 0x120
 8000e1a:	d04e      	beq.n	8000eba <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8000e1c:	07d3      	lsls	r3, r2, #31
 8000e1e:	d505      	bpl.n	8000e2c <HAL_UART_IRQHandler+0x3c>
 8000e20:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8000e22:	bf42      	ittt	mi
 8000e24:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8000e26:	f043 0301 	orrmi.w	r3, r3, #1
 8000e2a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e2c:	0750      	lsls	r0, r2, #29
 8000e2e:	d504      	bpl.n	8000e3a <HAL_UART_IRQHandler+0x4a>
 8000e30:	b11d      	cbz	r5, 8000e3a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8000e32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e3a:	0793      	lsls	r3, r2, #30
 8000e3c:	d504      	bpl.n	8000e48 <HAL_UART_IRQHandler+0x58>
 8000e3e:	b11d      	cbz	r5, 8000e48 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8000e40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e48:	0716      	lsls	r6, r2, #28
 8000e4a:	d504      	bpl.n	8000e56 <HAL_UART_IRQHandler+0x66>
 8000e4c:	b11d      	cbz	r5, 8000e56 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8000e4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e50:	f043 0308 	orr.w	r3, r3, #8
 8000e54:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8000e56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d066      	beq.n	8000f2a <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000e5c:	0695      	lsls	r5, r2, #26
 8000e5e:	d504      	bpl.n	8000e6a <HAL_UART_IRQHandler+0x7a>
 8000e60:	0688      	lsls	r0, r1, #26
 8000e62:	d502      	bpl.n	8000e6a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8000e64:	4620      	mov	r0, r4
 8000e66:	f7ff ff83 	bl	8000d70 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000e6a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8000e6c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000e6e:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8000e70:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000e72:	0711      	lsls	r1, r2, #28
 8000e74:	d402      	bmi.n	8000e7c <HAL_UART_IRQHandler+0x8c>
 8000e76:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000e7a:	d01a      	beq.n	8000eb2 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8000e7c:	f7ff fdf2 	bl	8000a64 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000e80:	6823      	ldr	r3, [r4, #0]
 8000e82:	695a      	ldr	r2, [r3, #20]
 8000e84:	0652      	lsls	r2, r2, #25
 8000e86:	d510      	bpl.n	8000eaa <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000e88:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8000e8a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e90:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8000e92:	b150      	cbz	r0, 8000eaa <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8000e94:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <HAL_UART_IRQHandler+0x13c>)
 8000e96:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8000e98:	f7ff fa22 	bl	80002e0 <HAL_DMA_Abort_IT>
 8000e9c:	2800      	cmp	r0, #0
 8000e9e:	d044      	beq.n	8000f2a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000ea0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8000ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000ea6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000ea8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8000eaa:	4620      	mov	r0, r4
 8000eac:	f7ff ff9e 	bl	8000dec <HAL_UART_ErrorCallback>
 8000eb0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8000eb2:	f7ff ff9b 	bl	8000dec <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000eb6:	63e5      	str	r5, [r4, #60]	; 0x3c
 8000eb8:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000eba:	0616      	lsls	r6, r2, #24
 8000ebc:	d527      	bpl.n	8000f0e <HAL_UART_IRQHandler+0x11e>
 8000ebe:	060d      	lsls	r5, r1, #24
 8000ec0:	d525      	bpl.n	8000f0e <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8000ec2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8000ec6:	2a21      	cmp	r2, #33	; 0x21
 8000ec8:	d12f      	bne.n	8000f2a <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000eca:	68a2      	ldr	r2, [r4, #8]
 8000ecc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000ed0:	6a22      	ldr	r2, [r4, #32]
 8000ed2:	d117      	bne.n	8000f04 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8000ed4:	8811      	ldrh	r1, [r2, #0]
 8000ed6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8000eda:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000edc:	6921      	ldr	r1, [r4, #16]
 8000ede:	b979      	cbnz	r1, 8000f00 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8000ee0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8000ee2:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8000ee4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8000ee6:	3a01      	subs	r2, #1
 8000ee8:	b292      	uxth	r2, r2
 8000eea:	84e2      	strh	r2, [r4, #38]	; 0x26
 8000eec:	b9ea      	cbnz	r2, 8000f2a <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ef4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8000f00:	3201      	adds	r2, #1
 8000f02:	e7ee      	b.n	8000ee2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8000f04:	1c51      	adds	r1, r2, #1
 8000f06:	6221      	str	r1, [r4, #32]
 8000f08:	7812      	ldrb	r2, [r2, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	e7ea      	b.n	8000ee4 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8000f0e:	0650      	lsls	r0, r2, #25
 8000f10:	d50b      	bpl.n	8000f2a <HAL_UART_IRQHandler+0x13a>
 8000f12:	064a      	lsls	r2, r1, #25
 8000f14:	d509      	bpl.n	8000f2a <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8000f16:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8000f18:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8000f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f1e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000f20:	2320      	movs	r3, #32
 8000f22:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8000f26:	f7ff ff22 	bl	8000d6e <HAL_UART_TxCpltCallback>
 8000f2a:	bd70      	pop	{r4, r5, r6, pc}
 8000f2c:	08000f31 	.word	0x08000f31

08000f30 <UART_DMAAbortOnError>:
{
 8000f30:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8000f32:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f34:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8000f36:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8000f38:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8000f3a:	f7ff ff57 	bl	8000dec <HAL_UART_ErrorCallback>
 8000f3e:	bd08      	pop	{r3, pc}

08000f40 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // колбек, вызываемый прерыванием от приёму от уарта
{
	if(huart == &huart1) // если задействован только один УАРТ, то это условие можно убрать
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_UART_RxCpltCallback+0x3c>)
{
 8000f42:	b410      	push	{r4}
	if(huart == &huart1) // если задействован только один УАРТ, то это условие можно убрать
 8000f44:	4283      	cmp	r3, r0
 8000f46:	d117      	bne.n	8000f78 <HAL_UART_RxCpltCallback+0x38>
	{
		i++;
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <HAL_UART_RxCpltCallback+0x40>)
		receiveBuffer[i] = rec; // складываем принятые байты в массив
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
		i++;
 8000f4c:	6810      	ldr	r0, [r2, #0]
		receiveBuffer[i] = rec; // складываем принятые байты в массив
 8000f4e:	781c      	ldrb	r4, [r3, #0]
 8000f50:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
		i++;
 8000f52:	1c41      	adds	r1, r0, #1

		if(rec == '\n' || i > BUFSIZE - 2) // проверяем пришёл ли "перенос строки" и подстраховываемся от переполнения массива
 8000f54:	2c0a      	cmp	r4, #10
		i++;
 8000f56:	6011      	str	r1, [r2, #0]
		receiveBuffer[i] = rec; // складываем принятые байты в массив
 8000f58:	545c      	strb	r4, [r3, r1]
		if(rec == '\n' || i > BUFSIZE - 2) // проверяем пришёл ли "перенос строки" и подстраховываемся от переполнения массива
 8000f5a:	d001      	beq.n	8000f60 <HAL_UART_RxCpltCallback+0x20>
 8000f5c:	293e      	cmp	r1, #62	; 0x3e
 8000f5e:	dd05      	ble.n	8000f6c <HAL_UART_RxCpltCallback+0x2c>
		{
			//HAL_UART_Transmit(&huart1, (uint8_t*)receiveBuffer, i + 1, 1000);
			i++;
			receiveBuffer[i] = 0; // зануляем конец строки (массива)
 8000f60:	2100      	movs	r1, #0
 8000f62:	4403      	add	r3, r0
 8000f64:	7099      	strb	r1, [r3, #2]
			i = -1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f6a:	6013      	str	r3, [r2, #0]
		}

		HAL_UART_Receive_IT(&huart1, &rec, 1); // инициируем прерывание по приёму байта
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4905      	ldr	r1, [pc, #20]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <HAL_UART_RxCpltCallback+0x3c>)
	}
}
 8000f72:	bc10      	pop	{r4}
		HAL_UART_Receive_IT(&huart1, &rec, 1); // инициируем прерывание по приёму байта
 8000f74:	f7ff bed4 	b.w	8000d20 <HAL_UART_Receive_IT>
}
 8000f78:	bc10      	pop	{r4}
 8000f7a:	4770      	bx	lr
 8000f7c:	200000e0 	.word	0x200000e0
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000120 	.word	0x20000120
 8000f88:	20000090 	.word	0x20000090

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b510      	push	{r4, lr}
 8000f8e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f90:	2228      	movs	r2, #40	; 0x28
 8000f92:	2100      	movs	r1, #0
 8000f94:	a806      	add	r0, sp, #24
 8000f96:	f000 f961 	bl	800125c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2214      	movs	r2, #20
 8000f9e:	a801      	add	r0, sp, #4
 8000fa0:	f000 f95c 	bl	800125c <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa8:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000faa:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fac:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fae:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fb0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb6:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb8:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fba:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbc:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbe:	f7ff fab7 	bl	8000530 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc2:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fcc:	4621      	mov	r1, r4
 8000fce:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd0:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd4:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd8:	f7ff fc72 	bl	80008c0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000fdc:	b010      	add	sp, #64	; 0x40
 8000fde:	bd10      	pop	{r4, pc}

08000fe0 <main>:
{
 8000fe0:	b570      	push	{r4, r5, r6, lr}
 8000fe2:	b09c      	sub	sp, #112	; 0x70
	char trans_str[TRANSIZE] = {0,};
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2260      	movs	r2, #96	; 0x60
 8000fe8:	a804      	add	r0, sp, #16
 8000fea:	f000 f937 	bl	800125c <memset>
  HAL_Init();
 8000fee:	f7ff f8d9 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8000ff2:	f7ff ffcb 	bl	8000f8c <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff6:	4b20      	ldr	r3, [pc, #128]	; (8001078 <main+0x98>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff8:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	699a      	ldr	r2, [r3, #24]
  huart1.Instance = USART1;
 8000ffc:	4d1f      	ldr	r5, [pc, #124]	; (800107c <main+0x9c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffe:	f042 0220 	orr.w	r2, r2, #32
 8001002:	619a      	str	r2, [r3, #24]
 8001004:	699a      	ldr	r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001006:	4628      	mov	r0, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001008:	f002 0220 	and.w	r2, r2, #32
 800100c:	9202      	str	r2, [sp, #8]
 800100e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	699a      	ldr	r2, [r3, #24]
	  snprintf(trans_str, TRANSIZE - 1, "Wait... %d Reciv - %s\n", i, receiveBuffer); // собираем строку для отправки
 8001012:	4e1b      	ldr	r6, [pc, #108]	; (8001080 <main+0xa0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	f042 0204 	orr.w	r2, r2, #4
 8001018:	619a      	str	r2, [r3, #24]
 800101a:	699b      	ldr	r3, [r3, #24]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800101c:	4a19      	ldr	r2, [pc, #100]	; (8001084 <main+0xa4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	9303      	str	r3, [sp, #12]
 8001024:	9b03      	ldr	r3, [sp, #12]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001026:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800102a:	e885 001c 	stmia.w	r5, {r2, r3, r4}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800102e:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001030:	60ec      	str	r4, [r5, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001032:	616b      	str	r3, [r5, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001034:	612c      	str	r4, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001036:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001038:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800103a:	f7ff fde7 	bl	8000c0c <HAL_UART_Init>
  HAL_UART_Receive_IT(&huart1, &rec, 1); // инициируем прерывание по приёму байта
 800103e:	4628      	mov	r0, r5
 8001040:	2201      	movs	r2, #1
 8001042:	4911      	ldr	r1, [pc, #68]	; (8001088 <main+0xa8>)
 8001044:	f7ff fe6c 	bl	8000d20 <HAL_UART_Receive_IT>
	  snprintf(trans_str, TRANSIZE - 1, "Wait... %d Reciv - %s\n", i, receiveBuffer); // собираем строку для отправки
 8001048:	4d10      	ldr	r5, [pc, #64]	; (800108c <main+0xac>)
	  i++; // просто счётчик (для красоты)
 800104a:	3401      	adds	r4, #1
	  snprintf(trans_str, TRANSIZE - 1, "Wait... %d Reciv - %s\n", i, receiveBuffer); // собираем строку для отправки
 800104c:	4623      	mov	r3, r4
 800104e:	462a      	mov	r2, r5
 8001050:	215f      	movs	r1, #95	; 0x5f
 8001052:	9600      	str	r6, [sp, #0]
 8001054:	a804      	add	r0, sp, #16
 8001056:	f000 f909 	bl	800126c <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 800105a:	a804      	add	r0, sp, #16
 800105c:	f7ff f876 	bl	800014c <strlen>
 8001060:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001064:	b282      	uxth	r2, r0
 8001066:	a904      	add	r1, sp, #16
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <main+0x9c>)
 800106a:	f7ff fdfd 	bl	8000c68 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800106e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001072:	f7ff f8bb 	bl	80001ec <HAL_Delay>
 8001076:	e7e8      	b.n	800104a <main+0x6a>
 8001078:	40021000 	.word	0x40021000
 800107c:	200000e0 	.word	0x200000e0
 8001080:	20000090 	.word	0x20000090
 8001084:	40013800 	.word	0x40013800
 8001088:	20000120 	.word	0x20000120
 800108c:	08001b28 	.word	0x08001b28

08001090 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_MspInit+0x3c>)
{
 8001092:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001094:	699a      	ldr	r2, [r3, #24]
 8001096:	f042 0201 	orr.w	r2, r2, #1
 800109a:	619a      	str	r2, [r3, #24]
 800109c:	699a      	ldr	r2, [r3, #24]
 800109e:	f002 0201 	and.w	r2, r2, #1
 80010a2:	9200      	str	r2, [sp, #0]
 80010a4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	69da      	ldr	r2, [r3, #28]
 80010a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010ac:	61da      	str	r2, [r3, #28]
 80010ae:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010ba:	6853      	ldr	r3, [r2, #4]
 80010bc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	b002      	add	sp, #8
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010000 	.word	0x40010000

080010d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d4:	b510      	push	{r4, lr}
 80010d6:	4604      	mov	r4, r0
 80010d8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	2210      	movs	r2, #16
 80010dc:	2100      	movs	r1, #0
 80010de:	a802      	add	r0, sp, #8
 80010e0:	f000 f8bc 	bl	800125c <memset>
  if(huart->Instance==USART1)
 80010e4:	6822      	ldr	r2, [r4, #0]
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_UART_MspInit+0x80>)
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d130      	bne.n	800114e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ec:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80010f0:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80010f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010f8:	619a      	str	r2, [r3, #24]
 80010fa:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	4816      	ldr	r0, [pc, #88]	; (8001158 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80010fe:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001102:	9200      	str	r2, [sp, #0]
 8001104:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001108:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	f042 0204 	orr.w	r2, r2, #4
 800110e:	619a      	str	r2, [r3, #24]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800111a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800111e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f7ff f922 	bl	8000370 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800112c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	a902      	add	r1, sp, #8
 8001132:	4809      	ldr	r0, [pc, #36]	; (8001158 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001134:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001136:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f7ff f919 	bl	8000370 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800113e:	2025      	movs	r0, #37	; 0x25
 8001140:	4622      	mov	r2, r4
 8001142:	4621      	mov	r1, r4
 8001144:	f7ff f876 	bl	8000234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001148:	2025      	movs	r0, #37	; 0x25
 800114a:	f7ff f8a7 	bl	800029c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800114e:	b006      	add	sp, #24
 8001150:	bd10      	pop	{r4, pc}
 8001152:	bf00      	nop
 8001154:	40013800 	.word	0x40013800
 8001158:	40010800 	.word	0x40010800

0800115c <NMI_Handler>:
 800115c:	4770      	bx	lr

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	e7fe      	b.n	800115e <HardFault_Handler>

08001160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001160:	e7fe      	b.n	8001160 <MemManage_Handler>

08001162 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001162:	e7fe      	b.n	8001162 <BusFault_Handler>

08001164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001164:	e7fe      	b.n	8001164 <UsageFault_Handler>

08001166 <SVC_Handler>:
 8001166:	4770      	bx	lr

08001168 <DebugMon_Handler>:
 8001168:	4770      	bx	lr

0800116a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116a:	4770      	bx	lr

0800116c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116c:	f7ff b82c 	b.w	80001c8 <HAL_IncTick>

08001170 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001170:	4801      	ldr	r0, [pc, #4]	; (8001178 <USART1_IRQHandler+0x8>)
 8001172:	f7ff be3d 	b.w	8000df0 <HAL_UART_IRQHandler>
 8001176:	bf00      	nop
 8001178:	200000e0 	.word	0x200000e0

0800117c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <SystemInit+0x40>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	f042 0201 	orr.w	r2, r2, #1
 8001184:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001186:	6859      	ldr	r1, [r3, #4]
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <SystemInit+0x44>)
 800118a:	400a      	ands	r2, r1
 800118c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001194:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001198:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011a0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80011a8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80011aa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011ae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80011b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <SystemInit+0x48>)
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000
 80011c0:	f8ff0000 	.word	0xf8ff0000
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80011c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80011ca:	e003      	b.n	80011d4 <LoopCopyDataInit>

080011cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80011ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80011d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80011d2:	3104      	adds	r1, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80011d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80011da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80011dc:	d3f6      	bcc.n	80011cc <CopyDataInit>
  ldr r2, =_sbss
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80011e0:	e002      	b.n	80011e8 <LoopFillZerobss>

080011e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80011e4:	f842 3b04 	str.w	r3, [r2], #4

080011e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80011ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80011ec:	d3f9      	bcc.n	80011e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011ee:	f7ff ffc5 	bl	800117c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f2:	f000 f80f 	bl	8001214 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011f6:	f7ff fef3 	bl	8000fe0 <main>
  bx lr
 80011fa:	4770      	bx	lr
  ldr r3, =_sidata
 80011fc:	08001b94 	.word	0x08001b94
  ldr r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001204:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001208:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 800120c:	20000128 	.word	0x20000128

08001210 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001210:	e7fe      	b.n	8001210 <ADC1_2_IRQHandler>
	...

08001214 <__libc_init_array>:
 8001214:	b570      	push	{r4, r5, r6, lr}
 8001216:	2500      	movs	r5, #0
 8001218:	4e0c      	ldr	r6, [pc, #48]	; (800124c <__libc_init_array+0x38>)
 800121a:	4c0d      	ldr	r4, [pc, #52]	; (8001250 <__libc_init_array+0x3c>)
 800121c:	1ba4      	subs	r4, r4, r6
 800121e:	10a4      	asrs	r4, r4, #2
 8001220:	42a5      	cmp	r5, r4
 8001222:	d109      	bne.n	8001238 <__libc_init_array+0x24>
 8001224:	f000 fc6c 	bl	8001b00 <_init>
 8001228:	2500      	movs	r5, #0
 800122a:	4e0a      	ldr	r6, [pc, #40]	; (8001254 <__libc_init_array+0x40>)
 800122c:	4c0a      	ldr	r4, [pc, #40]	; (8001258 <__libc_init_array+0x44>)
 800122e:	1ba4      	subs	r4, r4, r6
 8001230:	10a4      	asrs	r4, r4, #2
 8001232:	42a5      	cmp	r5, r4
 8001234:	d105      	bne.n	8001242 <__libc_init_array+0x2e>
 8001236:	bd70      	pop	{r4, r5, r6, pc}
 8001238:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800123c:	4798      	blx	r3
 800123e:	3501      	adds	r5, #1
 8001240:	e7ee      	b.n	8001220 <__libc_init_array+0xc>
 8001242:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001246:	4798      	blx	r3
 8001248:	3501      	adds	r5, #1
 800124a:	e7f2      	b.n	8001232 <__libc_init_array+0x1e>
 800124c:	08001b8c 	.word	0x08001b8c
 8001250:	08001b8c 	.word	0x08001b8c
 8001254:	08001b8c 	.word	0x08001b8c
 8001258:	08001b90 	.word	0x08001b90

0800125c <memset>:
 800125c:	4603      	mov	r3, r0
 800125e:	4402      	add	r2, r0
 8001260:	4293      	cmp	r3, r2
 8001262:	d100      	bne.n	8001266 <memset+0xa>
 8001264:	4770      	bx	lr
 8001266:	f803 1b01 	strb.w	r1, [r3], #1
 800126a:	e7f9      	b.n	8001260 <memset+0x4>

0800126c <sniprintf>:
 800126c:	b40c      	push	{r2, r3}
 800126e:	b530      	push	{r4, r5, lr}
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <sniprintf+0x64>)
 8001272:	1e0c      	subs	r4, r1, #0
 8001274:	b09d      	sub	sp, #116	; 0x74
 8001276:	681d      	ldr	r5, [r3, #0]
 8001278:	da08      	bge.n	800128c <sniprintf+0x20>
 800127a:	238b      	movs	r3, #139	; 0x8b
 800127c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001280:	602b      	str	r3, [r5, #0]
 8001282:	b01d      	add	sp, #116	; 0x74
 8001284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001288:	b002      	add	sp, #8
 800128a:	4770      	bx	lr
 800128c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001290:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001294:	bf0c      	ite	eq
 8001296:	4623      	moveq	r3, r4
 8001298:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800129c:	9304      	str	r3, [sp, #16]
 800129e:	9307      	str	r3, [sp, #28]
 80012a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a4:	9002      	str	r0, [sp, #8]
 80012a6:	9006      	str	r0, [sp, #24]
 80012a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80012ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80012ae:	ab21      	add	r3, sp, #132	; 0x84
 80012b0:	a902      	add	r1, sp, #8
 80012b2:	4628      	mov	r0, r5
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	f000 f869 	bl	800138c <_svfiprintf_r>
 80012ba:	1c43      	adds	r3, r0, #1
 80012bc:	bfbc      	itt	lt
 80012be:	238b      	movlt	r3, #139	; 0x8b
 80012c0:	602b      	strlt	r3, [r5, #0]
 80012c2:	2c00      	cmp	r4, #0
 80012c4:	d0dd      	beq.n	8001282 <sniprintf+0x16>
 80012c6:	2200      	movs	r2, #0
 80012c8:	9b02      	ldr	r3, [sp, #8]
 80012ca:	701a      	strb	r2, [r3, #0]
 80012cc:	e7d9      	b.n	8001282 <sniprintf+0x16>
 80012ce:	bf00      	nop
 80012d0:	20000010 	.word	0x20000010

080012d4 <__ssputs_r>:
 80012d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012d8:	688e      	ldr	r6, [r1, #8]
 80012da:	4682      	mov	sl, r0
 80012dc:	429e      	cmp	r6, r3
 80012de:	460c      	mov	r4, r1
 80012e0:	4691      	mov	r9, r2
 80012e2:	4698      	mov	r8, r3
 80012e4:	d835      	bhi.n	8001352 <__ssputs_r+0x7e>
 80012e6:	898a      	ldrh	r2, [r1, #12]
 80012e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80012ec:	d031      	beq.n	8001352 <__ssputs_r+0x7e>
 80012ee:	2302      	movs	r3, #2
 80012f0:	6825      	ldr	r5, [r4, #0]
 80012f2:	6909      	ldr	r1, [r1, #16]
 80012f4:	1a6f      	subs	r7, r5, r1
 80012f6:	6965      	ldr	r5, [r4, #20]
 80012f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80012fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8001300:	f108 0301 	add.w	r3, r8, #1
 8001304:	443b      	add	r3, r7
 8001306:	429d      	cmp	r5, r3
 8001308:	bf38      	it	cc
 800130a:	461d      	movcc	r5, r3
 800130c:	0553      	lsls	r3, r2, #21
 800130e:	d531      	bpl.n	8001374 <__ssputs_r+0xa0>
 8001310:	4629      	mov	r1, r5
 8001312:	f000 fb47 	bl	80019a4 <_malloc_r>
 8001316:	4606      	mov	r6, r0
 8001318:	b950      	cbnz	r0, 8001330 <__ssputs_r+0x5c>
 800131a:	230c      	movs	r3, #12
 800131c:	f8ca 3000 	str.w	r3, [sl]
 8001320:	89a3      	ldrh	r3, [r4, #12]
 8001322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800132a:	81a3      	strh	r3, [r4, #12]
 800132c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001330:	463a      	mov	r2, r7
 8001332:	6921      	ldr	r1, [r4, #16]
 8001334:	f000 fac4 	bl	80018c0 <memcpy>
 8001338:	89a3      	ldrh	r3, [r4, #12]
 800133a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800133e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001342:	81a3      	strh	r3, [r4, #12]
 8001344:	6126      	str	r6, [r4, #16]
 8001346:	443e      	add	r6, r7
 8001348:	6026      	str	r6, [r4, #0]
 800134a:	4646      	mov	r6, r8
 800134c:	6165      	str	r5, [r4, #20]
 800134e:	1bed      	subs	r5, r5, r7
 8001350:	60a5      	str	r5, [r4, #8]
 8001352:	4546      	cmp	r6, r8
 8001354:	bf28      	it	cs
 8001356:	4646      	movcs	r6, r8
 8001358:	4649      	mov	r1, r9
 800135a:	4632      	mov	r2, r6
 800135c:	6820      	ldr	r0, [r4, #0]
 800135e:	f000 faba 	bl	80018d6 <memmove>
 8001362:	68a3      	ldr	r3, [r4, #8]
 8001364:	2000      	movs	r0, #0
 8001366:	1b9b      	subs	r3, r3, r6
 8001368:	60a3      	str	r3, [r4, #8]
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	441e      	add	r6, r3
 800136e:	6026      	str	r6, [r4, #0]
 8001370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001374:	462a      	mov	r2, r5
 8001376:	f000 fb73 	bl	8001a60 <_realloc_r>
 800137a:	4606      	mov	r6, r0
 800137c:	2800      	cmp	r0, #0
 800137e:	d1e1      	bne.n	8001344 <__ssputs_r+0x70>
 8001380:	6921      	ldr	r1, [r4, #16]
 8001382:	4650      	mov	r0, sl
 8001384:	f000 fac2 	bl	800190c <_free_r>
 8001388:	e7c7      	b.n	800131a <__ssputs_r+0x46>
	...

0800138c <_svfiprintf_r>:
 800138c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001390:	b09d      	sub	sp, #116	; 0x74
 8001392:	9303      	str	r3, [sp, #12]
 8001394:	898b      	ldrh	r3, [r1, #12]
 8001396:	4680      	mov	r8, r0
 8001398:	061c      	lsls	r4, r3, #24
 800139a:	460d      	mov	r5, r1
 800139c:	4616      	mov	r6, r2
 800139e:	d50f      	bpl.n	80013c0 <_svfiprintf_r+0x34>
 80013a0:	690b      	ldr	r3, [r1, #16]
 80013a2:	b96b      	cbnz	r3, 80013c0 <_svfiprintf_r+0x34>
 80013a4:	2140      	movs	r1, #64	; 0x40
 80013a6:	f000 fafd 	bl	80019a4 <_malloc_r>
 80013aa:	6028      	str	r0, [r5, #0]
 80013ac:	6128      	str	r0, [r5, #16]
 80013ae:	b928      	cbnz	r0, 80013bc <_svfiprintf_r+0x30>
 80013b0:	230c      	movs	r3, #12
 80013b2:	f8c8 3000 	str.w	r3, [r8]
 80013b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ba:	e0c4      	b.n	8001546 <_svfiprintf_r+0x1ba>
 80013bc:	2340      	movs	r3, #64	; 0x40
 80013be:	616b      	str	r3, [r5, #20]
 80013c0:	2300      	movs	r3, #0
 80013c2:	9309      	str	r3, [sp, #36]	; 0x24
 80013c4:	2320      	movs	r3, #32
 80013c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80013ca:	2330      	movs	r3, #48	; 0x30
 80013cc:	f04f 0b01 	mov.w	fp, #1
 80013d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80013d4:	4637      	mov	r7, r6
 80013d6:	463c      	mov	r4, r7
 80013d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d13c      	bne.n	800145a <_svfiprintf_r+0xce>
 80013e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80013e4:	d00b      	beq.n	80013fe <_svfiprintf_r+0x72>
 80013e6:	4653      	mov	r3, sl
 80013e8:	4632      	mov	r2, r6
 80013ea:	4629      	mov	r1, r5
 80013ec:	4640      	mov	r0, r8
 80013ee:	f7ff ff71 	bl	80012d4 <__ssputs_r>
 80013f2:	3001      	adds	r0, #1
 80013f4:	f000 80a2 	beq.w	800153c <_svfiprintf_r+0x1b0>
 80013f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013fa:	4453      	add	r3, sl
 80013fc:	9309      	str	r3, [sp, #36]	; 0x24
 80013fe:	783b      	ldrb	r3, [r7, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 809b 	beq.w	800153c <_svfiprintf_r+0x1b0>
 8001406:	2300      	movs	r3, #0
 8001408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800140c:	9304      	str	r3, [sp, #16]
 800140e:	9307      	str	r3, [sp, #28]
 8001410:	9205      	str	r2, [sp, #20]
 8001412:	9306      	str	r3, [sp, #24]
 8001414:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001418:	931a      	str	r3, [sp, #104]	; 0x68
 800141a:	2205      	movs	r2, #5
 800141c:	7821      	ldrb	r1, [r4, #0]
 800141e:	4850      	ldr	r0, [pc, #320]	; (8001560 <_svfiprintf_r+0x1d4>)
 8001420:	f000 fa40 	bl	80018a4 <memchr>
 8001424:	1c67      	adds	r7, r4, #1
 8001426:	9b04      	ldr	r3, [sp, #16]
 8001428:	b9d8      	cbnz	r0, 8001462 <_svfiprintf_r+0xd6>
 800142a:	06d9      	lsls	r1, r3, #27
 800142c:	bf44      	itt	mi
 800142e:	2220      	movmi	r2, #32
 8001430:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001434:	071a      	lsls	r2, r3, #28
 8001436:	bf44      	itt	mi
 8001438:	222b      	movmi	r2, #43	; 0x2b
 800143a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800143e:	7822      	ldrb	r2, [r4, #0]
 8001440:	2a2a      	cmp	r2, #42	; 0x2a
 8001442:	d016      	beq.n	8001472 <_svfiprintf_r+0xe6>
 8001444:	2100      	movs	r1, #0
 8001446:	200a      	movs	r0, #10
 8001448:	9a07      	ldr	r2, [sp, #28]
 800144a:	4627      	mov	r7, r4
 800144c:	783b      	ldrb	r3, [r7, #0]
 800144e:	3401      	adds	r4, #1
 8001450:	3b30      	subs	r3, #48	; 0x30
 8001452:	2b09      	cmp	r3, #9
 8001454:	d950      	bls.n	80014f8 <_svfiprintf_r+0x16c>
 8001456:	b1c9      	cbz	r1, 800148c <_svfiprintf_r+0x100>
 8001458:	e011      	b.n	800147e <_svfiprintf_r+0xf2>
 800145a:	2b25      	cmp	r3, #37	; 0x25
 800145c:	d0c0      	beq.n	80013e0 <_svfiprintf_r+0x54>
 800145e:	4627      	mov	r7, r4
 8001460:	e7b9      	b.n	80013d6 <_svfiprintf_r+0x4a>
 8001462:	4a3f      	ldr	r2, [pc, #252]	; (8001560 <_svfiprintf_r+0x1d4>)
 8001464:	463c      	mov	r4, r7
 8001466:	1a80      	subs	r0, r0, r2
 8001468:	fa0b f000 	lsl.w	r0, fp, r0
 800146c:	4318      	orrs	r0, r3
 800146e:	9004      	str	r0, [sp, #16]
 8001470:	e7d3      	b.n	800141a <_svfiprintf_r+0x8e>
 8001472:	9a03      	ldr	r2, [sp, #12]
 8001474:	1d11      	adds	r1, r2, #4
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	9103      	str	r1, [sp, #12]
 800147a:	2a00      	cmp	r2, #0
 800147c:	db01      	blt.n	8001482 <_svfiprintf_r+0xf6>
 800147e:	9207      	str	r2, [sp, #28]
 8001480:	e004      	b.n	800148c <_svfiprintf_r+0x100>
 8001482:	4252      	negs	r2, r2
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	9207      	str	r2, [sp, #28]
 800148a:	9304      	str	r3, [sp, #16]
 800148c:	783b      	ldrb	r3, [r7, #0]
 800148e:	2b2e      	cmp	r3, #46	; 0x2e
 8001490:	d10d      	bne.n	80014ae <_svfiprintf_r+0x122>
 8001492:	787b      	ldrb	r3, [r7, #1]
 8001494:	1c79      	adds	r1, r7, #1
 8001496:	2b2a      	cmp	r3, #42	; 0x2a
 8001498:	d132      	bne.n	8001500 <_svfiprintf_r+0x174>
 800149a:	9b03      	ldr	r3, [sp, #12]
 800149c:	3702      	adds	r7, #2
 800149e:	1d1a      	adds	r2, r3, #4
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	9203      	str	r2, [sp, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bfb8      	it	lt
 80014a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80014ac:	9305      	str	r3, [sp, #20]
 80014ae:	4c2d      	ldr	r4, [pc, #180]	; (8001564 <_svfiprintf_r+0x1d8>)
 80014b0:	2203      	movs	r2, #3
 80014b2:	7839      	ldrb	r1, [r7, #0]
 80014b4:	4620      	mov	r0, r4
 80014b6:	f000 f9f5 	bl	80018a4 <memchr>
 80014ba:	b138      	cbz	r0, 80014cc <_svfiprintf_r+0x140>
 80014bc:	2340      	movs	r3, #64	; 0x40
 80014be:	1b00      	subs	r0, r0, r4
 80014c0:	fa03 f000 	lsl.w	r0, r3, r0
 80014c4:	9b04      	ldr	r3, [sp, #16]
 80014c6:	3701      	adds	r7, #1
 80014c8:	4303      	orrs	r3, r0
 80014ca:	9304      	str	r3, [sp, #16]
 80014cc:	7839      	ldrb	r1, [r7, #0]
 80014ce:	2206      	movs	r2, #6
 80014d0:	4825      	ldr	r0, [pc, #148]	; (8001568 <_svfiprintf_r+0x1dc>)
 80014d2:	1c7e      	adds	r6, r7, #1
 80014d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80014d8:	f000 f9e4 	bl	80018a4 <memchr>
 80014dc:	2800      	cmp	r0, #0
 80014de:	d035      	beq.n	800154c <_svfiprintf_r+0x1c0>
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <_svfiprintf_r+0x1e0>)
 80014e2:	b9fb      	cbnz	r3, 8001524 <_svfiprintf_r+0x198>
 80014e4:	9b03      	ldr	r3, [sp, #12]
 80014e6:	3307      	adds	r3, #7
 80014e8:	f023 0307 	bic.w	r3, r3, #7
 80014ec:	3308      	adds	r3, #8
 80014ee:	9303      	str	r3, [sp, #12]
 80014f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014f2:	444b      	add	r3, r9
 80014f4:	9309      	str	r3, [sp, #36]	; 0x24
 80014f6:	e76d      	b.n	80013d4 <_svfiprintf_r+0x48>
 80014f8:	fb00 3202 	mla	r2, r0, r2, r3
 80014fc:	2101      	movs	r1, #1
 80014fe:	e7a4      	b.n	800144a <_svfiprintf_r+0xbe>
 8001500:	2300      	movs	r3, #0
 8001502:	240a      	movs	r4, #10
 8001504:	4618      	mov	r0, r3
 8001506:	9305      	str	r3, [sp, #20]
 8001508:	460f      	mov	r7, r1
 800150a:	783a      	ldrb	r2, [r7, #0]
 800150c:	3101      	adds	r1, #1
 800150e:	3a30      	subs	r2, #48	; 0x30
 8001510:	2a09      	cmp	r2, #9
 8001512:	d903      	bls.n	800151c <_svfiprintf_r+0x190>
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0ca      	beq.n	80014ae <_svfiprintf_r+0x122>
 8001518:	9005      	str	r0, [sp, #20]
 800151a:	e7c8      	b.n	80014ae <_svfiprintf_r+0x122>
 800151c:	fb04 2000 	mla	r0, r4, r0, r2
 8001520:	2301      	movs	r3, #1
 8001522:	e7f1      	b.n	8001508 <_svfiprintf_r+0x17c>
 8001524:	ab03      	add	r3, sp, #12
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	462a      	mov	r2, r5
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <_svfiprintf_r+0x1e4>)
 800152c:	a904      	add	r1, sp, #16
 800152e:	4640      	mov	r0, r8
 8001530:	f3af 8000 	nop.w
 8001534:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001538:	4681      	mov	r9, r0
 800153a:	d1d9      	bne.n	80014f0 <_svfiprintf_r+0x164>
 800153c:	89ab      	ldrh	r3, [r5, #12]
 800153e:	065b      	lsls	r3, r3, #25
 8001540:	f53f af39 	bmi.w	80013b6 <_svfiprintf_r+0x2a>
 8001544:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001546:	b01d      	add	sp, #116	; 0x74
 8001548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800154c:	ab03      	add	r3, sp, #12
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	462a      	mov	r2, r5
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <_svfiprintf_r+0x1e4>)
 8001554:	a904      	add	r1, sp, #16
 8001556:	4640      	mov	r0, r8
 8001558:	f000 f884 	bl	8001664 <_printf_i>
 800155c:	e7ea      	b.n	8001534 <_svfiprintf_r+0x1a8>
 800155e:	bf00      	nop
 8001560:	08001b57 	.word	0x08001b57
 8001564:	08001b5d 	.word	0x08001b5d
 8001568:	08001b61 	.word	0x08001b61
 800156c:	00000000 	.word	0x00000000
 8001570:	080012d5 	.word	0x080012d5

08001574 <_printf_common>:
 8001574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001578:	4691      	mov	r9, r2
 800157a:	461f      	mov	r7, r3
 800157c:	688a      	ldr	r2, [r1, #8]
 800157e:	690b      	ldr	r3, [r1, #16]
 8001580:	4606      	mov	r6, r0
 8001582:	4293      	cmp	r3, r2
 8001584:	bfb8      	it	lt
 8001586:	4613      	movlt	r3, r2
 8001588:	f8c9 3000 	str.w	r3, [r9]
 800158c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001590:	460c      	mov	r4, r1
 8001592:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001596:	b112      	cbz	r2, 800159e <_printf_common+0x2a>
 8001598:	3301      	adds	r3, #1
 800159a:	f8c9 3000 	str.w	r3, [r9]
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	0699      	lsls	r1, r3, #26
 80015a2:	bf42      	ittt	mi
 80015a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80015a8:	3302      	addmi	r3, #2
 80015aa:	f8c9 3000 	strmi.w	r3, [r9]
 80015ae:	6825      	ldr	r5, [r4, #0]
 80015b0:	f015 0506 	ands.w	r5, r5, #6
 80015b4:	d107      	bne.n	80015c6 <_printf_common+0x52>
 80015b6:	f104 0a19 	add.w	sl, r4, #25
 80015ba:	68e3      	ldr	r3, [r4, #12]
 80015bc:	f8d9 2000 	ldr.w	r2, [r9]
 80015c0:	1a9b      	subs	r3, r3, r2
 80015c2:	429d      	cmp	r5, r3
 80015c4:	db2a      	blt.n	800161c <_printf_common+0xa8>
 80015c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80015ca:	6822      	ldr	r2, [r4, #0]
 80015cc:	3300      	adds	r3, #0
 80015ce:	bf18      	it	ne
 80015d0:	2301      	movne	r3, #1
 80015d2:	0692      	lsls	r2, r2, #26
 80015d4:	d42f      	bmi.n	8001636 <_printf_common+0xc2>
 80015d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80015da:	4639      	mov	r1, r7
 80015dc:	4630      	mov	r0, r6
 80015de:	47c0      	blx	r8
 80015e0:	3001      	adds	r0, #1
 80015e2:	d022      	beq.n	800162a <_printf_common+0xb6>
 80015e4:	6823      	ldr	r3, [r4, #0]
 80015e6:	68e5      	ldr	r5, [r4, #12]
 80015e8:	f003 0306 	and.w	r3, r3, #6
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	bf18      	it	ne
 80015f0:	2500      	movne	r5, #0
 80015f2:	f8d9 2000 	ldr.w	r2, [r9]
 80015f6:	f04f 0900 	mov.w	r9, #0
 80015fa:	bf08      	it	eq
 80015fc:	1aad      	subeq	r5, r5, r2
 80015fe:	68a3      	ldr	r3, [r4, #8]
 8001600:	6922      	ldr	r2, [r4, #16]
 8001602:	bf08      	it	eq
 8001604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001608:	4293      	cmp	r3, r2
 800160a:	bfc4      	itt	gt
 800160c:	1a9b      	subgt	r3, r3, r2
 800160e:	18ed      	addgt	r5, r5, r3
 8001610:	341a      	adds	r4, #26
 8001612:	454d      	cmp	r5, r9
 8001614:	d11b      	bne.n	800164e <_printf_common+0xda>
 8001616:	2000      	movs	r0, #0
 8001618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800161c:	2301      	movs	r3, #1
 800161e:	4652      	mov	r2, sl
 8001620:	4639      	mov	r1, r7
 8001622:	4630      	mov	r0, r6
 8001624:	47c0      	blx	r8
 8001626:	3001      	adds	r0, #1
 8001628:	d103      	bne.n	8001632 <_printf_common+0xbe>
 800162a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800162e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001632:	3501      	adds	r5, #1
 8001634:	e7c1      	b.n	80015ba <_printf_common+0x46>
 8001636:	2030      	movs	r0, #48	; 0x30
 8001638:	18e1      	adds	r1, r4, r3
 800163a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001644:	4422      	add	r2, r4
 8001646:	3302      	adds	r3, #2
 8001648:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800164c:	e7c3      	b.n	80015d6 <_printf_common+0x62>
 800164e:	2301      	movs	r3, #1
 8001650:	4622      	mov	r2, r4
 8001652:	4639      	mov	r1, r7
 8001654:	4630      	mov	r0, r6
 8001656:	47c0      	blx	r8
 8001658:	3001      	adds	r0, #1
 800165a:	d0e6      	beq.n	800162a <_printf_common+0xb6>
 800165c:	f109 0901 	add.w	r9, r9, #1
 8001660:	e7d7      	b.n	8001612 <_printf_common+0x9e>
	...

08001664 <_printf_i>:
 8001664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001668:	4617      	mov	r7, r2
 800166a:	7e0a      	ldrb	r2, [r1, #24]
 800166c:	b085      	sub	sp, #20
 800166e:	2a6e      	cmp	r2, #110	; 0x6e
 8001670:	4698      	mov	r8, r3
 8001672:	4606      	mov	r6, r0
 8001674:	460c      	mov	r4, r1
 8001676:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001678:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800167c:	f000 80bc 	beq.w	80017f8 <_printf_i+0x194>
 8001680:	d81a      	bhi.n	80016b8 <_printf_i+0x54>
 8001682:	2a63      	cmp	r2, #99	; 0x63
 8001684:	d02e      	beq.n	80016e4 <_printf_i+0x80>
 8001686:	d80a      	bhi.n	800169e <_printf_i+0x3a>
 8001688:	2a00      	cmp	r2, #0
 800168a:	f000 80c8 	beq.w	800181e <_printf_i+0x1ba>
 800168e:	2a58      	cmp	r2, #88	; 0x58
 8001690:	f000 808a 	beq.w	80017a8 <_printf_i+0x144>
 8001694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001698:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800169c:	e02a      	b.n	80016f4 <_printf_i+0x90>
 800169e:	2a64      	cmp	r2, #100	; 0x64
 80016a0:	d001      	beq.n	80016a6 <_printf_i+0x42>
 80016a2:	2a69      	cmp	r2, #105	; 0x69
 80016a4:	d1f6      	bne.n	8001694 <_printf_i+0x30>
 80016a6:	6821      	ldr	r1, [r4, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80016ae:	d023      	beq.n	80016f8 <_printf_i+0x94>
 80016b0:	1d11      	adds	r1, r2, #4
 80016b2:	6019      	str	r1, [r3, #0]
 80016b4:	6813      	ldr	r3, [r2, #0]
 80016b6:	e027      	b.n	8001708 <_printf_i+0xa4>
 80016b8:	2a73      	cmp	r2, #115	; 0x73
 80016ba:	f000 80b4 	beq.w	8001826 <_printf_i+0x1c2>
 80016be:	d808      	bhi.n	80016d2 <_printf_i+0x6e>
 80016c0:	2a6f      	cmp	r2, #111	; 0x6f
 80016c2:	d02a      	beq.n	800171a <_printf_i+0xb6>
 80016c4:	2a70      	cmp	r2, #112	; 0x70
 80016c6:	d1e5      	bne.n	8001694 <_printf_i+0x30>
 80016c8:	680a      	ldr	r2, [r1, #0]
 80016ca:	f042 0220 	orr.w	r2, r2, #32
 80016ce:	600a      	str	r2, [r1, #0]
 80016d0:	e003      	b.n	80016da <_printf_i+0x76>
 80016d2:	2a75      	cmp	r2, #117	; 0x75
 80016d4:	d021      	beq.n	800171a <_printf_i+0xb6>
 80016d6:	2a78      	cmp	r2, #120	; 0x78
 80016d8:	d1dc      	bne.n	8001694 <_printf_i+0x30>
 80016da:	2278      	movs	r2, #120	; 0x78
 80016dc:	496f      	ldr	r1, [pc, #444]	; (800189c <_printf_i+0x238>)
 80016de:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80016e2:	e064      	b.n	80017ae <_printf_i+0x14a>
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80016ea:	1d11      	adds	r1, r2, #4
 80016ec:	6019      	str	r1, [r3, #0]
 80016ee:	6813      	ldr	r3, [r2, #0]
 80016f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0a3      	b.n	8001840 <_printf_i+0x1dc>
 80016f8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80016fc:	f102 0104 	add.w	r1, r2, #4
 8001700:	6019      	str	r1, [r3, #0]
 8001702:	d0d7      	beq.n	80016b4 <_printf_i+0x50>
 8001704:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001708:	2b00      	cmp	r3, #0
 800170a:	da03      	bge.n	8001714 <_printf_i+0xb0>
 800170c:	222d      	movs	r2, #45	; 0x2d
 800170e:	425b      	negs	r3, r3
 8001710:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001714:	4962      	ldr	r1, [pc, #392]	; (80018a0 <_printf_i+0x23c>)
 8001716:	220a      	movs	r2, #10
 8001718:	e017      	b.n	800174a <_printf_i+0xe6>
 800171a:	6820      	ldr	r0, [r4, #0]
 800171c:	6819      	ldr	r1, [r3, #0]
 800171e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001722:	d003      	beq.n	800172c <_printf_i+0xc8>
 8001724:	1d08      	adds	r0, r1, #4
 8001726:	6018      	str	r0, [r3, #0]
 8001728:	680b      	ldr	r3, [r1, #0]
 800172a:	e006      	b.n	800173a <_printf_i+0xd6>
 800172c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001730:	f101 0004 	add.w	r0, r1, #4
 8001734:	6018      	str	r0, [r3, #0]
 8001736:	d0f7      	beq.n	8001728 <_printf_i+0xc4>
 8001738:	880b      	ldrh	r3, [r1, #0]
 800173a:	2a6f      	cmp	r2, #111	; 0x6f
 800173c:	bf14      	ite	ne
 800173e:	220a      	movne	r2, #10
 8001740:	2208      	moveq	r2, #8
 8001742:	4957      	ldr	r1, [pc, #348]	; (80018a0 <_printf_i+0x23c>)
 8001744:	2000      	movs	r0, #0
 8001746:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800174a:	6865      	ldr	r5, [r4, #4]
 800174c:	2d00      	cmp	r5, #0
 800174e:	60a5      	str	r5, [r4, #8]
 8001750:	f2c0 809c 	blt.w	800188c <_printf_i+0x228>
 8001754:	6820      	ldr	r0, [r4, #0]
 8001756:	f020 0004 	bic.w	r0, r0, #4
 800175a:	6020      	str	r0, [r4, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d13f      	bne.n	80017e0 <_printf_i+0x17c>
 8001760:	2d00      	cmp	r5, #0
 8001762:	f040 8095 	bne.w	8001890 <_printf_i+0x22c>
 8001766:	4675      	mov	r5, lr
 8001768:	2a08      	cmp	r2, #8
 800176a:	d10b      	bne.n	8001784 <_printf_i+0x120>
 800176c:	6823      	ldr	r3, [r4, #0]
 800176e:	07da      	lsls	r2, r3, #31
 8001770:	d508      	bpl.n	8001784 <_printf_i+0x120>
 8001772:	6923      	ldr	r3, [r4, #16]
 8001774:	6862      	ldr	r2, [r4, #4]
 8001776:	429a      	cmp	r2, r3
 8001778:	bfde      	ittt	le
 800177a:	2330      	movle	r3, #48	; 0x30
 800177c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001780:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001784:	ebae 0305 	sub.w	r3, lr, r5
 8001788:	6123      	str	r3, [r4, #16]
 800178a:	f8cd 8000 	str.w	r8, [sp]
 800178e:	463b      	mov	r3, r7
 8001790:	aa03      	add	r2, sp, #12
 8001792:	4621      	mov	r1, r4
 8001794:	4630      	mov	r0, r6
 8001796:	f7ff feed 	bl	8001574 <_printf_common>
 800179a:	3001      	adds	r0, #1
 800179c:	d155      	bne.n	800184a <_printf_i+0x1e6>
 800179e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017a2:	b005      	add	sp, #20
 80017a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017a8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80017ac:	493c      	ldr	r1, [pc, #240]	; (80018a0 <_printf_i+0x23c>)
 80017ae:	6822      	ldr	r2, [r4, #0]
 80017b0:	6818      	ldr	r0, [r3, #0]
 80017b2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80017b6:	f100 0504 	add.w	r5, r0, #4
 80017ba:	601d      	str	r5, [r3, #0]
 80017bc:	d001      	beq.n	80017c2 <_printf_i+0x15e>
 80017be:	6803      	ldr	r3, [r0, #0]
 80017c0:	e002      	b.n	80017c8 <_printf_i+0x164>
 80017c2:	0655      	lsls	r5, r2, #25
 80017c4:	d5fb      	bpl.n	80017be <_printf_i+0x15a>
 80017c6:	8803      	ldrh	r3, [r0, #0]
 80017c8:	07d0      	lsls	r0, r2, #31
 80017ca:	bf44      	itt	mi
 80017cc:	f042 0220 	orrmi.w	r2, r2, #32
 80017d0:	6022      	strmi	r2, [r4, #0]
 80017d2:	b91b      	cbnz	r3, 80017dc <_printf_i+0x178>
 80017d4:	6822      	ldr	r2, [r4, #0]
 80017d6:	f022 0220 	bic.w	r2, r2, #32
 80017da:	6022      	str	r2, [r4, #0]
 80017dc:	2210      	movs	r2, #16
 80017de:	e7b1      	b.n	8001744 <_printf_i+0xe0>
 80017e0:	4675      	mov	r5, lr
 80017e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80017e6:	fb02 3310 	mls	r3, r2, r0, r3
 80017ea:	5ccb      	ldrb	r3, [r1, r3]
 80017ec:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80017f0:	4603      	mov	r3, r0
 80017f2:	2800      	cmp	r0, #0
 80017f4:	d1f5      	bne.n	80017e2 <_printf_i+0x17e>
 80017f6:	e7b7      	b.n	8001768 <_printf_i+0x104>
 80017f8:	6808      	ldr	r0, [r1, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001800:	6949      	ldr	r1, [r1, #20]
 8001802:	d004      	beq.n	800180e <_printf_i+0x1aa>
 8001804:	1d10      	adds	r0, r2, #4
 8001806:	6018      	str	r0, [r3, #0]
 8001808:	6813      	ldr	r3, [r2, #0]
 800180a:	6019      	str	r1, [r3, #0]
 800180c:	e007      	b.n	800181e <_printf_i+0x1ba>
 800180e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001812:	f102 0004 	add.w	r0, r2, #4
 8001816:	6018      	str	r0, [r3, #0]
 8001818:	6813      	ldr	r3, [r2, #0]
 800181a:	d0f6      	beq.n	800180a <_printf_i+0x1a6>
 800181c:	8019      	strh	r1, [r3, #0]
 800181e:	2300      	movs	r3, #0
 8001820:	4675      	mov	r5, lr
 8001822:	6123      	str	r3, [r4, #16]
 8001824:	e7b1      	b.n	800178a <_printf_i+0x126>
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	1d11      	adds	r1, r2, #4
 800182a:	6019      	str	r1, [r3, #0]
 800182c:	6815      	ldr	r5, [r2, #0]
 800182e:	2100      	movs	r1, #0
 8001830:	6862      	ldr	r2, [r4, #4]
 8001832:	4628      	mov	r0, r5
 8001834:	f000 f836 	bl	80018a4 <memchr>
 8001838:	b108      	cbz	r0, 800183e <_printf_i+0x1da>
 800183a:	1b40      	subs	r0, r0, r5
 800183c:	6060      	str	r0, [r4, #4]
 800183e:	6863      	ldr	r3, [r4, #4]
 8001840:	6123      	str	r3, [r4, #16]
 8001842:	2300      	movs	r3, #0
 8001844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001848:	e79f      	b.n	800178a <_printf_i+0x126>
 800184a:	6923      	ldr	r3, [r4, #16]
 800184c:	462a      	mov	r2, r5
 800184e:	4639      	mov	r1, r7
 8001850:	4630      	mov	r0, r6
 8001852:	47c0      	blx	r8
 8001854:	3001      	adds	r0, #1
 8001856:	d0a2      	beq.n	800179e <_printf_i+0x13a>
 8001858:	6823      	ldr	r3, [r4, #0]
 800185a:	079b      	lsls	r3, r3, #30
 800185c:	d507      	bpl.n	800186e <_printf_i+0x20a>
 800185e:	2500      	movs	r5, #0
 8001860:	f104 0919 	add.w	r9, r4, #25
 8001864:	68e3      	ldr	r3, [r4, #12]
 8001866:	9a03      	ldr	r2, [sp, #12]
 8001868:	1a9b      	subs	r3, r3, r2
 800186a:	429d      	cmp	r5, r3
 800186c:	db05      	blt.n	800187a <_printf_i+0x216>
 800186e:	68e0      	ldr	r0, [r4, #12]
 8001870:	9b03      	ldr	r3, [sp, #12]
 8001872:	4298      	cmp	r0, r3
 8001874:	bfb8      	it	lt
 8001876:	4618      	movlt	r0, r3
 8001878:	e793      	b.n	80017a2 <_printf_i+0x13e>
 800187a:	2301      	movs	r3, #1
 800187c:	464a      	mov	r2, r9
 800187e:	4639      	mov	r1, r7
 8001880:	4630      	mov	r0, r6
 8001882:	47c0      	blx	r8
 8001884:	3001      	adds	r0, #1
 8001886:	d08a      	beq.n	800179e <_printf_i+0x13a>
 8001888:	3501      	adds	r5, #1
 800188a:	e7eb      	b.n	8001864 <_printf_i+0x200>
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1a7      	bne.n	80017e0 <_printf_i+0x17c>
 8001890:	780b      	ldrb	r3, [r1, #0]
 8001892:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001896:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800189a:	e765      	b.n	8001768 <_printf_i+0x104>
 800189c:	08001b79 	.word	0x08001b79
 80018a0:	08001b68 	.word	0x08001b68

080018a4 <memchr>:
 80018a4:	b510      	push	{r4, lr}
 80018a6:	b2c9      	uxtb	r1, r1
 80018a8:	4402      	add	r2, r0
 80018aa:	4290      	cmp	r0, r2
 80018ac:	4603      	mov	r3, r0
 80018ae:	d101      	bne.n	80018b4 <memchr+0x10>
 80018b0:	2000      	movs	r0, #0
 80018b2:	bd10      	pop	{r4, pc}
 80018b4:	781c      	ldrb	r4, [r3, #0]
 80018b6:	3001      	adds	r0, #1
 80018b8:	428c      	cmp	r4, r1
 80018ba:	d1f6      	bne.n	80018aa <memchr+0x6>
 80018bc:	4618      	mov	r0, r3
 80018be:	bd10      	pop	{r4, pc}

080018c0 <memcpy>:
 80018c0:	b510      	push	{r4, lr}
 80018c2:	1e43      	subs	r3, r0, #1
 80018c4:	440a      	add	r2, r1
 80018c6:	4291      	cmp	r1, r2
 80018c8:	d100      	bne.n	80018cc <memcpy+0xc>
 80018ca:	bd10      	pop	{r4, pc}
 80018cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80018d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80018d4:	e7f7      	b.n	80018c6 <memcpy+0x6>

080018d6 <memmove>:
 80018d6:	4288      	cmp	r0, r1
 80018d8:	b510      	push	{r4, lr}
 80018da:	eb01 0302 	add.w	r3, r1, r2
 80018de:	d803      	bhi.n	80018e8 <memmove+0x12>
 80018e0:	1e42      	subs	r2, r0, #1
 80018e2:	4299      	cmp	r1, r3
 80018e4:	d10c      	bne.n	8001900 <memmove+0x2a>
 80018e6:	bd10      	pop	{r4, pc}
 80018e8:	4298      	cmp	r0, r3
 80018ea:	d2f9      	bcs.n	80018e0 <memmove+0xa>
 80018ec:	1881      	adds	r1, r0, r2
 80018ee:	1ad2      	subs	r2, r2, r3
 80018f0:	42d3      	cmn	r3, r2
 80018f2:	d100      	bne.n	80018f6 <memmove+0x20>
 80018f4:	bd10      	pop	{r4, pc}
 80018f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80018fa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80018fe:	e7f7      	b.n	80018f0 <memmove+0x1a>
 8001900:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001904:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001908:	e7eb      	b.n	80018e2 <memmove+0xc>
	...

0800190c <_free_r>:
 800190c:	b538      	push	{r3, r4, r5, lr}
 800190e:	4605      	mov	r5, r0
 8001910:	2900      	cmp	r1, #0
 8001912:	d043      	beq.n	800199c <_free_r+0x90>
 8001914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001918:	1f0c      	subs	r4, r1, #4
 800191a:	2b00      	cmp	r3, #0
 800191c:	bfb8      	it	lt
 800191e:	18e4      	addlt	r4, r4, r3
 8001920:	f000 f8d4 	bl	8001acc <__malloc_lock>
 8001924:	4a1e      	ldr	r2, [pc, #120]	; (80019a0 <_free_r+0x94>)
 8001926:	6813      	ldr	r3, [r2, #0]
 8001928:	4610      	mov	r0, r2
 800192a:	b933      	cbnz	r3, 800193a <_free_r+0x2e>
 800192c:	6063      	str	r3, [r4, #4]
 800192e:	6014      	str	r4, [r2, #0]
 8001930:	4628      	mov	r0, r5
 8001932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001936:	f000 b8ca 	b.w	8001ace <__malloc_unlock>
 800193a:	42a3      	cmp	r3, r4
 800193c:	d90b      	bls.n	8001956 <_free_r+0x4a>
 800193e:	6821      	ldr	r1, [r4, #0]
 8001940:	1862      	adds	r2, r4, r1
 8001942:	4293      	cmp	r3, r2
 8001944:	bf01      	itttt	eq
 8001946:	681a      	ldreq	r2, [r3, #0]
 8001948:	685b      	ldreq	r3, [r3, #4]
 800194a:	1852      	addeq	r2, r2, r1
 800194c:	6022      	streq	r2, [r4, #0]
 800194e:	6063      	str	r3, [r4, #4]
 8001950:	6004      	str	r4, [r0, #0]
 8001952:	e7ed      	b.n	8001930 <_free_r+0x24>
 8001954:	4613      	mov	r3, r2
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	b10a      	cbz	r2, 800195e <_free_r+0x52>
 800195a:	42a2      	cmp	r2, r4
 800195c:	d9fa      	bls.n	8001954 <_free_r+0x48>
 800195e:	6819      	ldr	r1, [r3, #0]
 8001960:	1858      	adds	r0, r3, r1
 8001962:	42a0      	cmp	r0, r4
 8001964:	d10b      	bne.n	800197e <_free_r+0x72>
 8001966:	6820      	ldr	r0, [r4, #0]
 8001968:	4401      	add	r1, r0
 800196a:	1858      	adds	r0, r3, r1
 800196c:	4282      	cmp	r2, r0
 800196e:	6019      	str	r1, [r3, #0]
 8001970:	d1de      	bne.n	8001930 <_free_r+0x24>
 8001972:	6810      	ldr	r0, [r2, #0]
 8001974:	6852      	ldr	r2, [r2, #4]
 8001976:	4401      	add	r1, r0
 8001978:	6019      	str	r1, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	e7d8      	b.n	8001930 <_free_r+0x24>
 800197e:	d902      	bls.n	8001986 <_free_r+0x7a>
 8001980:	230c      	movs	r3, #12
 8001982:	602b      	str	r3, [r5, #0]
 8001984:	e7d4      	b.n	8001930 <_free_r+0x24>
 8001986:	6820      	ldr	r0, [r4, #0]
 8001988:	1821      	adds	r1, r4, r0
 800198a:	428a      	cmp	r2, r1
 800198c:	bf01      	itttt	eq
 800198e:	6811      	ldreq	r1, [r2, #0]
 8001990:	6852      	ldreq	r2, [r2, #4]
 8001992:	1809      	addeq	r1, r1, r0
 8001994:	6021      	streq	r1, [r4, #0]
 8001996:	6062      	str	r2, [r4, #4]
 8001998:	605c      	str	r4, [r3, #4]
 800199a:	e7c9      	b.n	8001930 <_free_r+0x24>
 800199c:	bd38      	pop	{r3, r4, r5, pc}
 800199e:	bf00      	nop
 80019a0:	200000d0 	.word	0x200000d0

080019a4 <_malloc_r>:
 80019a4:	b570      	push	{r4, r5, r6, lr}
 80019a6:	1ccd      	adds	r5, r1, #3
 80019a8:	f025 0503 	bic.w	r5, r5, #3
 80019ac:	3508      	adds	r5, #8
 80019ae:	2d0c      	cmp	r5, #12
 80019b0:	bf38      	it	cc
 80019b2:	250c      	movcc	r5, #12
 80019b4:	2d00      	cmp	r5, #0
 80019b6:	4606      	mov	r6, r0
 80019b8:	db01      	blt.n	80019be <_malloc_r+0x1a>
 80019ba:	42a9      	cmp	r1, r5
 80019bc:	d903      	bls.n	80019c6 <_malloc_r+0x22>
 80019be:	230c      	movs	r3, #12
 80019c0:	6033      	str	r3, [r6, #0]
 80019c2:	2000      	movs	r0, #0
 80019c4:	bd70      	pop	{r4, r5, r6, pc}
 80019c6:	f000 f881 	bl	8001acc <__malloc_lock>
 80019ca:	4a23      	ldr	r2, [pc, #140]	; (8001a58 <_malloc_r+0xb4>)
 80019cc:	6814      	ldr	r4, [r2, #0]
 80019ce:	4621      	mov	r1, r4
 80019d0:	b991      	cbnz	r1, 80019f8 <_malloc_r+0x54>
 80019d2:	4c22      	ldr	r4, [pc, #136]	; (8001a5c <_malloc_r+0xb8>)
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	b91b      	cbnz	r3, 80019e0 <_malloc_r+0x3c>
 80019d8:	4630      	mov	r0, r6
 80019da:	f000 f867 	bl	8001aac <_sbrk_r>
 80019de:	6020      	str	r0, [r4, #0]
 80019e0:	4629      	mov	r1, r5
 80019e2:	4630      	mov	r0, r6
 80019e4:	f000 f862 	bl	8001aac <_sbrk_r>
 80019e8:	1c43      	adds	r3, r0, #1
 80019ea:	d126      	bne.n	8001a3a <_malloc_r+0x96>
 80019ec:	230c      	movs	r3, #12
 80019ee:	4630      	mov	r0, r6
 80019f0:	6033      	str	r3, [r6, #0]
 80019f2:	f000 f86c 	bl	8001ace <__malloc_unlock>
 80019f6:	e7e4      	b.n	80019c2 <_malloc_r+0x1e>
 80019f8:	680b      	ldr	r3, [r1, #0]
 80019fa:	1b5b      	subs	r3, r3, r5
 80019fc:	d41a      	bmi.n	8001a34 <_malloc_r+0x90>
 80019fe:	2b0b      	cmp	r3, #11
 8001a00:	d90f      	bls.n	8001a22 <_malloc_r+0x7e>
 8001a02:	600b      	str	r3, [r1, #0]
 8001a04:	18cc      	adds	r4, r1, r3
 8001a06:	50cd      	str	r5, [r1, r3]
 8001a08:	4630      	mov	r0, r6
 8001a0a:	f000 f860 	bl	8001ace <__malloc_unlock>
 8001a0e:	f104 000b 	add.w	r0, r4, #11
 8001a12:	1d23      	adds	r3, r4, #4
 8001a14:	f020 0007 	bic.w	r0, r0, #7
 8001a18:	1ac3      	subs	r3, r0, r3
 8001a1a:	d01b      	beq.n	8001a54 <_malloc_r+0xb0>
 8001a1c:	425a      	negs	r2, r3
 8001a1e:	50e2      	str	r2, [r4, r3]
 8001a20:	bd70      	pop	{r4, r5, r6, pc}
 8001a22:	428c      	cmp	r4, r1
 8001a24:	bf0b      	itete	eq
 8001a26:	6863      	ldreq	r3, [r4, #4]
 8001a28:	684b      	ldrne	r3, [r1, #4]
 8001a2a:	6013      	streq	r3, [r2, #0]
 8001a2c:	6063      	strne	r3, [r4, #4]
 8001a2e:	bf18      	it	ne
 8001a30:	460c      	movne	r4, r1
 8001a32:	e7e9      	b.n	8001a08 <_malloc_r+0x64>
 8001a34:	460c      	mov	r4, r1
 8001a36:	6849      	ldr	r1, [r1, #4]
 8001a38:	e7ca      	b.n	80019d0 <_malloc_r+0x2c>
 8001a3a:	1cc4      	adds	r4, r0, #3
 8001a3c:	f024 0403 	bic.w	r4, r4, #3
 8001a40:	42a0      	cmp	r0, r4
 8001a42:	d005      	beq.n	8001a50 <_malloc_r+0xac>
 8001a44:	1a21      	subs	r1, r4, r0
 8001a46:	4630      	mov	r0, r6
 8001a48:	f000 f830 	bl	8001aac <_sbrk_r>
 8001a4c:	3001      	adds	r0, #1
 8001a4e:	d0cd      	beq.n	80019ec <_malloc_r+0x48>
 8001a50:	6025      	str	r5, [r4, #0]
 8001a52:	e7d9      	b.n	8001a08 <_malloc_r+0x64>
 8001a54:	bd70      	pop	{r4, r5, r6, pc}
 8001a56:	bf00      	nop
 8001a58:	200000d0 	.word	0x200000d0
 8001a5c:	200000d4 	.word	0x200000d4

08001a60 <_realloc_r>:
 8001a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a62:	4607      	mov	r7, r0
 8001a64:	4614      	mov	r4, r2
 8001a66:	460e      	mov	r6, r1
 8001a68:	b921      	cbnz	r1, 8001a74 <_realloc_r+0x14>
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001a70:	f7ff bf98 	b.w	80019a4 <_malloc_r>
 8001a74:	b922      	cbnz	r2, 8001a80 <_realloc_r+0x20>
 8001a76:	f7ff ff49 	bl	800190c <_free_r>
 8001a7a:	4625      	mov	r5, r4
 8001a7c:	4628      	mov	r0, r5
 8001a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a80:	f000 f826 	bl	8001ad0 <_malloc_usable_size_r>
 8001a84:	4284      	cmp	r4, r0
 8001a86:	d90f      	bls.n	8001aa8 <_realloc_r+0x48>
 8001a88:	4621      	mov	r1, r4
 8001a8a:	4638      	mov	r0, r7
 8001a8c:	f7ff ff8a 	bl	80019a4 <_malloc_r>
 8001a90:	4605      	mov	r5, r0
 8001a92:	2800      	cmp	r0, #0
 8001a94:	d0f2      	beq.n	8001a7c <_realloc_r+0x1c>
 8001a96:	4631      	mov	r1, r6
 8001a98:	4622      	mov	r2, r4
 8001a9a:	f7ff ff11 	bl	80018c0 <memcpy>
 8001a9e:	4631      	mov	r1, r6
 8001aa0:	4638      	mov	r0, r7
 8001aa2:	f7ff ff33 	bl	800190c <_free_r>
 8001aa6:	e7e9      	b.n	8001a7c <_realloc_r+0x1c>
 8001aa8:	4635      	mov	r5, r6
 8001aaa:	e7e7      	b.n	8001a7c <_realloc_r+0x1c>

08001aac <_sbrk_r>:
 8001aac:	b538      	push	{r3, r4, r5, lr}
 8001aae:	2300      	movs	r3, #0
 8001ab0:	4c05      	ldr	r4, [pc, #20]	; (8001ac8 <_sbrk_r+0x1c>)
 8001ab2:	4605      	mov	r5, r0
 8001ab4:	4608      	mov	r0, r1
 8001ab6:	6023      	str	r3, [r4, #0]
 8001ab8:	f000 f814 	bl	8001ae4 <_sbrk>
 8001abc:	1c43      	adds	r3, r0, #1
 8001abe:	d102      	bne.n	8001ac6 <_sbrk_r+0x1a>
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	b103      	cbz	r3, 8001ac6 <_sbrk_r+0x1a>
 8001ac4:	602b      	str	r3, [r5, #0]
 8001ac6:	bd38      	pop	{r3, r4, r5, pc}
 8001ac8:	20000124 	.word	0x20000124

08001acc <__malloc_lock>:
 8001acc:	4770      	bx	lr

08001ace <__malloc_unlock>:
 8001ace:	4770      	bx	lr

08001ad0 <_malloc_usable_size_r>:
 8001ad0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8001ad4:	2800      	cmp	r0, #0
 8001ad6:	f1a0 0004 	sub.w	r0, r0, #4
 8001ada:	bfbc      	itt	lt
 8001adc:	580b      	ldrlt	r3, [r1, r0]
 8001ade:	18c0      	addlt	r0, r0, r3
 8001ae0:	4770      	bx	lr
	...

08001ae4 <_sbrk>:
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <_sbrk+0x14>)
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	6819      	ldr	r1, [r3, #0]
 8001aea:	b909      	cbnz	r1, 8001af0 <_sbrk+0xc>
 8001aec:	4903      	ldr	r1, [pc, #12]	; (8001afc <_sbrk+0x18>)
 8001aee:	6019      	str	r1, [r3, #0]
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	4402      	add	r2, r0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	4770      	bx	lr
 8001af8:	200000d8 	.word	0x200000d8
 8001afc:	20000128 	.word	0x20000128

08001b00 <_init>:
 8001b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b02:	bf00      	nop
 8001b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b06:	bc08      	pop	{r3}
 8001b08:	469e      	mov	lr, r3
 8001b0a:	4770      	bx	lr

08001b0c <_fini>:
 8001b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0e:	bf00      	nop
 8001b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b12:	bc08      	pop	{r3}
 8001b14:	469e      	mov	lr, r3
 8001b16:	4770      	bx	lr
